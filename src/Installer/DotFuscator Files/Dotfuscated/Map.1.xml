<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.1.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2009-12-19T19:47:57</timestamp>
        <product version="4.6.1005.29575" user="Gareth Hayter" serial="53993-391-5DB18971-9B88FB90-07402303-54A04417">Dotfuscator Professional Edition</product>
    </header>
    <mapping>
        <module>
            <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Net20.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a4</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x600000d-1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=20</signature>
                        <name>$$method0x60001a2-1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=20</signature>
                        <name>$$method0x60001ac-1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x60004e0-1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x60004e0-2</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x60004ed-1</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x6000505-1</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x6000505-2</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x600050d-1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x600050d-2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x6000970-1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x6000972-1</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=6771</signature>
                        <name>$$method0x6000a89-1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=8568</signature>
                        <name>$$method0x6000a8b-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=20</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a4/c</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=6771</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a4/b</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{23DEBCC1-1C30-470E-980E-4E47C83ACC53}/__StaticArrayInitTypeSize=8568</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a4/a</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type[]()</signature>
                        <name>get_Components</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Image()</signature>
                        <name>get_LicenseFormProductLogo</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.Products.AssemblyLicenseType()</signature>
                        <name>get_LicenseType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.Products.AssemblyPlatform()</signature>
                        <name>get_Platform</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ProductCode</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_RedistributableFiles</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources()</signature>
                        <name>get_Resources</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo</signature>
                        <name>instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources</signature>
                        <name>resources</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource</signature>
                        <name>LicenseFormProductLogo</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Image(ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource)</signature>
                        <name>GetImage</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.SyntaxLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.SyntaxLanguage, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType, System.Collections.ArrayList)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLanguageCaseSensitive</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext(ActiproSoftware.SyntaxEditor.Document, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>GetContextAtOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext(ActiproSoftware.SyntaxEditor.Document, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, bool)</signature>
                        <name>GetContextBeforeOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext(ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetContextForCode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext(ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetContextForDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[](ActiproSoftware.SyntaxEditor.TextStream, int32)</signature>
                        <name>GetGenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ResolveArguments</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ResolveForCode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormatter</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions, ActiproSoftware.SyntaxEditor.Document, int32, string)</signature>
                        <name>AutoIndent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions, ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetIndentationForOffset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.TextStream)</signature>
                        <name>IsNamespaceOrTypeDeclarationHeader</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IndentBlockContents</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IndentCaseContents</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IndentCaseLabels</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IndentOpenAndCloseBraces</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IndentBlockContents</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IndentCaseContents</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IndentCaseLabels</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IndentOpenAndCloseBraces</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>indentBlockContents</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>indentCaseContents</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>indentCaseLabels</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>indentOpenAndCloseBraces</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.ITokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>GetLexicalStateDefaultTokenLexicalParseData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalState, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>GetNextTokenLexicalParseData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>GetPreviousText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsDocumentationCommentStateScopeEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsDocumentationCommentStateScopeStart</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.ITextBufferReader, string)</signature>
                        <name>IsNextText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsPreProcessorDirectiveStateScopeEnd</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsPreProcessorDirectiveStateScopeStart</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseCharacterLiteral</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader, char)</signature>
                        <name>ParseIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseMultiLineComment</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader, char)</signature>
                        <name>ParseNumber</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseSingleLineComment</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseStringLiteral</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseVerbatimStringLiteral</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>keywords</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetLexicalStateKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirective</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>z</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage, ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_DocumentationCommentTextRanges</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_MultiLineCommentTextRanges</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_RegionTextRanges</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken()</signature>
                        <name>GetNextTokenCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment[](ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>ReapComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReapDocumentationComments</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>comments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange</signature>
                        <name>currentDocumentationCommentTextRange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>documentationComment</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>documentationCommentTextRanges</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>multiLineCommentTextRanges</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>regionTextRanges</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ae</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken()</signature>
                        <name>AdvanceToNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>AdvanceToNextCloseCurlyBrace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>AreNextTwo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>AreNextTwoIdentifierAnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>BlockAddChild</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BlockEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>BlockStart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit()</signature>
                        <name>get_CompilationUnit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool[0...,0...]()</signature>
                        <name>get_MultiMatchSets</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, bool)</signature>
                        <name>GetImplicitType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>GetReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsArrayWithDimensions</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsCommaAndIdentifier</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsContextualKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsDefaultValueExpression</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsGlobalAttributeSection</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsIdentifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsImplicitlyTypedLambdaParameterList</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsKeyword</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsKeyword</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsKeywordOrIdentifierAndColon</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsLambdaExpression</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsObjectInitializer</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsParameterArray</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsQualifierIdentifierContinuation</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsQueryExpression</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsRightShift</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsRightShiftAssignment</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsType</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsTypeArgumentList</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsTypeCast</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsTypeCore</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsValidGlobalAttributeSectionTarget</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsVariableDeclaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsVariableDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, bool)</signature>
                        <name>MarkGenericParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchAdditiveExpression</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchAndExpression</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchAnonymousMethodExpression</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchAnonymousObjectCreationExpression</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression&amp;)</signature>
                        <name>MatchAnonymousObjectInitializer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchArgument</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchArgumentList</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchArrayInitializer</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType&amp;)</signature>
                        <name>MatchAssignmentOperator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>MatchAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>MatchAttributeArgument</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>MatchAttributeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>MatchAttributeList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection&amp;)</signature>
                        <name>MatchAttributeSection</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchBlock</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchCastExpression</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause&amp;)</signature>
                        <name>MatchCatchClause</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchClassDeclaration</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration, int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchClassMemberDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(bool, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchClassType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration&amp;)</signature>
                        <name>MatchCollectionRangeVariableDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchCompilationUnit</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchConditionalAndExpression</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchConditionalExpression</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchConditionalOrExpression</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchConstantDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchDelegateDeclaration</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchElementInitializer</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchEmbeddedStatement</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchEnumDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchEnumMemberDeclaration</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchEqualityExpression</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchExclusiveOrExpression</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchExplicitlyTypedLambdaParameter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchExplicitlyTypedLambdaParameterList</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchExpression</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchExternAliasDirective</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchFixedParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchFixedSizeBufferDeclaration</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchFixedSizeBufferDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchFloatingPointType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchFormalParameterList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchFromClause</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchGlobalAttributeSection</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchGroupClause</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchIdentifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchImplicitlyTypedArrayCreationExpression</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchImplicitlyTypedLambdaParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchImplicitlyTypedLambdaParameterList</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchInclusiveOrExpression</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchIntegralType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor&amp;, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor&amp;)</signature>
                        <name>MatchInterfaceAccessors</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchInterfaceDeclaration</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration)</signature>
                        <name>MatchInterfaceMemberDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchJoinClause</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchLabeledStatement</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchLambdaExpression</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchLetClause</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchLocalConstantDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchLocalConstantDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchLocalVariableDeclaration</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchLocalVariableDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchMemberDeclarator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchMemberInitializer</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;, ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchMemberName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers&amp;)</signature>
                        <name>MatchModifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchMultiplicativeExpression</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchNamespaceDeclaration</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchNamespaceMemberDeclaration</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchNamespaceName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(bool, bool, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchNonArrayType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchNonAssignmentExpression</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchNumericType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchObjectOrCollectionInitializer</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchOrderByClause</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering&amp;)</signature>
                        <name>MatchOrdering</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType&amp;)</signature>
                        <name>MatchOverloadableOperator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchParameterArray</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchPrimaryExpression</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchQualifiedIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>MatchQueryBody</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchQueryExpression</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool(int32[]&amp;)</signature>
                        <name>MatchRankSpecifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchRelationalExpression</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchReturnType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchSelectClause</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchShiftExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchSimpleIdentifier</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchSimpleType</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchStackAllocInitializer</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchStatement</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchStatementExpression</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchStructDeclaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration, int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchStructMemberDeclaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection&amp;)</signature>
                        <name>MatchSwitchSection</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchType</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchTypeArgumentList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(bool, bool, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchTypeCore</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchTypeDeclaration</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(bool, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchTypeParameter</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchTypeParameterConstraint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList)</signature>
                        <name>MatchTypeParameterConstraintsClauses</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchTypeParameterList</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchUnaryExpression</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>MatchUsingAliasDirective</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>MatchUsingDirective</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>MatchUsingNamespaceDirective</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchVariableDeclarator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchVariableInitializer</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchWhereClause</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Parse</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>ParseArgumentList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNodeList, bool)</signature>
                        <name>ReapComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReapDocumentationComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange, string)</signature>
                        <name>ReportSyntaxError</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Stack</signature>
                        <name>blockStack</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit</signature>
                        <name>compilationUnit</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>curlyBraceLevel</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>identifierStringBuilder</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool[0...,0...]</signature>
                        <name>multiMatchSets</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>n</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Y</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.IContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable)</signature>
                        <name>AddKeywordMemberListItems</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>CreateDocumentEndToken</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>CreateInvalidToken</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32, ActiproSoftware.SyntaxEditor.LexicalParseFlags, ActiproSoftware.SyntaxEditor.IToken, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)</signature>
                        <name>CreateToken</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions()</signature>
                        <name>get_FormattingOptions</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage()</signature>
                        <name>get_LanguageType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IMergableLexicalParser()</signature>
                        <name>get_MergableLexicalParser</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextStatistics()</signature>
                        <name>get_TextStatistics</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor, int32, bool, bool)</signature>
                        <name>GetContext</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.HighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>GetHighlightingStyle</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetTokenString</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>IntelliPromptCompleteWord</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptMemberListItemDescriptionRequested</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptParameterInfoParameterIndexChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptParameterInfoSelectedIndexChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)</signature>
                        <name>OnSyntaxEditorKeyTyped</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)</signature>
                        <name>OnSyntaxEditorSmartIndent</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)</signature>
                        <name>OnSyntaxEditorViewMouseHover</name>
                    </method>
                    <method>
                        <signature>object(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)</signature>
                        <name>PerformSemanticParse</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetLineCommentDelimiter</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.OutliningNode)</signature>
                        <name>SetOutliningNodeCollapsedText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ShouldSerializeLineCommentDelimiter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShowAboutForm</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptMemberList</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptParameterInfo</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptQuickInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions</signature>
                        <name>formattingOptions</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser</signature>
                        <name>lexicalParser</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.Products.ActiproLicense</signature>
                        <name>license</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CalculateStatistics</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CommentLines</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PureCommentLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>commentLines</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pureCommentLines</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>aj</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32, ActiproSoftware.SyntaxEditor.LexicalParseFlags, ActiproSoftware.SyntaxEditor.IToken, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32)</signature>
                        <name>Clone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsComment</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDocumentEnd</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInvalid</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPairedEnd</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPairedStart</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWhitespace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MatchingTokenID</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsNativeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetTokenKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Abstract</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Add</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Addition</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>AdditionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>As</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Ascending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Assignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Base</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BitwiseAnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BitwiseAndAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BitwiseOr</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BitwiseOrAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Bool</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Break</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>By</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Byte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Case</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Catch</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Char</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CharacterLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Checked</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Class</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseCurlyBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseParenthesis</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseSquareBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Colon</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Comma</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ConditionalAnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ConditionalOr</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Const</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ContextualKeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ContextualKeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Continue</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Decimal</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Decrement</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DefinePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Delegate</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Descending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Division</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DivisionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Do</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentDelimiter</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentTag</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentText</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Dot</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Double</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ElIfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Else</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ElsePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndIfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndRegionPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Enum</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Equality</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Equals</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ErrorPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Event</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExclusiveOr</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExclusiveOrAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Explicit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Extern</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>False</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Finally</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Fixed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Float</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>For</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ForEach</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>From</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Goto</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GreaterThan</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GreaterThanOrEqual</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Group</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HexadecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Identifier</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>If</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Implicit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>In</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Increment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Inequality</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Int</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Interface</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Internal</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Into</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Invalid</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Is</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Join</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>KeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>KeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lambda</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LanguageTransitionEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LanguageTransitionStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LeftShift</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LeftShiftAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LessThan</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LessThanOrEqual</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Let</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LinePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LineTerminator</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lock</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Long</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxTokenID</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Modulus</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ModulusAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MultiLineComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Multiplication</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MultiplicationAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Namespace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NamespaceAliasQualifier</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Negation</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>New</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NullCoalescing</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>On</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OnesComplement</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenCurlyBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenParenthesis</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenSquareBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Operator</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OperatorOrPunctuatorEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OperatorOrPunctuatorStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OrderBy</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Out</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Override</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Params</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Partial</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PointerDereference</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PragmaPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveKeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveKeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveText</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Private</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Protected</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Public</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>QuestionMark</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ReadOnly</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RealLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Ref</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RegionPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Remove</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Return</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SByte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Sealed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Select</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SemiColon</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Short</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SingleLineComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SizeOf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StackAlloc</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Static</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StringLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Struct</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Subtraction</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SubtractionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Switch</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>This</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Throw</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>True</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Try</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TypeOf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UInt</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ULong</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Unchecked</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UndefPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Unsafe</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UShort</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Using</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Var</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>VerbatimStringLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Virtual</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Void</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Volatile</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WarningPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Where</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>While</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Whitespace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Yield</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement()</signature>
                        <name>get_BlockStatement</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>set_BlockStatement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>set_Modifiers</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>BlockStatementContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_CollectionRangeVariableDeclarations</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_QueryOperators</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_TargetExpressions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CollectionRangeVariableDeclarationContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>QueryOperatorContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TargetExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement()</signature>
                        <name>get_BlockStatement</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeParameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>set_BlockStatement</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>BlockStatementContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeParameterContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousTypePropertyDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>returnType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Expressions</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, int32[], ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>set_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32[]</signature>
                        <name>arrayRanks</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Clauses</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RedimClauseContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LeftExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LengthExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType()</signature>
                        <name>get_OperatorType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_RightExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_StartIndexExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LeftExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LengthExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>set_OperatorType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_RightExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_StartIndexExpression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LeftExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LengthExpressionContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>operatorType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RightExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StartIndexExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>Accept</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>AcceptChild</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>AcceptChildren</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel, System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>AppendGenericTypeArgumentsToDisplayText</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel, System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>AppendParametersToDisplayText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ContextID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayText</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration()</signature>
                        <name>get_ParentTypeDeclaration</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration)</signature>
                        <name>GetTypeFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetTypeReferenceName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>IsAccessSpecified</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ContextID</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AstNodeContextIDBase</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>contextID</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>OnPostVisited</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>OnPreVisiting</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement)</signature>
                        <name>OnVisited</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement)</signature>
                        <name>OnVisiting</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel</signature>
                        <name>TypeMembers</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Arguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_AttributeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Target</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_AttributeType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeTypeContextID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>target</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Attributes</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LeftExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType()</signature>
                        <name>get_OperatorType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_RightExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LeftExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>set_OperatorType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_RightExpression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LeftExpressionContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>operatorType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RightExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType()</signature>
                        <name>get_BranchType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType)</signature>
                        <name>set_BranchType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>BranchStatementContextIDBase</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>branchType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>Continue</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>End</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>Exit</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>Goto</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>Return</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType</signature>
                        <name>Stop</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement()</signature>
                        <name>get_BlockStatement</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_EvaluationExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator()</signature>
                        <name>get_VariableDeclarator</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>set_BlockStatement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_EvaluationExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)</signature>
                        <name>set_VariableDeclarator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>BlockStatementContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EvaluationExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableDeclaratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ChildExpressionExpressionContextIDBase</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_Statement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_Statement</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ChildStatementStatementContextIDBase</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Source</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator()</signature>
                        <name>get_VariableDeclarator</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Source</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)</signature>
                        <name>set_VariableDeclarator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>SourceContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableDeclaratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType, ActiproSoftware.SyntaxEditor.TextRange, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType</signature>
                        <name>Documentation</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType</signature>
                        <name>MultiLine</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType</signature>
                        <name>SingleLine</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICompilationUnit.ShouldVisitChildNodesForOutlining</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser)</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICompilationUnit.UpdateOutliningParser</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_DocumentationCommentTextRanges</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection()</signature>
                        <name>get_ExternAliasDirectives</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GlobalAttributeSections</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasErrors</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasLanguageTransitions</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLanguageRoot</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_MultiLineCommentTextRanges</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_NamespaceMembers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OptionCompare</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OptionExplicit</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OptionInfer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OptionStrict</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_RegionTextRanges</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SourceKey</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage()</signature>
                        <name>get_SourceLanguage</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_SyntaxErrors</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.AstNodeList()</signature>
                        <name>get_Types</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection()</signature>
                        <name>get_UsingDirectives</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode(int32)</signature>
                        <name>GetClosestTypeOrMember</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode(int32)</signature>
                        <name>GetContainingNode</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode, string[]&amp;, System.Collections.Hashtable&amp;)</signature>
                        <name>GetImportedNamespaces</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList)</signature>
                        <name>set_DocumentationCommentTextRanges</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection)</signature>
                        <name>set_ExternAliasDirectives</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasLanguageTransitions</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList)</signature>
                        <name>set_MultiLineCommentTextRanges</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OptionCompare</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OptionExplicit</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OptionInfer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OptionStrict</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList)</signature>
                        <name>set_RegionTextRanges</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SourceKey</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage)</signature>
                        <name>set_SourceLanguage</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Tag</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>set_UsingDirectives</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>System.Collections.IList</signature>
                        <name>documentationCommentTextRanges</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExternAliasDirectiveSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GlobalAttributeSectionContextID</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>hasLanguageTransitions</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IList</signature>
                        <name>multiLineCommentTextRanges</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NamespaceMemberContextID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>optionCompare</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>optionExplicit</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>optionInfer</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>optionStrict</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IList</signature>
                        <name>regionTextRanges</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>sourceKey</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage</signature>
                        <name>sourceLanguage</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>syntaxErrors</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>tag</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.AstNodeList</signature>
                        <name>types</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>UsingDirectiveSectionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_FalseExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_TestExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_TrueExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_FalseExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_TestExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_TrueExpression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>FalseStatementContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TestExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TrueStatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_InitializerArguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType()</signature>
                        <name>get_InitializerType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType)</signature>
                        <name>set_InitializerType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerArgumentContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType</signature>
                        <name>initializerType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType</signature>
                        <name>Base</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType</signature>
                        <name>This</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_BaseType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetConstructorAccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration()</signature>
                        <name>CreateBeginInvokeMethod</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration()</signature>
                        <name>CreateEndInvokeMethod</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration()</signature>
                        <name>CreateInvokeMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GenerateInvokeMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_DictionaryKey</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_DictionaryKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>DictionaryKeyContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel</signature>
                        <name>Simple</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel</signature>
                        <name>SimpleFullyQualified</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage</signature>
                        <name>CSharp</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage</signature>
                        <name>VB</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>CompilationUnit</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>Expression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>NamespaceDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>Statement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>TypeDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>TypeMemberDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory</signature>
                        <name>TypeMemberDeclarationSection</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AccessorDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AddressOfExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AggregateQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AnonymousMethodExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ArgumentExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ArrayEraseStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ArrayRedimClause</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ArrayRedimStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AssignmentExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>Attribute</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AttributeArgument</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>AttributeSection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>BaseAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>BinaryExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>BlockStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>BranchStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>BreakStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CastExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CatchClause</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CheckedExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CheckedStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ClassAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ClassDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CollectionRangeVariableDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>Comment</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>CompilationUnit</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ConditionalExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ConstructorDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ContinueStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DefaultValueExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DelegateDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DestructorDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DictionaryAccessExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DistinctQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DocumentationComment</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>DoStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ElseIfSection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>EmptyStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>EnumerationDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>EnumerationMemberDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>EventDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>EventMemberSpecifier</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ExitStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ExternAliasDirective</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ExternAliasDirectiveSection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>FieldDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>FixedSizeBufferDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>FixedSizeBufferDeclarator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>FixedStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ForEachStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ForStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>FromQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>GetXmlNamespaceExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>GoToStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>GroupQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>IfStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InterfaceAccessor</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InterfaceDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InterfaceEventDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InterfaceMethodDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InterfacePropertyDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>InvocationExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>IsTypeOfExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>JoinCondition</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>JoinQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LabeledStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LambdaExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LetQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LiteralExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LocalVariableDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>LockStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>MemberAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>MemberSpecifier</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>MethodDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ModifyEventHandlerStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>NamespaceDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ObjectCollectionInitializerExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ObjectCreationExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>OperatorDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>OrderByQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>Ordering</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ParameterDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ParenthesizedExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>PointerMemberAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>PropertyDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>QualifiedIdentifier</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>QueryExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>RaiseEventStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>RegionPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ReturnStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SelectQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SimpleName</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SingleLineComment</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SizeOfExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SkipQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SkipWhileQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>StackAllocInitializer</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>StandardModuleDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>StatementExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>StructureDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SwitchLabel</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SwitchSection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>SwitchStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TakeQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TakeWhileQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ThisAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>ThrowStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TryCastExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TryStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TypeOfExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TypeReference</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>TypeReferenceExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UnaryExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UncheckedExpression</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UncheckedStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UnsafeStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UnstructuredErrorErrorStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UnstructuredErrorOnErrorStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UnstructuredErrorResumeNextStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UsingDirective</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UsingDirectiveSection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>UsingStatement</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>VariableDeclarator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>WhereQueryOperator</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>WhileStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>WithStatement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType</signature>
                        <name>YieldStatement</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Condition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_Statement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Condition</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_Statement</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ConditionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsStatic</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Initializer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Initializer</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration()</signature>
                        <name>get_AddAccessor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_EventType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_ImplementedMembers</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration()</signature>
                        <name>get_RaiseEventAccessor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration()</signature>
                        <name>get_RemoveAccessor</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>set_AddAccessor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_EventType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>set_RaiseEventAccessor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>set_RemoveAccessor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AddAccessorContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EventTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ImplementedMemberContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RaiseEventAccessorContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RemoveAccessorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_MemberName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Target</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_MemberName</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>MemberNameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TargetContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextIDBase</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeArgumentContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Alias</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Alias</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>alias</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Directives</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>DirectiveContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConst</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Variables</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Variables</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_SizeExpression</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_SizeExpression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>SizeExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Declarators</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>DeclaratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNode()</signature>
                        <name>get_VariableDeclaration</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>set_VariableDeclaration</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableDeclarationContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Condition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Initializers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Iterators</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Condition</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ConditionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>IteratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_CollectionRangeVariableDeclarations</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CollectionRangeVariableDeclarationContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Identifier</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Identifier</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>IdentifierContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GroupBys</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Groupings</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_TargetExpressions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GroupByExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GroupingExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TargetExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IBlockAstNode</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Condition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_ElseIfSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_FalseStatement</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_TrueStatement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Condition</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_FalseStatement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_TrueStatement</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ConditionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ElseIfSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>FalseStatementContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TrueStatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType()</signature>
                        <name>get_AccessorType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType)</signature>
                        <name>set_AccessorType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType</signature>
                        <name>accessorType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeSectionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_EventType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_EventType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EventTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor()</signature>
                        <name>get_GetAccessor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsIndexer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor()</signature>
                        <name>get_SetAccessor</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)</signature>
                        <name>set_GetAccessor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)</signature>
                        <name>set_SetAccessor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GetAccessorContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>SetAccessorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Arguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsIndexerInvocation</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsIndexerInvocation</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ArgumentContextID</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isIndexerInvocation</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IVariableDeclarationSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Variables</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LeftConditionExpression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_RightConditionExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LeftConditionExpression</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_RightConditionExpression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LeftConditionExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>RightConditionExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator()</signature>
                        <name>get_ChildJoin</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration()</signature>
                        <name>get_CollectionRangeVariableDeclaration</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Conditions</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_TargetExpressions</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator)</signature>
                        <name>set_ChildJoin</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)</signature>
                        <name>set_CollectionRangeVariableDeclaration</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ChildJoinContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CollectionRangeVariableDeclarationContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ConditionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TargetExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Label</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Label</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LabelContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_Statement</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_Statement</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_VariableDeclarators</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableDeclaratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType, string, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType()</signature>
                        <name>get_LiteralType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LiteralValue</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType)</signature>
                        <name>set_LiteralType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LiteralValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>literalType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>literalValue</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>Character</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>DecimalInteger</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>False</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>HexadecimalInteger</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>OctalInteger</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>Real</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>True</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>VerbatimString</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType</signature>
                        <name>Xml</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConst</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Variables</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>set_Modifiers</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType()</signature>
                        <name>get_MemberAccessType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_MemberName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType)</signature>
                        <name>set_MemberAccessType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_MemberName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType</signature>
                        <name>memberAccessType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>MemberNameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType</signature>
                        <name>XmlAttribute</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType</signature>
                        <name>XmlDescendent</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_MemberName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_MemberName</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>MemberNameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_ImplementedMembers</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ImplementedMemberContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Abstract</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>AccessMask</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Assembly</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Const</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Dim</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Extern</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Family</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>FamilyOrAssembly</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Final</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Narrowing</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>New</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Overloads</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Override</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Partial</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Private</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Public</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>ReadOnly</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Static</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Unsafe</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Virtual</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Volatile</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>Widening</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>WithEvents</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>WriteOnly</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Event</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_EventHandler</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType()</signature>
                        <name>get_ModificationType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Event</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_EventHandler</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType)</signature>
                        <name>set_ModificationType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EventContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EventHandlerContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType</signature>
                        <name>modificationType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType</signature>
                        <name>Add</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType</signature>
                        <name>Remove</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_NamespaceMembers</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NavigationOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection()</signature>
                        <name>get_UsingDirectives</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)</signature>
                        <name>set_UsingDirectives</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NamespaceMemberContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>UsingDirectiveSectionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Initializers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Arguments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ArrayRank</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression()</signature>
                        <name>get_Initializer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsImplicitlyTyped</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ObjectType</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ArrayRank</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)</signature>
                        <name>set_Initializer</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ObjectType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ArgumentContextID</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>arrayRank</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isImplicitlyTyped</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ObjectTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsStatic</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType()</signature>
                        <name>get_OperatorType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage)</signature>
                        <name>GetOperatorTypeName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>set_OperatorType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>operatorType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Addition</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>AddressOf</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>BitwiseAnd</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>BitwiseOr</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>ConditionalAnd</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>ConditionalOr</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Division</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Equality</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>ExclusiveOr</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Explicit</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Exponentiation</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>False</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>GreaterThan</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>GreaterThanOrEqual</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Implicit</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Inequality</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>IntegerDivision</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>LeftShift</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>LessThan</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>LessThanOrEqual</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Like</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Mid</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Modulus</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Multiply</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Negation</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>NullCoalescing</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>OnesComplement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>PointerIndirection</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>PostDecrement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>PostIncrement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>PreDecrement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>PreIncrement</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>ReferenceEquality</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>ReferenceInequality</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>RightShift</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>StringConcatenation</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>Subtraction</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>True</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>XmlDescendant</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Orderings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>OrderingContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection()</signature>
                        <name>get_Direction</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection)</signature>
                        <name>set_Direction</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection</signature>
                        <name>direction</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection</signature>
                        <name>Ascending</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection</signature>
                        <name>Descending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.CloneForType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.get_ParameterType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Initializer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsByReference</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOptional</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOutput</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsParameterArray</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ParameterType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Initializer</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ParameterType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>Optional</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>Out</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>ParameterArray</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers</signature>
                        <name>Ref</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration()</signature>
                        <name>get_GetAccessor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_ImplementedMembers</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsIndexer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration()</signature>
                        <name>get_SetAccessor</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>set_GetAccessor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)</signature>
                        <name>set_SetAccessor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GetAccessorContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ImplementedMemberContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ParameterContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>SetAccessorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_QueryOperators</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>QueryOperatorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Arguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_EventName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_EventName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>EventNameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_VariableDeclarators</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>VariableDeclaratorContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextIDBase</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Labels</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Statements</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LabelContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>StatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Sections</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>SectionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_CatchClauses</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_FinallyBlock</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement()</signature>
                        <name>get_TryBlock</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_FinallyBlock</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>set_TryBlock</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CatchClauseContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>FinallyBlockStatementContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TryBlockStatementContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_BaseType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_IsNested</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_ProjectContent</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetInterfaces</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMember</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetSourceKeys</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AssemblyHint</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeParameterConstraints</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterDefaultConstructorConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterNotNullableValueTypeConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterReferenceTypeConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericParameter</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericTypeDefinition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Namespace</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_PointerLevel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_RawFullName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Type</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Resolve</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_BaseTypes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Members</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>GetConstructorAccessModifiers</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags, bool, bool)</signature>
                        <name>GetMembersCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockEndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockStartOffset</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>BaseTypeContextID</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockEndOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockStartOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>firstBaseTypeIsInterface</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>MemberContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeDeclarationContextIDBase</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Documentation</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NavigationOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Documentation</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>documentation</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeMemberDeclarationContextIDBase</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AssemblyHint</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_FullName</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeParameterConstraints</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericTypeDefinition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Namespace</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_RawFullName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Type</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>Clone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Resolve</name>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>set_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasGenericParameterDefaultConstructorConstraint</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasGenericParameterNotNullableValueTypeConstraint</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasGenericParameterReferenceTypeConstraint</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsGenericParameter</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PointerLevel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AnonymousTypeName</name>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>arrayRanks</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>AttributeSectionContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeArgumentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>GenericTypeParameterConstraintContextID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>pointerLevel</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>resolvedType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>typeFlags</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_TypeReference</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_TypeReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>TypeReferenceContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType()</signature>
                        <name>get_OperatorType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>set_OperatorType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType</signature>
                        <name>operatorType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType()</signature>
                        <name>get_ActionType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LabelName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType)</signature>
                        <name>set_ActionType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LabelName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</signature>
                        <name>actionType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LabelNameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</signature>
                        <name>EstablishHandlerLocation</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</signature>
                        <name>EstablishResumeNext</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</signature>
                        <name>ResetException</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType</signature>
                        <name>ResetExceptionHandlerLocation</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_LabelName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_LabelName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LabelNameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Alias</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_NamespaceName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NavigationOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Alias</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_NamespaceName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>alias</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CommentContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NamespaceNameContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_EndOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_IsCollapsible</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ICollapsibleNode.get_StartOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IndicatorVisible</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.get_IsLanguageTransition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_Directives</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>DirectiveContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>get_ResourceAcquisitions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ResourceAcquisitionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier, bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.get_ReturnType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Initializer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConstant</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsImplicitlyTyped</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLocal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory()</signature>
                        <name>get_NodeCategory</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)</signature>
                        <name>GetDisplayText</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Initializer</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsConstant</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsImplicitlyTyped</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsLocal</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>set_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>InitializerContextID</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isConstant</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isImplicitlyTyped</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isLocal</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>NameContextID</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ReturnTypeContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Condition</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Condition</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ConditionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)</signature>
                        <name>AcceptCore</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression()</signature>
                        <name>get_Expression</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType()</signature>
                        <name>get_NodeType</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>set_Expression</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>ExpressionContextID</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.SyntaxLanguage, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType, System.Collections.ArrayList)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags()</signature>
                        <name>get_AdditionalBindingFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit()</signature>
                        <name>get_CompilationUnit</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNode()</signature>
                        <name>get_ContainingNode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DocumentationComment</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_ImportedNamespaces</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange()</signature>
                        <name>get_InitializationTextRange</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLanguageCaseSensitive</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem[]()</signature>
                        <name>get_Items</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.SyntaxLanguage()</signature>
                        <name>get_Language</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember()</signature>
                        <name>get_MemberDeclarationNode</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange()</signature>
                        <name>get_ParameterTextRange</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver()</signature>
                        <name>get_ProjectResolver</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_StartsWithDot</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem()</signature>
                        <name>get_TargetItem</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TargetOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType()</signature>
                        <name>get_TypeDeclarationNode</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags(int32)</signature>
                        <name>GetAdditionalBindingFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>GetStatements</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetVariableDeclaratorReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>GetVariableName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNode(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, System.Collections.ArrayList)</signature>
                        <name>GetVariables</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem[])</signature>
                        <name>InsertItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsStartOfRecursion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, bool&amp;, bool&amp;, string&amp;)</signature>
                        <name>ParseXmlTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>PrefixWithTypeItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ResolveArguments</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ResolveForCode</name>
                    </method>
                    <method>
                        <signature>object(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, int32, bool)</signature>
                        <name>ResolveToArrayOrIndexer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)</signature>
                        <name>set_CompilationUnit</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>set_ContainingNode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DocumentationComment</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>set_ImportedNamespaces</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>set_InitializationTextRange</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember)</signature>
                        <name>set_MemberDeclarationNode</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>set_ParameterTextRange</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>set_ProjectResolver</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_StartsWithDot</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>set_TypeDeclarationNode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToKeyString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit</signature>
                        <name>compilationUnit</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNode</signature>
                        <name>containingNode</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>documentationComment</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>importedNamespaces</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange</signature>
                        <name>initializationTextRange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem[]</signature>
                        <name>items</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.SyntaxLanguage</signature>
                        <name>language</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember</signature>
                        <name>memberDeclarationNode</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange</signature>
                        <name>parameterTextRange</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext</signature>
                        <name>parentContext</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver</signature>
                        <name>projectResolver</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>startsWithDot</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>targetOffset</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>typeDeclarationNode</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType, ActiproSoftware.SyntaxEditor.TextRange, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32[]&amp;, int32)</signature>
                        <name>AppendIndexerParameterCountLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ArgumentsText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_IndexerParameterCounts</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>get_ResolvedArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_ResolvedInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange()</signature>
                        <name>get_TextRange</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression[]()</signature>
                        <name>get_UnresolvedArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ArgumentsText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>set_GenericTypeArguments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>set_IndexerParameterCounts</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>set_ResolvedArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_ResolvedInfo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>set_TextRange</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression[])</signature>
                        <name>set_UnresolvedArguments</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>argumentsText</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>genericTypeArguments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>indexerParameterCounts</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>resolvedArguments</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>resolvedInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange</signature>
                        <name>textRange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression[]</signature>
                        <name>unresolvedArguments</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>ArrayItem</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Base</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Constant</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>DocumentationCommentParentTag</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Member</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Namespace</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>NamespaceAlias</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Number</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Parameter</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>StringLiteral</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>This</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType</signature>
                        <name>Variable</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextLocator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>aa</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, int32)</signature>
                        <name>FindClosestTypeOrMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel()</signature>
                        <name>get_Level</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>OnPreVisiting</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode</signature>
                        <name>contextAstNode</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>searchOffset</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>AnyCode</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>AsType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>BaseAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>BaseMemberAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>DecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>DocumentationCommentTag</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>HexadecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>IsTypeOfType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>NamespaceTypeOrMember</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>NativeType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>NewObjectDeclaration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>StringLiteral</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>ThisAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>ThisMemberAccess</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>TryCastType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>TypeOfType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType</signature>
                        <name>UsingDeclaration</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetExactContextLocator</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a1</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, int32)</signature>
                        <name>FindContainingNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>OnPreVisiting</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode</signature>
                        <name>contextAstNode</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>searchOffset</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(System.AppDomain)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.AppDomain()</signature>
                        <name>get_Domain</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.AppDomain</signature>
                        <name>domain</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler)</signature>
                        <name>add_AppDomainCreated</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_AssemblyFullNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_ProjectContents</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent(string)</signature>
                        <name>GetProjectContent</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent(string)</signature>
                        <name>GetProjectContentWithPartialName</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler)</signature>
                        <name>remove_AppDomainCreated</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler</signature>
                        <name>AppDomainCreated</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>projectContents</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>threadSync</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/AssemblyCodeRepositoryOptions</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/c</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CachePath</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>DependencySearchPaths</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/ProjectContentInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent</signature>
                        <name>ProjectContent</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ReferenceCount</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/ProjectContentLoader</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(object, System.ResolveEventArgs)</signature>
                        <name>AppDomain_AssemblyResolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository/AssemblyCodeRepositoryOptions)</signature>
                        <name>CreateProjectContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly()</signature>
                        <name>get_Assembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyLocation</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>LoadAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>LoadAssemblyCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>set_Assembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AssemblyFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UpconvertAssemblyName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>assembly</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>assemblyFullName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ba</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/IndexEntry[], System.IO.BinaryReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetDocumentation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation(System.DateTime, string)</signature>
                        <name>LoadFromCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/CacheHeader(string)</signature>
                        <name>LoadHeaderFromCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation(string, System.DateTime, int64, string)</signature>
                        <name>SaveToCache</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/IndexEntry[]</signature>
                        <name>indexEntries</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxRecentlyUsedEntries</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryReader</signature>
                        <name>reader</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>recentlyUsedEntries</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/CacheHeader</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ba/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>HashCodeVerification</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>LastWriteDateTime</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>XmlDocumentationLocation</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>XmlDocumentationSize</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/DocumentationEntry</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ba/b</newname>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Value</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation/IndexEntry</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ba/c</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>FilePosition</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HashCode</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ao</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>SetGenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>genericTypeArguments</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a0</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethod</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethodDefinition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags()</signature>
                        <name>get_MemberFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>get_MemberType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>get_Parameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_ReturnType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers, bool)</signature>
                        <name>GetReflectionImageIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags)</signature>
                        <name>HasMemberFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags)</signature>
                        <name>set_MemberFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, bool)</signature>
                        <name>SetMemberFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>SetReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>declaringType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>memberFlags</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</signature>
                        <name>returnType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, System.Reflection.ParameterInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.CloneForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsByReference</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOutput</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags()</signature>
                        <name>get_ParameterFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_ParameterType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags)</signature>
                        <name>HasParameterFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags)</signature>
                        <name>set_ParameterFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags, bool)</signature>
                        <name>SetParameterFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags</signature>
                        <name>parameterFlags</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</signature>
                        <name>parameterType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>get_Parameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[])</signature>
                        <name>SetParameters</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a8</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetSourceKeys</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Resolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_BaseType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsNested</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>get_ProjectContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>GetConstructorAccessModifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>GetInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags, bool)</signature>
                        <name>GetMembersCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>IsMatch</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>SetBaseType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>SetDeclaringType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>SetInterfaceTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember[])</signature>
                        <name>SetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</signature>
                        <name>baseType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</signature>
                        <name>declaringType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>interfaceTypes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember[]</signature>
                        <name>members</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[], System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AssemblyHint</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_RawFullName</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Resolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>get_AssemblyIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericTypeDefinition</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Namespace</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent()</signature>
                        <name>get_ProjectContentInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>get_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags()</signature>
                        <name>get_TypeFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>GetReflectionImageIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags)</signature>
                        <name>HasTypeFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>set_AssemblyIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags)</signature>
                        <name>set_TypeFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>SetGenericTypeArguments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>SetModifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetNamespace</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags, bool)</signature>
                        <name>SetTypeFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>assemblyIndex</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>genericTypeArguments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers</signature>
                        <name>modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>namespace</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent</signature>
                        <name>projectContent</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>typeFlags</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ac</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Type, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyHint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericType</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericTypeDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Namespace</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RawFullName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>get_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TypeTableIndex</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Resolve</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>rawFullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>typeTableIndex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[], System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference()</signature>
                        <name>Clone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo()</signature>
                        <name>get_ArrayPointerInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DeclaringTypeFullName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo)</signature>
                        <name>set_ArrayPointerInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DeclaringTypeFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])</signature>
                        <name>SetGenericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo</signature>
                        <name>arrayPointerInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>declaringTypeFullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]</signature>
                        <name>genericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string, string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyFullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyLocation</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CachedDocumentationFilename</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CachedReflectionFilename</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation()</signature>
                        <name>get_Documentation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_NamespaceNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo, string, bool)</signature>
                        <name>GetChildNamespaceInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(string)</signature>
                        <name>GetChildNamespaceNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetExtensionMethods</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo(string)</signature>
                        <name>GetNamespaceInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetNestedTypes</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetReferencedAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>GetReferencedAssemblyIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetStandardModules</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/TypeInfo(string)</signature>
                        <name>GetTypeInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[], System.Type)</signature>
                        <name>GetTypeReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(System.Type)</signature>
                        <name>GetTypeReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Reflection.Assembly)</signature>
                        <name>GetXmlDocumentationPath</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasNamespace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>IsMatch</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.DateTime, string)</signature>
                        <name>LoadFromCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/CacheHeader(string)</signature>
                        <name>LoadHeaderFromCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo, string)</signature>
                        <name>LoadNamespaceNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember(System.IO.BinaryReader, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType)</signature>
                        <name>ReadMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo(System.IO.BinaryReader)</signature>
                        <name>ReadNamespaceInfoNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter(System.IO.BinaryReader)</signature>
                        <name>ReadParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType(System.IO.BinaryReader)</signature>
                        <name>ReadType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryReader, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase)</signature>
                        <name>ReadTypeBase</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/TypeInfo(System.IO.BinaryReader)</signature>
                        <name>ReadTypeInfoNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(System.IO.BinaryReader)</signature>
                        <name>ReadTypeReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder)</signature>
                        <name>ResolveAssemblyDomTypePlaceHolder</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/TypeInfo)</signature>
                        <name>ResolveTypePlaceHolders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime, string)</signature>
                        <name>SaveToCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateNamespaceNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember)</signature>
                        <name>WriteMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo)</signature>
                        <name>WriteNamespaceInfoNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter)</signature>
                        <name>WriteParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType)</signature>
                        <name>WriteType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase)</signature>
                        <name>WriteTypeBase</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/TypeInfo)</signature>
                        <name>WriteTypeInfoNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>WriteTypeReference</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>assemblyFullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>assemblyLocation</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>assemblySize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation</signature>
                        <name>documentation</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HashCodeVerification</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>namespaceNames</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>realAssemblyFullName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>referencedAssemblies</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo</signature>
                        <name>rootNamespaceInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>types</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType[]</signature>
                        <name>typeTable</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/CacheHeader</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>e/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AssemblyFullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AssemblyLocation</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>AssemblySize</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HashCodeVerification</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>LastWriteDateTime</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RealAssemblyFullName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/NamespaceInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>e/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>ChildNamespaces</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NamespaceName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>StandardModules</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>Types</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent/TypeInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>e/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>NestedTypes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType</signature>
                        <name>Type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ax</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, System.Collections.ICollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>ConstructTypeReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember()</signature>
                        <name>get_GenericDefinitionMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethod</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethodDefinition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>get_MemberType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>get_Parameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_ReturnType</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember</signature>
                        <name>genericDefinitionMember</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ICollection</signature>
                        <name>genericTypeArguments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</signature>
                        <name>returnType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, System.Collections.ICollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyHint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_BaseType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType()</signature>
                        <name>get_GenericDefinitionType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericTypeDefinition</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsNested</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Namespace</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>get_ProjectContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RawFullName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>get_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>GetConstructorAccessModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>GetInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSourceKeys</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Resolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>genericDefinitionType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ICollection</signature>
                        <name>genericTypeArguments</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.Design.DotNetSyntaxLanguageDesigner</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a2</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage()</signature>
                        <name>get_SyntaxLanguage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeVerbs</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>verb_About</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>be</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32[], int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32[])</signature>
                        <name>set_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32[]</signature>
                        <name>arrayRanks</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pointerLevel</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>AllAccessTypes</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Assembly</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>ContextIsDeclaringType</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>ContextIsTargetFamily</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>DeclaringTypeOnly</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>ExcludeIndexers</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Family</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>HasConstructor</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>IgnoreCase</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Instance</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>ObjectReference</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>OnlyConstructors</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>OnlyIndexers</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Private</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Public</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags</signature>
                        <name>Static</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, System.Collections.ICollection, System.Collections.ICollection, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>AppendParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>EscapeTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, string)</signature>
                        <name>EscapeXmlComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Documentation</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_ExceptionTypeNames</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember)</signature>
                        <name>GetMemberDocumentationKey</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, string)</signature>
                        <name>GetParameter</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>GetSummary</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetTypeReferenceDocumentationKey</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>documentation</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>u</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Constant</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Constructor</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Custom</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Event</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Field</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>GenericMethod</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>GenericMethodDefinition</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>IsEditorBrowsableNever</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>IsExtension</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>MemberTypesMask</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Method</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags</signature>
                        <name>Property</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Constant</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Constructor</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Custom</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Event</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Field</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Method</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>v</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags</signature>
                        <name>Out</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags</signature>
                        <name>Ref</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ah</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, int32[], int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_BaseType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_IsEditorBrowsableNever</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_IsExtension</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_IsNested</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_Modifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.get_ProjectContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetConstructorAccessModifiers</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetSourceKeys</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AccessModifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_AssemblyHint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_FullName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_GenericTypeParameterConstraints</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterDefaultConstructorConstraint</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterNotNullableValueTypeConstraint</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_HasGenericParameterReferenceTypeConstraint</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_ImageIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericType</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_IsGenericTypeDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Name</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Namespace</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_PointerLevel</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_RawFullName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.get_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Resolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType()</signature>
                        <name>get_CoreType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32[]</signature>
                        <name>arrayRanks</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pointerLevel</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>au</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetGenericParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetTypeInheritanceHierarchyAndImplementedInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>IsTypeInstanceOf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>IsTypeParameterInstanceOf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>ResolveType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>cachedTargetTypes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>cachedTypeHierarchies</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>cachedTypeResolutions</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>Match</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>NoMatch</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>aw</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>Delegate</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>Enumeration</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericParameter</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericParameterDefaultConstructorConstraint</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericParameterNotNullableValueTypeConstraint</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericParameterReferenceTypeConstraint</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericType</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>GenericTypeDefinition</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>HasAssemblyConstructor</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>HasFamilyConstructor</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>HasPrivateConstructor</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>HasPublicConstructor</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>Interface</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>IsEditorBrowsableNever</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>IsExtension</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>Nested</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>StandardModule</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags</signature>
                        <name>Structure</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>Class</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>Delegate</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>Enumeration</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>Interface</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>StandardModule</name>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType</signature>
                        <name>Structure</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddAllAssembliesInAppDomainAsExternalReferences</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>AddExternalReference</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>AddExternalReference</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string)</signature>
                        <name>AddExternalReference</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddExternalReferenceForMSCorLib</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>AddExternalReferenceForSystemAssembly</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, string)</signature>
                        <name>AddMemberListItemsForChildNamespaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable)</signature>
                        <name>AddMemberListItemsForCodeSnippets</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.CodeSnippetFolder)</signature>
                        <name>AddMemberListItemsForCodeSnippets</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>AddMemberListItemsForDeclaringTypeMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, bool)</signature>
                        <name>AddMemberListItemsForDocumentationComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>AddMemberListItemsForExtensionMethods</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>AddMemberListItemsForMembers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)</signature>
                        <name>AddMemberListItemsForNativeTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>AddMemberListItemsForNestedTypes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags, bool)</signature>
                        <name>AddMemberListItemsForTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)</signature>
                        <name>AddMemberListItemsForVariables</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Hashtable(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, string)</signature>
                        <name>CollectGenericParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, string, System.Collections.Stack)</signature>
                        <name>CollectGenericParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ConstructAndResolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, int32)</signature>
                        <name>ConstructAndResolveContextItemMemberReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>ConstructAndResolveFromSelf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, System.Collections.Hashtable, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ConstructAndResolveFromTable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ConstructAndResolveMemberReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)</signature>
                        <name>ConstructGenericMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ConstructGenericType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CachePath</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection()</signature>
                        <name>get_CodeSnippetFolders</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_ExternalReferences</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent()</signature>
                        <name>get_SourceProjectContent</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetAssemblyFromAppDomain</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(string)</signature>
                        <name>GetChildNamespaceNames</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, System.Collections.Stack, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetConstructedGenericParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.StringCollection()</signature>
                        <name>GetDependencySearchPaths</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetExtensionMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetExtensionMethods</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetGenericSpecification</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags, int32)</signature>
                        <name>GetIndexers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetMarkupForComment</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetMarkupForKeyword</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetMarkupForOverloadCount</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, bool, bool)</signature>
                        <name>GetMarkupForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string, bool, bool)</signature>
                        <name>GetMarkupForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string, bool, bool, System.Collections.ICollection)</signature>
                        <name>GetMarkupForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMember</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMemberOverloads</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetMembers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMembers</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetNamespaceName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(string)</signature>
                        <name>GetNativeType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetNestedTypes</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, string)</signature>
                        <name>GetParentType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)</signature>
                        <name>GetQuickInfo</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.CodeSnippet)</signature>
                        <name>GetQuickInfoForCodeSnippet</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string, bool)</signature>
                        <name>GetQuickInfoForDecimalIntegerLiteral</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string)</signature>
                        <name>GetQuickInfoForKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, string, bool)</signature>
                        <name>GetQuickInfoForLocalVariable</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember, int32, bool)</signature>
                        <name>GetQuickInfoForMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string, bool)</signature>
                        <name>GetQuickInfoForNamespace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference, string, bool)</signature>
                        <name>GetQuickInfoForParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, bool)</signature>
                        <name>GetQuickInfoForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetStandardModules</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(string, string)</signature>
                        <name>GetType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetTypeFullNameForDisplay</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string)</signature>
                        <name>GetTypeFullNameFromShortcut</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetTypeInheritanceHierarchy</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string)</signature>
                        <name>GetTypeInheritanceHierarchy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>GetTypeInheritanceHierarchyAndImplementedInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetTypeName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetTypeNameForDebugging</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string, int32, int32[], int32)</signature>
                        <name>GetTypeNameWithArrayPointerSpec</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetTypeNameWithoutArrayPointerSpec</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>GetTypeReferenceRawFullName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetTypes</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, string)</signature>
                        <name>GetTypeShortcutName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasNamespace</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PruneCache</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveExternalReference</name>
                    </method>
                    <method>
                        <signature>object(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], int32, int32)</signature>
                        <name>ResolveTypeParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CachePath</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection)</signature>
                        <name>set_CodeSnippetFolders</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>cachePath</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection</signature>
                        <name>codeSnippetFolders</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>externalReferences</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent</signature>
                        <name>sourceProjectContent</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>systemPath</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)</signature>
                        <name>ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor.Process</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler)</signature>
                        <name>add_SyntaxEditorIntelliPromptMemberListPreFilter</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable)</signature>
                        <name>AddKeywordMemberListItems</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>CodeBlockSelectionExpand</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, int32)</signature>
                        <name>CompleteDocumentationCommentTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CodeBlockSelectionSupported</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CodeSnippetsEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DocumentationCommentAutoCompleteEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptCodeSnippetsSupported</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptMemberListEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptMemberListSupported</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptParameterInfoEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptParameterInfoSupported</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptQuickInfoEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IntelliPromptQuickInfoSupported</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage()</signature>
                        <name>get_LanguageType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SmartIndentSupported</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SourceProjectContentUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor, int32, bool, bool)</signature>
                        <name>GetContext</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.SyntaxEditor, int32&amp;)</signature>
                        <name>GetQuickInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>GetQuickInfoForMemberListItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, int32, int32, int32)</signature>
                        <name>InsertDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)</signature>
                        <name>OnDocumentAutomaticOutliningComplete</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, System.EventArgs)</signature>
                        <name>OnDocumentFilenameChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, System.EventArgs)</signature>
                        <name>OnDocumentFilenameChanging</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, System.EventArgs)</signature>
                        <name>OnDocumentSemanticParseDataChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptMemberListPreFilter</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)</signature>
                        <name>OnSyntaxEditorKeyTyped</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.KeyTypingEventArgs)</signature>
                        <name>OnSyntaxEditorKeyTyping</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>PerformAutomaticOutlining</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.TextRange, ActiproSoftware.SyntaxEditor.SemanticParseFlags)</signature>
                        <name>PerformSemanticParse</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler)</signature>
                        <name>remove_SyntaxEditorIntelliPromptMemberListPreFilter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetAutomaticOutliningBehavior</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetErrorDisplayEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CodeSnippetsEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DocumentationCommentAutoCompleteEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IntelliPromptMemberListEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IntelliPromptParameterInfoEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IntelliPromptQuickInfoEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SourceProjectContentUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ShouldSerializeAutomaticOutliningBehavior</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ShouldSerializeErrorDisplayEnabled</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShowAboutForm</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor, string, ActiproSoftware.SyntaxEditor.CodeSnippetTypes)</signature>
                        <name>ShowIntelliPromptInsertSnippetPopup</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.SyntaxEditor, bool)</signature>
                        <name>ShowIntelliPromptMemberList</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.SyntaxEditor, int32, bool)</signature>
                        <name>ShowIntelliPromptParameterInfoCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage, ActiproSoftware.SyntaxEditor.SyntaxEditor, bool)</signature>
                        <name>UpdateParameterInfoSelectedText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, bool)</signature>
                        <name>UpdateSourceProjectContent</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>codeSnippetsEnabled</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>documentationCommentAutoCompleteEnabled</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>intelliPromptMemberListEnabled</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>intelliPromptParameterInfoEnabled</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>intelliPromptQuickInfoEnabled</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>sourceProjectContentUpdateEnabled</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventHandler</signature>
                        <name>SyntaxEditorIntelliPromptMemberListPreFilter</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage/ParameterInfoContext</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage/a</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext()</signature>
                        <name>get_Context</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>get_Members</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType()</signature>
                        <name>get_Type</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext</signature>
                        <name>context</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]</signature>
                        <name>members</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Windows.Forms.ListView)</signature>
                        <name>AddStatisticsToListView</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CodeLines</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>get_CommentLineCoveragePercentage</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CommentLines</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PureCommentLines</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a7</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)</signature>
                        <name>CreateContext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>CreateContextItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>Resolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>ResolveAnonymousType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)</signature>
                        <name>ResolveLambdaExpressionParameter</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericMethodDefinition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStatic</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType()</signature>
                        <name>get_MemberType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[]()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_ReturnType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)</signature>
                        <name>CloneForType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsByReference</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOutput</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_ParameterType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_BaseType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsNested</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>get_ProjectContent</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>GetConstructorAccessModifiers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>GetInterfaces</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMember</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>GetMembers</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMembers</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSourceKeys</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyHint</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericTypeDefinition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Namespace</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RawFullName</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Resolve</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyFullName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyLocation</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_NamespaceNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(string)</signature>
                        <name>GetChildNamespaceNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetExtensionMethods</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetNestedTypes</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetStandardModules</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetTypes</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasNamespace</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ad</newname>
                <methodlist>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType, string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Contains</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_AccessModifiers</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ArrayRanks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyHint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_BaseType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference()</signature>
                        <name>get_DeclaringType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider()</signature>
                        <name>get_DocumentationProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeArguments</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_GenericTypeParameterConstraints</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterDefaultConstructorConstraint</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterNotNullableValueTypeConstraint</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGenericParameterReferenceTypeConstraint</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageIndex</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEditorBrowsableNever</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtension</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericParameter</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGenericTypeDefinition</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsNested</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(string)</signature>
                        <name>get_Item</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>get_Modifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Namespace</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_PartialTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PointerLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PrimarySourceKey</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType()</signature>
                        <name>get_PrimaryType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent()</signature>
                        <name>get_ProjectContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RawFullName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType()</signature>
                        <name>get_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers()</signature>
                        <name>GetConstructorAccessModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[]()</signature>
                        <name>GetInterfaces</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[]()</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[](ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetMembers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSourceKeys</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>Resolve</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>primaryKey</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>typeData</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget.get_Guid</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)</signature>
                        <name>ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget.NotifySemanticParseComplete</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParseEventHandler)</signature>
                        <name>add_SemanticParseComplete</name>
                    </method>
                    <method>
                        <signature>void(string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>AddCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.ICollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo, string)</signature>
                        <name>ClearCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyFullName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyLocation</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_NamespaceNames</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo, string, bool)</signature>
                        <name>GetChildNamespaceInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(string)</signature>
                        <name>GetChildNamespaceNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>GetCompilationUnits</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string[], ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetExtensionMethods</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo(string)</signature>
                        <name>GetNamespaceInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetNestedTypes</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>GetSourceKeys</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetStandardModules</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/TypeInfo(string)</signature>
                        <name>GetTypeInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[], string, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)</signature>
                        <name>GetTypes</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection(string, bool)</signature>
                        <name>GetTypesForSourceKey</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo, string, bool)</signature>
                        <name>GetTypesForSourceKeyCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasNamespace</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor, string, string)</signature>
                        <name>LoadForCode</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor, string)</signature>
                        <name>LoadForFile</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo, string)</signature>
                        <name>LoadNamespaceNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParseEventArgs)</signature>
                        <name>OnSemanticParseComplete</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParseEventHandler)</signature>
                        <name>remove_SemanticParseComplete</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AssemblyFullName</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateNamespaceNames</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>assemblyFullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>compilationUnits</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Guid</signature>
                        <name>guid</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>namespaceNames</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo</signature>
                        <name>rootNamespaceInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.SemanticParseEventHandler</signature>
                        <name>SemanticParseComplete</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>syncRoot</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/NamespaceInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>ChildNamespaces</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NamespaceName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>StandardModules</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>Types</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/TypeInfo</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.HybridDictionary</signature>
                        <name>NestedTypes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SourceKey</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType</signature>
                        <name>Type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_SelectedMemberChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_SelectedTypeChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, int32)</signature>
                        <name>BindToCompilationUnit</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>BindToType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(System.Windows.Forms.DrawItemEventArgs, System.Windows.Forms.ComboBox)</signature>
                        <name>DrawItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_IdealWidthForMembers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_IdealWidthForTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode()</signature>
                        <name>get_SelectedMember</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode()</signature>
                        <name>get_SelectedType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.SyntaxEditor()</signature>
                        <name>get_SyntaxEditor</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DrawItemEventArgs)</signature>
                        <name>memberDropDownList_DrawItem</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>memberDropDownList_SelectedIndexChanged</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>memberDropDownList_SelectionChangeCommitted</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(System.Windows.Forms.LayoutEventArgs)</signature>
                        <name>OnLayout</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnResize</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnSelectedMemberChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnSelectedTypeChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_SelectedMemberChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_SelectedTypeChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>set_SyntaxEditor</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>syntaxEditor_DocumentChanged</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>syntaxEditor_DocumentSemanticParseDataChanged</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)</signature>
                        <name>syntaxEditor_DocumentSyntaxLanguageLoaded</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, ActiproSoftware.SyntaxEditor.SelectionEventArgs)</signature>
                        <name>syntaxEditor_SelectionChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DrawItemEventArgs)</signature>
                        <name>typeDropDownList_DrawItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>typeDropDownList_SelectedIndexChanged</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>typeDropDownList_SelectionChangeCommitted</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>UpdateMemberSelection</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, int32)</signature>
                        <name>UpdateSelection</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>contextOffset</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ignoreMemberChange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ignoreTypeChange</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ImageList</signature>
                        <name>imageList</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ComboBox</signature>
                        <name>memberDropDownList</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>oldContextOffset</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>SelectedMemberChanged</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>SelectedTypeChanged</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Space</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.SyntaxEditor</signature>
                        <name>syntaxEditor</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ComboBox</signature>
                        <name>typeDropDownList</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList/AstNodeItem</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList/a</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode()</signature>
                        <name>get_Node</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.IComparable.CompareTo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode</signature>
                        <name>node</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBContext</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.SyntaxLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext, ActiproSoftware.SyntaxEditor.SyntaxLanguage, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType, System.Collections.ArrayList)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLanguageCaseSensitive</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.VB.VBContext(ActiproSoftware.SyntaxEditor.Document, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>GetContextAtOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.VB.VBContext(ActiproSoftware.SyntaxEditor.Document, int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, bool)</signature>
                        <name>GetContextBeforeOffset</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.VB.VBContext(ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetContextForCode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.VB.VBContext(ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetContextForDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[](ActiproSoftware.SyntaxEditor.TextStream, int32)</signature>
                        <name>GetGenericTypeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver, string)</signature>
                        <name>GetMemberInStandardModule</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)</signature>
                        <name>ResolveArguments</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)</signature>
                        <name>ResolveForCode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>bg</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, int32, string)</signature>
                        <name>AutoIndent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.Document, int32)</signature>
                        <name>GetIndentationForOffset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsBlockEnd</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsBlockStart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.TextStream, int32, int32&amp;, bool&amp;, bool&amp;)</signature>
                        <name>ParseLine</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>a5</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ConsumeXmlCommentOrCData</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ConsumeXmlEmbeddedExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ConsumeXmlProcessingInstruction</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ConsumeXmlTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.ITokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>GetLexicalStateDefaultTokenLexicalParseData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalState, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>GetNextTokenLexicalParseData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsDocumentationCommentStateScopeEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsDocumentationCommentStateScopeStart</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.ITextBufferReader, string, bool)</signature>
                        <name>IsNextText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsPreProcessorDirectiveStateScopeEnd</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.MatchType(ActiproSoftware.SyntaxEditor.ITextBufferReader, ActiproSoftware.SyntaxEditor.ILexicalScope, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData&amp;)</signature>
                        <name>IsPreProcessorDirectiveStateScopeStart</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.ITextBufferReader, bool)</signature>
                        <name>IsXmlLiteral</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseDateLiteral</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader, char, bool, bool&amp;)</signature>
                        <name>ParseIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader, char, bool, bool)</signature>
                        <name>ParseNumber</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseSingleLineComment</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseStringLiteral</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseXmlAttribute</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32(ActiproSoftware.SyntaxEditor.ITextBufferReader)</signature>
                        <name>ParseXmlLiteral</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>keywords</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetLexicalStateKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirective</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage, ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseDocumentationComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_DocumentationCommentTextRanges</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>get_RegionTextRanges</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken()</signature>
                        <name>GetNextTokenCore</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment[](ActiproSoftware.SyntaxEditor.TextRange)</signature>
                        <name>ReapComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReapDocumentationComments</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>comments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.TextRange</signature>
                        <name>currentDocumentationCommentTextRange</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>documentationComment</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>documentationCommentTextRanges</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Stack</signature>
                        <name>regionStack</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>regionTextRanges</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AdvancePastTerminators</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken()</signature>
                        <name>AdvanceToNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>AdvanceToNextEnd</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AdvanceToNextStatementTerminator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>AdvanceToNextStatementTerminator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>AreNextTwo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>AreNextTwoIdentifierAnd</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>BlockAddChild</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BlockEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>BlockStart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit()</signature>
                        <name>get_CompilationUnit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool[0...,0...]()</signature>
                        <name>get_MultiMatchSets</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression, bool)</signature>
                        <name>GetImplicitType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>GetReturnType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsArrayCreationExpression</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsArrayTypeModifier</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsBlockTerminator</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsConditionalExpression</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsContextualKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>IsDotIdentifierOrKeyword</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsEndStatement</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsIdentifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>IsKeyword</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsLookAheadTokenSequential</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsVariableDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, bool)</signature>
                        <name>MarkGenericParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchAdditiveExpression</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchAggregateQueryOperator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchAliasClause</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchArgumentList</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchArrayElementInitializer</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(int32[]&amp;)</signature>
                        <name>MatchArraySizeInitializationModifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32[]&amp;)</signature>
                        <name>MatchArrayTypeModifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>MatchAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>MatchAttributeArgument</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)</signature>
                        <name>MatchAttributeArguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>MatchAttributeList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>MatchAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchAttributesStatement</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchBlock</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchBuiltInTypeName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)</signature>
                        <name>MatchCaseClause</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchCastTarget</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchCharsetModifier</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchClassDeclaration</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration&amp;)</signature>
                        <name>MatchCollectionRangeVariableDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchComparisonExpression</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchCompilationUnit</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchConcatenationOperatorExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchConjunctionExpression</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)</signature>
                        <name>MatchConstantDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)</signature>
                        <name>MatchConstraint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchDelegateDeclaration</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchDistinctQueryOperator</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchEnumDeclaration</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchEnumMemberDeclaration</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchEventHandlesList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier&amp;)</signature>
                        <name>MatchEventMemberSpecifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchExclusiveDisjunctionExpression</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchExponentOperatorExpression</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchExpression</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator&amp;)</signature>
                        <name>MatchExpressionRangeVariableDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchFieldInitializer</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchFromQueryOperator</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;, ActiproSoftware.SyntaxEditor.AstNodeList&amp;, ActiproSoftware.SyntaxEditor.AstNodeList&amp;, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchFunctionSignature</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchGroupByQueryOperator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchGroupJoinQueryOperator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchIdentifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchIdentifierOrKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchImplements</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchImplementsClause</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchImportsAliasClause</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchImportsClause</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchImportsNamespaceClause</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchImportsStatement</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchInclusiveDisjunctionExpression</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchIntegerDivisionOperatorExpression</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchIntegralTypeName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchInterfaceDeclaration</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration, int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchInterfaceMemberDeclaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier&amp;)</signature>
                        <name>MatchInterfaceMemberSpecifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchInvocationExpression</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition&amp;)</signature>
                        <name>MatchJoinCondition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchJoinQueryOperator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchLabelName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchLambdaExpression</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchLetQueryOperator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchLibraryClause</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers&amp;)</signature>
                        <name>MatchModifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers&amp;)</signature>
                        <name>MatchModifiers</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchModuleDeclaration</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchModuloOperatorExpression</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchMultiplicativeExpression</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchNamespaceDeclaration</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchNamespaceMemberDeclaration</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchNegationExpression</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;, bool)</signature>
                        <name>MatchNewExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;, bool)</signature>
                        <name>MatchNonArrayTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchNonModuleDeclaration</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchNonQueryIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchOperand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchOptionsStatement</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchOrderByQueryOperator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering&amp;)</signature>
                        <name>MatchOrderExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration&amp;)</signature>
                        <name>MatchParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchParameterList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.AstNodeList&amp;, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchParametersOrType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchPartitionQueryOperator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(bool, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchPrimaryExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;)</signature>
                        <name>MatchQualifiedIdentifier</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchQueryExpression</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchQueryOperator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause&amp;)</signature>
                        <name>MatchRedimClause</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchSelectQueryOperator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchShiftOperatorExpression</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchSimpleIdentifier</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchStatement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement&amp;)</signature>
                        <name>MatchStatements</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MatchStatementTerminator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchStructureDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration, int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchStructureMemberDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;, ActiproSoftware.SyntaxEditor.AstNodeList&amp;, ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchSubSignature</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchTypeArgumentList</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(int32, ActiproSoftware.SyntaxEditor.AstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>MatchTypeDeclaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchTypeImplementsClause</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;, bool)</signature>
                        <name>MatchTypeName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference&amp;)</signature>
                        <name>MatchTypeParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.AstNodeList&amp;)</signature>
                        <name>MatchTypeParameterList</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchUnaryExpression</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IVariableDeclarationSection)</signature>
                        <name>MatchVariableDeclarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier&amp;, int32[]&amp;)</signature>
                        <name>MatchVariableIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchVariableInitializer</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode&amp;)</signature>
                        <name>MatchWhereQueryOperator</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression&amp;)</signature>
                        <name>MatchXmlDescendantExpression</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Parse</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IAstNodeList()</signature>
                        <name>ParseArgumentList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNodeList, bool)</signature>
                        <name>ReapComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReapDocumentationComments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.TextRange, string)</signature>
                        <name>ReportSyntaxError</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Stack</signature>
                        <name>blockStack</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit</signature>
                        <name>compilationUnit</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>identifierStringBuilder</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool[0...,0...]</signature>
                        <name>multiMatchSets</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>n</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>nestingLevel</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Y</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser/BlockData</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>h/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode</signature>
                        <name>Node</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TokenID</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.IContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Hashtable)</signature>
                        <name>AddKeywordMemberListItems</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>CreateDocumentEndToken</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32, ActiproSoftware.SyntaxEditor.ILexicalState)</signature>
                        <name>CreateInvalidToken</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32, ActiproSoftware.SyntaxEditor.LexicalParseFlags, ActiproSoftware.SyntaxEditor.IToken, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)</signature>
                        <name>CreateToken</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage()</signature>
                        <name>get_LanguageType</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IMergableLexicalParser()</signature>
                        <name>get_MergableLexicalParser</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.TextStatistics()</signature>
                        <name>get_TextStatistics</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor, int32, bool, bool)</signature>
                        <name>GetContext</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.HighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)</signature>
                        <name>GetHighlightingStyle</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetTokenString</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>IntelliPromptCompleteWord</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptMemberListItemDescriptionRequested</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptParameterInfoParameterIndexChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, System.EventArgs)</signature>
                        <name>OnSyntaxEditorIntelliPromptParameterInfoSelectedIndexChanged</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)</signature>
                        <name>OnSyntaxEditorKeyTyped</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)</signature>
                        <name>OnSyntaxEditorSmartIndent</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SyntaxEditor, ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)</signature>
                        <name>OnSyntaxEditorViewMouseHover</name>
                    </method>
                    <method>
                        <signature>object(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)</signature>
                        <name>PerformSemanticParse</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetLineCommentDelimiter</name>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.OutliningNode)</signature>
                        <name>SetOutliningNodeCollapsedText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ShouldSerializeLineCommentDelimiter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShowAboutForm</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptMemberList</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptParameterInfo</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.SyntaxEditor)</signature>
                        <name>ShowIntelliPromptQuickInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser</signature>
                        <name>lexicalParser</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.Products.ActiproLicense</signature>
                        <name>license</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CalculateStatistics</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CommentLines</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PureCommentLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>commentLines</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pureCommentLines</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBToken</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32, ActiproSoftware.SyntaxEditor.LexicalParseFlags, ActiproSoftware.SyntaxEditor.IToken, ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.IToken(int32, int32)</signature>
                        <name>Clone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AutoCaseCorrectText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsComment</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDocumentEnd</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInvalid</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPairedEnd</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPairedStart</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWhitespace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MatchingTokenID</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsKeyword</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsModifier</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsNativeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetTokenKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>AddHandler</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Addition</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>AdditionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>AddressOf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Aggregate</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Alias</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>And</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>AndAlso</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>As</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Ascending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Boolean</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>By</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ByRef</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Byte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ByVal</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Call</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Case</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Catch</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CBool</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CByte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CChar</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CDate</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CDbl</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CDec</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Char</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CharacterLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CInt</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Class</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CLng</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseCurlyBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseParenthesis</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CloseSquareBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CObj</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Colon</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ColonEquals</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Comma</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Const</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ConstPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ContextualKeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ContextualKeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Continue</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CSByte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CShort</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CSng</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CStr</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CType</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CUInt</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CULng</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CUShort</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Custom</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DateLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Decimal</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Declare</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Delegate</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Descending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Dim</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DirectCast</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Distinct</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Do</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentDelimiter</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentTag</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentationCommentText</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DocumentEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Dot</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DotAt</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Double</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Each</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Else</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ElseIf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ElseIfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ElsePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>End</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndExternalSourcePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndIf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndIfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndRegionPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Enum</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Equality</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Equals</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Erase</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Event</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExclamationPoint</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Exit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Exponentiation</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExponentiationAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExternalChecksumPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ExternalSourcePreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>False</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Finally</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FloatingPointDivision</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FloatingPointDivisionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FloatingPointLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>For</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Friend</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>From</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Function</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GetTypeKeyword</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GetXmlNamespace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Global</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GoSub</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GoTo</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GreaterThan</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GreaterThanOrEqual</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Group</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Handles</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HexadecimalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Identifier</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>If</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IfPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IIf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Implements</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Imports</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>In</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Inequality</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Inherits</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Integer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IntegerDivision</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IntegerDivisionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Interface</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Into</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Invalid</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Is</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IsFalse</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IsNot</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IsTrue</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Join</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>KeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>KeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LanguageTransitionEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LanguageTransitionStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LeftShift</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LeftShiftAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LessThan</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LessThanOrEqual</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Let</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lib</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Like</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LineContinuation</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LineTerminator</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Long</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Loop</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxTokenID</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Me</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Mid</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Mod</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Module</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Multiplication</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MultiplicationAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MustInherit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MustOverride</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MyBase</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MyClass</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Namespace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Narrowing</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>New</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Next</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Not</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Nothing</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NotInheritable</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NotOverridable</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OctalIntegerLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Of</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>On</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenCurlyBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenParenthesis</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OpenSquareBrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Operator</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OperatorOrPunctuatorEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OperatorOrPunctuatorStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Option</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Optional</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Or</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Order</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OrElse</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Overloads</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Overridable</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Overrides</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ParamArray</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Partial</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveKeywordEnd</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveKeywordStart</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PreProcessorDirectiveText</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Private</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Protected</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Public</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>QuestionMark</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RaiseEvent</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ReadOnly</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ReDim</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RegionPreProcessorDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>REM</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RemComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RemoveHandler</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Resume</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Return</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RightShift</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RightShiftAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SByte</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Select</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Shadows</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Shared</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Short</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Single</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SingleLineComment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Skip</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Static</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Step</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Stop</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StringConcatenation</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StringConcatenationAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StringLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Structure</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Sub</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Subtraction</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SubtractionAssignment</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SyncLock</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Take</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Then</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Throw</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>To</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TripleDot</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>True</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Try</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TryCast</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TypeOf</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UInteger</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ULong</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Until</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UShort</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Using</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Variant</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Wend</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>When</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Where</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>While</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Whitespace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Widening</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>With</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WithEvents</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WriteOnly</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>XmlAttribute</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>XmlLiteral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Xor</name>
                    </field>
                </fieldlist>
            </type>
        </module>
        <module>
            <name>ArchAngel.Providers.CodeProvider.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{E19FDB9B-2377-44AA-B6E5-84BB49DC5E46}</name>
                <newname>a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x6000205-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.BodySection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>ChildSections</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndLine</name>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>FormattedCode</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StartLine</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.AttributeSection</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>AddAttribute</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;()</signature>
                        <name>get_SingleAttributes</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.AttributeSection)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.AttributeSection, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;</signature>
                        <name>singleAttributes</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Target</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.BaseConstructConstants</name>
                <methodlist>
                    <method>
                        <signature>string[](string)</signature>
                        <name>SplitFullyQualifiedIdentifier</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char</signature>
                        <name>FullyQualifiedIdentifierSeparator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.BaseConstructType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>ClassDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>ConstructorDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>DelegateDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>DestructorDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>EnumerationDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>EnumerationMemberDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>EventDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>FieldDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>InterfaceDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>InterfaceEventDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>InterfaceMethodDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>InterfacePropertyDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>MethodDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>NamespaceDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>OperatorDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>PropertyDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>StructureDeclaration</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.BaseConstructType</signature>
                        <name>UsingDirective</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>ChangeApplied</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ChangeStartIndex</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;</signature>
                        <name>ConstructsChanged</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NumCharactersInserted</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.Actions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CodeInsertions.CodeInsertionAction)</signature>
                        <name>AddAction</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.ICodeRoot, ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult)</signature>
                        <name>FixTextRanges</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ArchAngel.Providers.CodeProvider.CSharpParser)</signature>
                        <name>RunActions</name>
                    </method>
                    <method>
                        <signature>string(string, ArchAngel.Providers.CodeProvider.ICodeRoot, bool)</signature>
                        <name>RunActions</name>
                    </method>
                    <method>
                        <signature>string(System.Text.StringBuilder, ArchAngel.Providers.CodeProvider.ICodeRoot)</signature>
                        <name>RunActions</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.CodeInsertions.CodeInsertionAction&gt;</signature>
                        <name>ActionsToPerform</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddAccessorToPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor()</signature>
                        <name>get_NewAccessor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>set_NewAccessor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>&lt;NewAccessor&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddAttributeToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class, ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute()</signature>
                        <name>get_AttributeToAdd</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToAddTo</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>set_AttributeToAdd</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToAddTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute</signature>
                        <name>&lt;AttributeToAdd&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToAddTo&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddAttributeToPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute()</signature>
                        <name>get_AttributeToAdd</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToAddTo</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>set_AttributeToAdd</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToAddTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute</signature>
                        <name>&lt;AttributeToAdd&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToAddTo&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddChildToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>BeforeInsert</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint()</signature>
                        <name>get_AdditionPoint</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToAddTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct()</signature>
                        <name>get_ConstructToAdd</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder, ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>InsertAtEndOfParent</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>InsertAtStartOfParent</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint)</signature>
                        <name>set_AdditionPoint</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToAddTo</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>set_ConstructToAdd</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint</signature>
                        <name>&lt;AdditionPoint&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToAddTo&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>&lt;ConstructToAdd&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddImplementsToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;)</signature>
                        <name>&lt;ApplyActionTo&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;)</signature>
                        <name>&lt;ApplyActionTo&gt;b__3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToChange</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InsertAtBeginning</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>get_NewImplementor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToChange</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InsertAtBeginning</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>set_NewImplementor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;InsertAtBeginning&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>&lt;NewImplementor&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddImplementsToClassAction/&lt;&gt;c__DisplayClass8</name>
                <newname>ArchAngel.Providers.CodeProvider.CodeInsertions.AddImplementsToClassAction/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Slyce.Common.IEnumerableExtensions.IndexedItem`1&lt;string&gt;(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>textToSearch</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint</signature>
                        <name>EndOfParent</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddMethodToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function, ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint, ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>BeforeInsert</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function</signature>
                        <name>MethodToAdd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddModifierToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToChange</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InsertAtStart</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewModifier</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToChange</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InsertAtStart</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NewModifier</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;InsertAtStart&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NewModifier&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddModifierToPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InsertAtStart</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewModifier</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InsertAtStart</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NewModifier</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;InsertAtStart&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NewModifier&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.AddPropertyToClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.CodeInsertions.AdditionPoint, ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>BeforeInsert</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, string, int32)</signature>
                        <name>FixAccessor</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.Property,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>PropertyToAdd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.ChangeMethodHeaderAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function, ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function()</signature>
                        <name>get_MethodToChange</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function()</signature>
                        <name>get_NewMethodInfo</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>set_MethodToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>set_NewMethodInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function</signature>
                        <name>&lt;MethodToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function</signature>
                        <name>&lt;NewMethodInfo&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.ChangePropertyAccessorModifierAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor()</signature>
                        <name>get_AccessorToChange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewModifier</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>set_AccessorToChange</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NewModifier</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>&lt;AccessorToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NewModifier&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.ChangeTypeOfPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>get_NewType</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>set_NewType</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>&lt;NewType&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.CodeInsertionAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.InsertionHelpers</name>
                <methodlist>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;GetLastWord&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(string, int32, int32)</signature>
                        <name>GetClassKeywordIndex</name>
                    </method>
                    <method>
                        <signature>int32(string, int32)</signature>
                        <name>GetIndentationInFrontOf</name>
                    </method>
                    <method>
                        <signature>int32(System.Text.StringBuilder, int32)</signature>
                        <name>GetIndentationInFrontOf</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetLastWord</name>
                    </method>
                    <method>
                        <signature>int32(string, ArchAngel.Providers.CodeProvider.DotNet.Property, int32, int32)</signature>
                        <name>GetNameIndex</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveAccessorFromPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor()</signature>
                        <name>get_AccessorToRemove</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>set_AccessorToRemove</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>&lt;AccessorToRemove&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveImplementsFromClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToChange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImplementToRemove</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToChange</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ImplementToRemove</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ImplementToRemove&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveModifierFromClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToChange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ModifierToRemove</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToChange</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ModifierToRemove</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ModifierToRemove&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveModifierFromPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ApplyActionTo&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ModifierToRemove</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ModifierToRemove</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ModifierToRemove&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveModifiersFromClassAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class()</signature>
                        <name>get_ClassToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>set_ClassToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>&lt;ClassToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RemoveModifiersFromPropertyAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CodeInsertions.RenameBaseConstructAction</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CodeInsertions.ActionResult(System.Text.StringBuilder)</signature>
                        <name>ApplyActionTo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewName</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct()</signature>
                        <name>get_PropertyToChange</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NewName</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>set_PropertyToChange</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NewName&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>&lt;PropertyToChange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ComparisonDepth</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.ComparisonDepth</signature>
                        <name>Complete</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.ComparisonDepth</signature>
                        <name>Outer</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.ComparisonDepth</signature>
                        <name>Signature</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.AttributePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute</signature>
                        <name>attr</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.AttributeSectionPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.AttributeSection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.AttributeSection</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.BaseConstructPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>obj</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>ArchAngel.Providers.CodeProvider.CSharp.BasePrinter`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.ClassPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder)</signature>
                        <name>GetBodyText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>AddChild</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>AddUsingStatement</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string, ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>CreateBaseConstruct</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string)</signature>
                        <name>FindChild</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller()</signature>
                        <name>get_Controller</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UsingStatementsTextBlock</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.CSharp.CodeRoot, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.ICodeRoot, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ICodeRoot()</signature>
                        <name>NewInstance</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UsingStatementsTextBlock</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.ICodeRoot)</signature>
                        <name>ShallowCloneInto</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildren</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkTree</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_usingStatementsAreSorted</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_usingStatementsTextBlock</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.AttributeSection&gt;</signature>
                        <name>Attributes</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;</signature>
                        <name>Classes</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller</signature>
                        <name>controller</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;</signature>
                        <name>Delegates</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;</signature>
                        <name>Enums</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IgnoreAllOmits</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IncludeExtraLines</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;</signature>
                        <name>Interfaces</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Namespace&gt;</signature>
                        <name>Namespaces</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;</signature>
                        <name>Structs</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.UsingStatement&gt;</signature>
                        <name>UsingStatements</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot/&lt;WalkTree&gt;d__0</name>
                <newname>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;</signature>
                        <name>&lt;&gt;7__wrap3</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;</signature>
                        <name>&lt;&gt;7__wrap5</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;baseConstruct&gt;5__2</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;child&gt;5__1</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.CodeRootPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.CodeRoot)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>GetUsingTextBlock</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/AttributeComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Attribute, ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/BaseConstructComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Attribute, ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Class, ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Constant, ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Constructor, ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Event, ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Field, ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Function, ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Namespace, ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Struct, ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/ClassComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Class, ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/ConstantComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Constant, ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/ConstructorComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Constructor, ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/EventComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Event, ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/FieldComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Field, ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/FunctionComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Function, ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/NamespaceComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Namespace, ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/PropertyComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>Ascending</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>Descending</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/StructComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.Struct, ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Comparers/UsingStatementComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement, ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.Comparers/SortDirection</signature>
                        <name>_direction</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.ConstantPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Constant</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.ConstructorPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Constructor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.CSharpController</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__10</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__11</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__12</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__13</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__14</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__15</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__16</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__17</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__18</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__19</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1a</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1b</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1c</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1d</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1e</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1f</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__2</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__20</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__21</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__3</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__4</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__5</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__6</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__7</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__8</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__9</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__a</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__b</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__c</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__d</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__e</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__f</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate22</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate23</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate24</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate25</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate26</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate27</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate28</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate29</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2a</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2b</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2c</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2d</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2e</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2f</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate30</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate31</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate32</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate33</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate34</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate35</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate36</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate37</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate38</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate39</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3a</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3b</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3c</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3d</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3e</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3f</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate40</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate41</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate42</name>
                        <newname>ag</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings)</signature>
                        <name>SetFrom</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>AddBracesToSingleLineBlocks</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>CommentLinesAsCommentBlock</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>InlineSingleLineGettersAndSetters</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>MaintainWhitespace</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>OmitEmptyStatements</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>PutBracesOnNewLines</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ReorderBaseConstructs</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>SingleLineBlocksOnSameLineAsParent</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.DataTypePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.DelegatePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Delegate)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Delegate</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.DestructorPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Destructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Destructor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.EmptyPlaceholderPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.EmptyPlaceholder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.EmptyPlaceholder</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.EnumerationPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Enumeration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Enumeration</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.EnumerationPrinter/EnumMemberPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.EventPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Event</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.FieldPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Field</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.FunctionPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.IndexerPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Indexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Indexer</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfaceAccessorPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfaceEventPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfaceIndexerPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfaceMethodPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfacePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Interface)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder)</signature>
                        <name>GetBodyText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Interface</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.InterfacePropertyPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.NamespacePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder)</signature>
                        <name>GetBodyText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Namespace</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.OperatorPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Operator)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Operator</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.ParameterBasePrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.ParameterBase)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.ParameterBase</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.ParameterPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Parameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Parameter</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.PropertyAccessorPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.PropertyPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.RegionContainer</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;()</signature>
                        <name>get_Regions</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>RecursiveGetAllOfType</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.List`1&lt;!!0&gt;)</signature>
                        <name>SearchAndAddFromRegions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;)</signature>
                        <name>set_Regions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;</signature>
                        <name>regions</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.RegionEndPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionEnd)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.RegionEnd</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.RegionPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Region)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Region</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.RegionStartPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionStart)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.RegionStart</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.StructPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder)</signature>
                        <name>GetBodyText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Struct</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.UsingStatementPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.UsingStatement</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharp.Utility</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[], ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[])</signature>
                        <name>BaseContructCollectionsAreTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[], ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[], System.Collections.Generic.IComparer`1&lt;ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct&gt;)</signature>
                        <name>BaseContructCollectionsAreTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[], ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[], System.Collections.Generic.IComparer`1&lt;ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct&gt;, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>BaseContructCollectionsAreTheSame</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.List`1&lt;!!0&gt;, System.Collections.Generic.List`1&lt;!!0&gt;, System.Collections.Generic.IComparer`1&lt;!!0&gt;)</signature>
                        <name>CollectionsAreTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.DataType&amp;, ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>MergeDataType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.IVisibilityModifiers, ArchAngel.Providers.CodeProvider.DotNet.IVisibilityModifiers, ArchAngel.Providers.CodeProvider.DotNet.IVisibilityModifiers, ArchAngel.Providers.CodeProvider.DotNet.IVisibilityModifiers)</signature>
                        <name>MergeModifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(!!0&amp;, !!0, !!0, !!0)</signature>
                        <name>MergeSingleItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>MergeStringCollections</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>ResetIndents</name>
                    </method>
                    <method>
                        <signature>bool(string[], string[])</signature>
                        <name>StringCollectionsAreTheSame</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>StringCollectionsAreTheSame</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, System.Text.StringBuilder)</signature>
                        <name>WriteRegionEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, System.Text.StringBuilder, string)</signature>
                        <name>WriteRegionStart</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharpCodeFormatter</name>
                <methodlist>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings, ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>FindPreviousBlankLines</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression)</signature>
                        <name>Format_Anonymous_Method_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression)</signature>
                        <name>Format_Argument_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression)</signature>
                        <name>Format_Assignment_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression)</signature>
                        <name>Format_Binary_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression)</signature>
                        <name>Format_Cast_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression)</signature>
                        <name>Format_Checked_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)</signature>
                        <name>Format_Collection_Range_Variable_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression)</signature>
                        <name>Format_Conditional_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression)</signature>
                        <name>Format_Default_Value_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression)</signature>
                        <name>Format_Invocation_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression)</signature>
                        <name>Format_IsTypeOf_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression, System.Text.StringBuilder)</signature>
                        <name>Format_Lamba_Statement_Block</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression)</signature>
                        <name>Format_Literal_Expression</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess)</signature>
                        <name>Format_Member_Access_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)</signature>
                        <name>Format_Object_Collection_Initializer_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression)</signature>
                        <name>Format_Object_Creation_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression)</signature>
                        <name>Format_Parenthesized_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess)</signature>
                        <name>Format_Pointer_Member_Access_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression)</signature>
                        <name>Format_Query_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression)</signature>
                        <name>Format_SizeOf_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer)</signature>
                        <name>Format_Stack_Alloc_Initializer_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression)</signature>
                        <name>Format_TryCast_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression)</signature>
                        <name>Format_Type_Reference_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression)</signature>
                        <name>Format_TypeOf_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression)</signature>
                        <name>Format_Unary_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression)</signature>
                        <name>Format_Unchecked_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)</signature>
                        <name>FormatExpression</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>FormatQueryOperator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings()</signature>
                        <name>get_FormatSettings</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment&gt;()</signature>
                        <name>get_HandledComments</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Indent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.SortedList`2&lt;int32,ArchAngel.Providers.CodeProvider.DotNet.Region&gt;()</signature>
                        <name>get_UnhandledRegions</name>
                    </method>
                    <method>
                        <signature>bool(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType, bool)</signature>
                        <name>OperatorIsPrefix</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)</signature>
                        <name>Process_Block_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement, System.Text.StringBuilder)</signature>
                        <name>Process_Branch_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement)</signature>
                        <name>Process_Break_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>Process_Catch_Clauses</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement)</signature>
                        <name>Process_Checked_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement)</signature>
                        <name>Process_Continue_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement)</signature>
                        <name>Process_Do_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement)</signature>
                        <name>Process_Fixed_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement)</signature>
                        <name>Process_For_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement)</signature>
                        <name>Process_ForEach_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>Process_Generic_Type_Arguments</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement)</signature>
                        <name>Process_Goto_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement)</signature>
                        <name>Process_If_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement)</signature>
                        <name>Process_Labeled_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression)</signature>
                        <name>Process_Lambda_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration)</signature>
                        <name>Process_Local_Variable_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement)</signature>
                        <name>Process_Lock_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement)</signature>
                        <name>Process_Return_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>Process_Single_Statement_Block</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression)</signature>
                        <name>Process_Statement_Expression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>Process_Switch_Sections</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement)</signature>
                        <name>Process_Switch_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement)</signature>
                        <name>Process_Throw_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement)</signature>
                        <name>Process_Try_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement)</signature>
                        <name>Process_Unchecked_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement)</signature>
                        <name>Process_Unsafe_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement)</signature>
                        <name>Process_Using_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)</signature>
                        <name>Process_Variable_Declarator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement)</signature>
                        <name>Process_While_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement)</signature>
                        <name>Process_Yield_Statement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.IAstNodeList, int32, int32)</signature>
                        <name>ProcessBodyText</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.IAstNodeList, int32, int32)</signature>
                        <name>ProcessBodyTextInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.IAstNodeList, int32, int32, bool)</signature>
                        <name>ProcessBodyTextInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>ProcessStatement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)</signature>
                        <name>ProcessStatementBlock</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings)</signature>
                        <name>SetFormatSettings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller</signature>
                        <name>controller</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Document</signature>
                        <name>document</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings</signature>
                        <name>formatSettings</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment&gt;</signature>
                        <name>handledComments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>indentLevel</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedList`2&lt;int32,ArchAngel.Providers.CodeProvider.DotNet.Region&gt;</signature>
                        <name>unhandledRegions</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharpParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ActiproSoftware.SyntaxEditor.ISemanticParseDataTarget.get_Guid</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddToParentAndStack</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>CheckRegions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>CheckRegionsEnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>CheckRegionsStart</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)</signature>
                        <name>CreateCodeRoot</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)</signature>
                        <name>CreateRegions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FixParentReferences</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ActiproSoftware.SyntaxEditor.Document()</signature>
                        <name>get_ActiproDocument</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ICodeRoot()</signature>
                        <name>get_CreatedCodeRoot</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ErrorOccurred</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ParserException()</signature>
                        <name>get_ExceptionThrown</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings()</signature>
                        <name>get_FormatSettings</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ParseFinished</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.ParserSyntaxError&gt;()</signature>
                        <name>get_SyntaxErrors</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute(ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>GetAttributeFromNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.AttributeSection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>GetAttributeSectionFromNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFormattedErrors</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Parameter(ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.DotNet.Controller, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)</signature>
                        <name>GetParameterFromParameterDeclaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)</signature>
                        <name>NotifySemanticParseComplete</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ParseCode</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ParseCode</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle(string)</signature>
                        <name>ParseCodeAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle(string, string)</signature>
                        <name>ParseCodeAsync</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct(string, ArchAngel.Providers.CodeProvider.BaseConstructType)</signature>
                        <name>ParseSingleConstruct</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct(string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>ParseSingleConstruct</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PostProcessComments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)</signature>
                        <name>Process_Attribute_Section</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration)</signature>
                        <name>Process_Class_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment)</signature>
                        <name>Process_Comment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Process_Compilation_Unit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration)</signature>
                        <name>Process_Constructor_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration)</signature>
                        <name>Process_Delegate_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration)</signature>
                        <name>Process_Destructor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration)</signature>
                        <name>Process_Enum_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration)</signature>
                        <name>Process_Enum_Member_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration)</signature>
                        <name>Process_Event_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)</signature>
                        <name>Process_Field_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>Process_Generic_Type_Argument</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)</signature>
                        <name>Process_Interace_Accessor_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration)</signature>
                        <name>Process_Interace_Event_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration)</signature>
                        <name>Process_Interace_Method_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration)</signature>
                        <name>Process_Interace_Property_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration)</signature>
                        <name>Process_Interface_Declaration</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration)</signature>
                        <name>Process_Method_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration)</signature>
                        <name>Process_Namespace_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration)</signature>
                        <name>Process_Operator_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes)</signature>
                        <name>Process_Property_Accessor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration)</signature>
                        <name>Process_Property_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration)</signature>
                        <name>Process_Structure_Declaration</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective)</signature>
                        <name>Process_Using_Directive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IBlockAstNode, ArchAngel.Providers.CodeProvider.IBody, ActiproSoftware.SyntaxEditor.IAstNodeList, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>ProcessBodyText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>ProcessChildNodes</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)</signature>
                        <name>ProcessDotNetNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit, ActiproSoftware.SyntaxEditor.IAstNode)</signature>
                        <name>ProcessNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.ParserException)</signature>
                        <name>set_ExceptionThrown</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>SetAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string)</signature>
                        <name>SetDocumentation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment&gt;, ArchAngel.Providers.CodeProvider.DotNet.CommentObject)</signature>
                        <name>SetTrailingComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>SetupBaseConstruct</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ActiproSoftware.SyntaxEditor.IAstNodeList)</signature>
                        <name>SetupBaseConstruct</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.SortedList`2&lt;int32,ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct&gt;</signature>
                        <name>baseConstructs</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedList`2&lt;int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment&gt;</signature>
                        <name>comments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CSharpController</signature>
                        <name>controller</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>currentFilename</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.Document</signature>
                        <name>document</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.ParserException</signature>
                        <name>exceptionThrown</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CSharpFormatSettings</signature>
                        <name>formatSettings</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharpCodeFormatter</signature>
                        <name>formatter</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Stack`1&lt;ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct&gt;</signature>
                        <name>objectStack</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>parseFinished</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Guid</signature>
                        <name>parserGuid</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>parseWaitHandle</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.ParserSyntaxError&gt;</signature>
                        <name>syntaxErrors</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedList`2&lt;int32,ArchAngel.Providers.CodeProvider.DotNet.Region&gt;</signature>
                        <name>unhandledRegions</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharpParser/&lt;&gt;c__DisplayClass1</name>
                <newname>ArchAngel.Providers.CodeProvider.CSharpParser/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;NotifySemanticParseComplete&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharpParser</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest</signature>
                        <name>request</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.CSharpParser/CodeRootBaseConstructAdapter</name>
                <newname>ArchAngel.Providers.CodeProvider.CSharpParser/a</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.CodeRoot)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>wrappedCodeRoot</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Attribute</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>NamedArgumentCollectionsAreTheSame</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute/NamedArgument&gt;</signature>
                        <name>NamedArguments</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>PositionalArguments</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Attribute/NamedArgument</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute/NamedArgument()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute/NamedArgument)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Name</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;(ArchAngel.Providers.CodeProvider.AttributeSection)</signature>
                        <name>&lt;HasAttributeNamed&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.AttributeSection)</signature>
                        <name>AddAttributeSection</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.AttributeSection&gt;)</signature>
                        <name>AddAttributeSections</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>AddChild</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>CalculateFullyQualifiedDisplayName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>CalculateFullyQualifiedName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CloneInto</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>CustomMergeStep</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string)</signature>
                        <name>FindChild</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;()</signature>
                        <name>get_Attributes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.AttributeSection&gt;()</signature>
                        <name>get_AttributeSections</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.CommentObject()</signature>
                        <name>get_Comments</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller()</signature>
                        <name>get_Controller</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.EmptyPlaceholder&gt;()</signature>
                        <name>get_EmptyPlaceholders</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Omit</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PreceedingBlankLines</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ShortName</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.TextRange()</signature>
                        <name>get_TextRange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetAttributesText</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;(System.Type)</signature>
                        <name>GetChildrenOfType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFullText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetXmlCommentsText</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasAttributeNamed</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>MergeAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>MergeComments</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>RemoveChildObject</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.CommentObject)</signature>
                        <name>set_Comments</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>set_Controller</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.EmptyPlaceholder&gt;)</signature>
                        <name>set_EmptyPlaceholders</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Omit</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>set_Parent</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PreceedingBlankLines</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.TextRange)</signature>
                        <name>set_TextRange</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildren</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkTree</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;</signature>
                        <name>_Attributes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.AttributeSection&gt;</signature>
                        <name>_AttributeSections</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_omit</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.TextRange</signature>
                        <name>&lt;TextRange&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.CommentObject</signature>
                        <name>comments</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ComparisonDifference</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller</signature>
                        <name>controller</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.AttributeSection,System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Attribute&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/Options</signature>
                        <name>DisplayOptions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.EmptyPlaceholder&gt;</signature>
                        <name>emptyPlaceholders</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Index</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>InputLength</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>InputStartPos</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage</signature>
                        <name>Language</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NumberOfLines</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>OutputOffset</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>ParentObject</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>preceedingBlankLines</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>XmlComments</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/&lt;&gt;c__DisplayClass4</name>
                <newname>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>&lt;HasAttributeNamed&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>&lt;HasAttributeNamed&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/&lt;WalkTree&gt;d__6</name>
                <newname>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallya</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyc</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;</signature>
                        <name>&lt;&gt;7__wrap9</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;</signature>
                        <name>&lt;&gt;7__wrapb</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;bc&gt;5__8</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct</signature>
                        <name>&lt;child&gt;5__7</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage</signature>
                        <name>CSharp</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage</signature>
                        <name>VBDotNet</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/Options</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>ListVertically</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Class</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Indexer()</signature>
                        <name>get_ClassIndexer</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constant&gt;()</signature>
                        <name>get_Constants</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constructor&gt;()</signature>
                        <name>get_Constructors</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;()</signature>
                        <name>get_Delegates</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Destructor&gt;()</signature>
                        <name>get_Destructors</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;()</signature>
                        <name>get_Enums</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Event&gt;()</signature>
                        <name>get_Events</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Field&gt;()</signature>
                        <name>get_Fields</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Function&gt;()</signature>
                        <name>get_Functions</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;()</signature>
                        <name>get_InnerClasses</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;()</signature>
                        <name>get_Interfaces</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Operator&gt;()</signature>
                        <name>get_Operators</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Property&gt;()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;()</signature>
                        <name>get_Regions</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;()</signature>
                        <name>get_Structs</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Class, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>RecursiveGetAllOfType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>RemoveField</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.List`1&lt;!!0&gt;)</signature>
                        <name>SearchAndAddFromRegions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Indexer)</signature>
                        <name>set_ClassIndexer</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constant&gt;)</signature>
                        <name>set_Constants</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constructor&gt;)</signature>
                        <name>set_Constructors</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;)</signature>
                        <name>set_Delegates</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Destructor&gt;)</signature>
                        <name>set_Destructors</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;)</signature>
                        <name>set_Enums</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Event&gt;)</signature>
                        <name>set_Events</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;)</signature>
                        <name>set_Interfaces</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Operator&gt;)</signature>
                        <name>set_Operators</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Property&gt;)</signature>
                        <name>set_Properties</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;)</signature>
                        <name>set_Regions</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;)</signature>
                        <name>set_Structs</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>BaseNames</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Indexer</signature>
                        <name>classIndexer</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constant&gt;</signature>
                        <name>constants</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constructor&gt;</signature>
                        <name>constructors</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;</signature>
                        <name>delegates</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Destructor&gt;</signature>
                        <name>destructors</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;</signature>
                        <name>enums</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Event&gt;</signature>
                        <name>events</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Field&gt;</signature>
                        <name>fields</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Function&gt;</signature>
                        <name>functions</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>GenericConstraintClause</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>GenericTypes</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;</signature>
                        <name>innerClasses</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;</signature>
                        <name>interfaces</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsPartial</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Operator&gt;</signature>
                        <name>operators</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Property&gt;</signature>
                        <name>properties</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;</signature>
                        <name>regions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;</signature>
                        <name>structs</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.CommentObject</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.CommentObject()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.CommentObject)</signature>
                        <name>IsTheSame</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>PreceedingComments</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TrailingComment</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Constant</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Constant, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Expression</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Constructor</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Constructor, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>InitializerArguments</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>InitializerType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_body</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Controller</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Indent</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(!!0)</signature>
                        <name>GetPrinterFor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(!!0)</signature>
                        <name>TryGetPrinterFor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>AddRegions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;&gt;</signature>
                        <name>dict</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IndentLevel</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>MaintainWhitespace</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Reorder</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>Root</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.DataType</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Alias</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.DataType&gt;()</signature>
                        <name>get_GenericParameters</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsGeneric</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Alias</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.DataType&gt;)</signature>
                        <name>set_GenericParameters</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_Alias</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.DataType&gt;</signature>
                        <name>_GenericParameters</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_Name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Controller</signature>
                        <name>controller</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Delegate</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, System.Collections.Generic.List`1&lt;string&gt;, string, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;, ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Delegate)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Delegate)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Delegate, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>GenericType</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>ReturnType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Destructor</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Destructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExtern</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsExtern</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>bodyText</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isExtern</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Enumeration</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, System.Collections.Generic.List`1&lt;string&gt;, string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Enumeration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Enumeration)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Enumeration, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>EnumBase</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember&gt;</signature>
                        <name>Members</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Enumeration/EnumMember, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Event</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.DataType, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Event, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AddAccessorText</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>InitialValue</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RemoveAccessorText</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Field</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.DataType, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Field, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>InitialValue</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Function</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.Parameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Function, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Body</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FormattedBody</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>GenericConstraintClause</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>GenericParameters</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>ReturnType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.IFields</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Field&gt;()</signature>
                        <name>get_Fields</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Indexer</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.DataType, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Indexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor()</signature>
                        <name>get_GetAccessor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor()</signature>
                        <name>get_SetAccessor</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Indexer)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Indexer, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>set_DataType</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>set_GetAccessor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>set_SetAccessor</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>dataType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>getAccessor</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>setAccessor</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Interface</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, System.Collections.Generic.List`1&lt;string&gt;, string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Interface)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Interface)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Interface, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent&gt;</signature>
                        <name>Events</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer&gt;</signature>
                        <name>Indexers</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>InterfaceBase</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod&gt;</signature>
                        <name>Methods</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty&gt;</signature>
                        <name>Properties</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes</signature>
                        <name>AccessorType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor/AccessorTypes</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>HasNewKeyword</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasNewKeyword</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>set_DataType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasNewKeyword</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>dataType</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>GetAccessor</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>hasNewKeyword</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>SetAccessor</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, bool, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasNewKeyword</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType()</signature>
                        <name>get_ReturnType</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasNewKeyword</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>set_ReturnType</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>GenericConstraintClause</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>GenericParameters</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>hasNewKeyword</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>returnType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor, ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor, bool, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>GetAccessor</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>HasNewKeyword</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>SetAccessor</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.IPrintable</name>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.IPrinter</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.IVisibilityModifiers</name>
                <newname>bf</newname>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.IWrapper</name>
                <methodlist>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IWrapper()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct()</signature>
                        <name>GetChildren</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Namespace</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, ArchAngel.Providers.CodeProvider.CSharp.CodeRoot, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Namespace, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;</signature>
                        <name>Classes</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;</signature>
                        <name>Delegates</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;</signature>
                        <name>Enums</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Event&gt;</signature>
                        <name>Events</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Namespace&gt;</signature>
                        <name>InnerNamespaces</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;</signature>
                        <name>Interfaces</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>ParentCodeRoot</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Region&gt;</signature>
                        <name>Regions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;</signature>
                        <name>Structs</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.UsingStatement&gt;</signature>
                        <name>UsingStatements</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Operator</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Operator)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Operator)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Operator, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Body</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Parameter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Parameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Parameter, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsParams</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.ParameterBase</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.ParameterBase)</signature>
                        <name>CloneParameters</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayNameWithBCLTypes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetBCLTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetParameterTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetParameterTypeStrings</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.ParameterBase, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>ParametersAreTheSame</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Property</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, System.Collections.Generic.List`1&lt;string&gt;, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, ArchAngel.Providers.CodeProvider.DotNet.DataType, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Property, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>DataType</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>GetAccessor</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>SetAccessor</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes, string, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes</signature>
                        <name>AccessorType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Modifier</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Text</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor/AccessorTypes</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Region</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_EndOffset</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;()</signature>
                        <name>GetConstructsOfType</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Region)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Region, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_EndOffset</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct&gt;</signature>
                        <name>children</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>endOffset</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.RegionEnd</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionEnd)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.RegionEnd, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.RegionStart</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionStart)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.RegionStart, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.Struct</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, string, System.Collections.Generic.List`1&lt;string&gt;, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct/CodeLanguage, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Field&gt;()</signature>
                        <name>get_Fields</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Modifiers</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct[]()</signature>
                        <name>get_SortedConstructs</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Struct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>RemoveChildObjectInternal</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Modifiers</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_Modifiers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>BaseNames</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;</signature>
                        <name>Classes</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constant&gt;</signature>
                        <name>Constants</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Constructor&gt;</signature>
                        <name>Constructors</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Delegate&gt;</signature>
                        <name>Delegates</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Enumeration&gt;</signature>
                        <name>Enums</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Event&gt;</signature>
                        <name>Events</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Field&gt;</signature>
                        <name>fields</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Function&gt;</signature>
                        <name>Functions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>GenericTypes</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Interface&gt;</signature>
                        <name>Interfaces</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Operator&gt;</signature>
                        <name>Operators</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Property&gt;</signature>
                        <name>Properties</name>
                    </field>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Indexer</signature>
                        <name>StructIndexer</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Struct&gt;</signature>
                        <name>Structs</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.DotNet.UsingStatement</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Alias</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.EmptyPlaceholder</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller, string, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.EmptyPlaceholder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>AddChildInternal</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildrenInternal</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.FormatterUtility</name>
                <newname>az</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>FormatDataType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator, ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>FormatDataType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration, ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>FormatParameter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference, ActiproSoftware.SyntaxEditor.Document, ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>GetDataTypeFromTypeReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)</signature>
                        <name>GetModifiersFromEnum</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers)</signature>
                        <name>GetModifiersFromEnum</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration, ActiproSoftware.SyntaxEditor.Document)</signature>
                        <name>GetModifiersFromEnumCheckInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)</signature>
                        <name>GetOperatorName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>LongPrimitiveNameToShortName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType,string&gt;</signature>
                        <name>OperatorNames</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.IBaseConstruct</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>AddChild</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>CustomMergeStep</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string)</signature>
                        <name>FindChild</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ShortName</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.TextRange()</signature>
                        <name>get_TextRange</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;(System.Type)</signature>
                        <name>GetChildrenOfType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFullText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.IBaseConstruct, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>RemoveChildObject</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>set_Parent</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.TextRange)</signature>
                        <name>set_TextRange</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildren</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkTree</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.IBody</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_BodyText</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BodyText</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ICodeRoot</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>AddChild</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string, ArchAngel.Providers.CodeProvider.IBaseConstruct)</signature>
                        <name>CreateBaseConstruct</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.IBaseConstruct(string)</signature>
                        <name>FindChild</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.ICodeRoot, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>IsTheSame</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ICodeRoot()</signature>
                        <name>NewInstance</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.ICodeRoot)</signature>
                        <name>ShallowCloneInto</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkChildren</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.IBaseConstruct&gt;()</signature>
                        <name>WalkTree</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.IParser</name>
                <methodlist>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ICodeRoot()</signature>
                        <name>get_CreatedCodeRoot</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ErrorOccurred</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;ArchAngel.Providers.CodeProvider.ParserSyntaxError&gt;()</signature>
                        <name>get_SyntaxErrors</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFormattedErrors</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ParseCode</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ParseCode</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle(string)</signature>
                        <name>ParseCodeAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle(string, string)</signature>
                        <name>ParseCodeAsync</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ParseResults</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ArchAngel.Providers.CodeProvider.CSharp.CodeRoot)</signature>
                        <name>AddParsedFile</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class(string)</signature>
                        <name>FindClass</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;(string)</signature>
                        <name>GetClassesInNamespace</name>
                    </method>
                    <method>
                        <signature>string(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>GetFilenameForParsedClass</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.ParseResults(System.Collections.Generic.IEnumerable`1&lt;string&gt;, Slyce.Common.IFileController)</signature>
                        <name>ParseCSharpFiles</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Class&gt;)</signature>
                        <name>ProcessInnerClasses</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.IEnumerable`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Namespace&gt;)</signature>
                        <name>ProcessNewNamespaces</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Slyce.Common.LookupList`2&lt;string,ArchAngel.Providers.CodeProvider.DotNet.Class&gt;</signature>
                        <name>parsedClasses</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Slyce.Common.DoubleLookup`2&lt;string,ArchAngel.Providers.CodeProvider.CSharp.CodeRoot&gt;</signature>
                        <name>parsedFiles</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ParseResults/&lt;&gt;c__DisplayClass3</name>
                <newname>ArchAngel.Providers.CodeProvider.ParseResults/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>&lt;FindClass&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>&lt;FindClass&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>className</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ParserException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.ParserSyntaxError</name>
                <methodlist>
                    <method>
                        <signature>void(string, int32, int32, int32, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorMessage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Filename</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_StartOffset</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>errorMessage</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>errorText</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filename</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>length</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>lineNumber</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>startOffset</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.TextRange</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_EndOffset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_StartOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_EndOffset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_StartOffset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;EndOffset&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;StartOffset&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.ParameterBase</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Controller)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.VB.ParameterBase)</signature>
                        <name>CloneParameters</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepInternal</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct, ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>CustomMergeStepParameterInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedDisplayNameExtended</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedIdentifer</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetParameterTypeStrings</name>
                    </method>
                    <method>
                        <signature>bool(ArchAngel.Providers.CodeProvider.VB.ParameterBase, ArchAngel.Providers.CodeProvider.ComparisonDepth)</signature>
                        <name>ParametersAreTheSame</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;ArchAngel.Providers.CodeProvider.DotNet.Parameter&gt;</signature>
                        <name>parameters</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBAttributePrinter</name>
                <newname>a9</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Attribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Attribute</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBAttributeSectionPrinter</name>
                <newname>ar</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.AttributeSection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.AttributeSection</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBBaseConstructPrinter</name>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.BaseConstruct</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBClassPrinter</name>
                <newname>ak</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Class)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Class</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBCodeRootPrinter</name>
                <newname>ag</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.CSharp.CodeRoot)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.CSharp.CodeRoot</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBConstantPrinter</name>
                <newname>bh</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constant)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Constant</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBConstructorPrinter</name>
                <newname>as</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Constructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Constructor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBController</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__10</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__11</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__12</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__13</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__14</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__15</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__16</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__17</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__18</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__19</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1a</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1b</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1c</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1d</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1e</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__1f</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__2</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__20</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__3</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__4</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__5</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__6</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__7</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__8</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__9</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__a</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__b</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__c</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__d</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__e</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.IPrinter(ArchAngel.Providers.CodeProvider.DotNet.IPrintable)</signature>
                        <name>&lt;.ctor&gt;b__f</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate21</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate22</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate23</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate24</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate25</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate26</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate27</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate28</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate29</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2a</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2b</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2c</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2d</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2e</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2f</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate30</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate31</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate32</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate33</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate34</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate35</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate36</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate37</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate38</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate39</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3a</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3b</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3c</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3d</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3e</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3f</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ArchAngel.Providers.CodeProvider.DotNet.IPrintable,ArchAngel.Providers.CodeProvider.DotNet.IPrinter&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate40</name>
                        <newname>af</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBDataTypePrinter</name>
                <newname>an</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.DataType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.DataType</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBDelegatePrinter</name>
                <newname>d</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Delegate)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Delegate</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBDestructorPrinter</name>
                <newname>y</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Destructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Destructor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBEmptyPlaceholderPrinter</name>
                <newname>ap</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.EmptyPlaceholder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.EmptyPlaceholder</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBEnumerationPrinter</name>
                <newname>al</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Enumeration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Enumeration</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBEventPrinter</name>
                <newname>ab</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Event)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Event</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBFieldPrinter</name>
                <newname>a6</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Field)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Field</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBFunctionPrinter</name>
                <newname>x</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Function)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Function</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBIndexerPrinter</name>
                <newname>bb</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Indexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Indexer</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfaceAccessorPrinter</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceAccessor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfaceEventPrinter</name>
                <newname>bd</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceEvent</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfaceIndexerPrinter</name>
                <newname>ai</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceIndexer</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfaceMethodPrinter</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceMethod</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfacePrinter</name>
                <newname>am</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Interface)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Interface</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBInterfacePropertyPrinter</name>
                <newname>bc</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.InterfaceProperty</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBNamespacePrinter</name>
                <newname>av</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Namespace)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Namespace</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBOperatorPrinter</name>
                <newname>a3</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Operator)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Operator</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBParameterPrinter</name>
                <newname>at</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Parameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Parameter</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBPropertyAccessorPrinter</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.PropertyAccessor</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBPropertyPrinter</name>
                <newname>aq</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Property)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Property</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBRegionEndPrinter</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionEnd)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.RegionEnd</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBRegionPrinter</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Region)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Region</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBRegionStartPrinter</name>
                <newname>af</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.RegionStart)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.RegionStart</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBStructPrinter</name>
                <newname>ay</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.Struct)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.Struct</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.CodeProvider.VB.VBUsingStatementPrinter</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>void(ArchAngel.Providers.CodeProvider.DotNet.UsingStatement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullyQualifiedName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetInnerText</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOuterText</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Print</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ArchAngel.Providers.CodeProvider.DotNet.UsingStatement</signature>
                        <name>obj</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>ArchAngel.Providers.PreprocessorSection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>AddElseLine</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_ElseLineNumbers</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>BodySections</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EndLine</name>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>FormattedCode</name>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>m_elseLines</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PrePPFormattedCode</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>StartLine</name>
                    </field>
                </fieldlist>
            </type>
        </module>
        <module>
            <name>Slyce.IntelliMerge.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{C1FA273C-C659-4965-9EE7-7A2201C48CAB}</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <newname>w</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>Slyce.IntelliMerge.UI.VisualDiff.Block</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>Slyce.IntelliMerge.UI.VisualDiff.SingleDiffResult()</signature>
                        <name>get_ParentResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_Text</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>length</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Slyce.IntelliMerge.UI.VisualDiff.SingleDiffResult</signature>
                        <name>parentResult</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>startOffset</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Slyce.IntelliMerge.UI.VisualDiff.DiffLine</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Slyce.IntelliMerge.UI.VisualDiff.SingleDiffResult</name>
                <newmodule>ArchAngel.Providers.CodeProvider.dll</newmodule>
                <methodlist>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt;()</signature>
                        <name>get_Lines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>lines</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>424</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>4160</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>1798</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>94</statistic>
            <statistic>22.17 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>1279</statistic>
            <statistic>30.75 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>618</statistic>
            <statistic>34.37 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>748</statistic>
            <statistic>17.98 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>159</statistic>
            <statistic>3.82 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>94</statistic>
            <statistic>2.26 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>69</statistic>
            <statistic>1.66 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>31</statistic>
            <statistic>0.75 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'f'</description>
            <statistic>24</statistic>
            <statistic>0.58 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>18</statistic>
            <statistic>0.43 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>