<?xml version="1.0" encoding="utf-8"?>
<ROOT about="This file is the settings file for an ArchAngel template project." fileversion="1">
  <namespaces>ArchAngel.Providers.Database.Helper,ArchAngel.Providers.Database.Model,System,System.Text,System.Xml</namespaces>
  <referencedfiles>..\..\..\..\..\..\Program Files\ArchAngel\ArchAngel.Providers.Database.dll|False|isProvider=True|useInWorkbench=True,..\..\ArchAngel.Designer\bin\Debug\ArchAngel.Interfaces.dll|False|isProvider=False|useInWorkbench=False</referencedfiles>
  <config>
    <project>
      <name>PetShop2005</name>
      <description>This template creates a Visual Studio project which closely follows the PetShop 3.0 architecture. It is driven by database schemas.</description>
      <compilefile>..\PetShop2005.aal</compilefile>
      <version>1.0.1</version>
      <projecttype>Template</projecttype>
      <optionCategories>
        <category>Constants</category>
        <category>Options</category>
        <category>Prefixes</category>
        <category>Project</category>
      </optionCategories>
      <options>
        <option>
          <variablename>ArchiveDBRecordFieldName</variablename>
          <type>String</type>
          <text>Archive DB Record Field Name</text>
          <description>Archive DB Record instead of deleting</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_ArchiveDBRecordFieldName</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_ArchiveDBRecordFieldName</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>BLLGUID</variablename>
          <type>String</type>
          <text>BLLGUID</text>
          <description>BLLGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_BLLGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_BLLGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_BLLGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>DALFactoryGUID</variablename>
          <type>String</type>
          <text>DALFactoryGUID</text>
          <description>DALFactoryGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_DALFactoryGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_DALFactoryGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_DALFactoryGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>DBUtilityGUID</variablename>
          <type>String</type>
          <text>DBUtilityGUID</text>
          <description>DBUtilityGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_DBUtilityGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_DBUtilityGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_DBUtilityGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>IDALGUID</variablename>
          <type>String</type>
          <text>IDALGUID</text>
          <description>IDALGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_IDALGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_IDALGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_IDALGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>IncludeBulkUpdate</variablename>
          <type>Boolean</type>
          <text>Include Bulk Update</text>
          <description>Include Bulk Update</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_IncludeBulkUpdate</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_IncludeBulkUpdate</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>IncludeModelColumnConstants</variablename>
          <type>Boolean</type>
          <text>Include Model Column Constants</text>
          <description>Include Model Column Constants</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_IncludeModelColumnConstants</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_IncludeModelColumnConstants</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>ModelGUID</variablename>
          <type>String</type>
          <text>ModelGUID</text>
          <description>ModelGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_ModelGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_ModelGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_ModelGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>PackageGUID</variablename>
          <type>String</type>
          <text>PackageGUID</text>
          <description>PackageGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_PackageGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_PackageGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_PackageGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>ProjectName</variablename>
          <type>String</type>
          <text>Project Name</text>
          <description>ProjectName</description>
          <category>Project</category>
          <defaultvalue>DefaultValue_UserOption_ProjectName</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_ProjectName</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>SkipIDAL</variablename>
          <type>Boolean</type>
          <text>Skip IDAL</text>
          <description>Adjust BLL and SQLServerDAL for use without IDAL and DALFactory</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_SkipIDAL</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_SkipIDAL</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>SolutionGUID</variablename>
          <type>String</type>
          <text>GUID for the .sln file</text>
          <description>GUID for the .sln file</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_SolutionGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_SolutionGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_SolutionGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>SQLServerDALGUID</variablename>
          <type>String</type>
          <text>SQLServerDALGUID</text>
          <description>SQLServerDALGUID</description>
          <category>Constants</category>
          <defaultvalue>DefaultValue_UserOption_SQLServerDALGUID</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_SQLServerDALGUID</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_SQLServerDALGUID</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>False</displaytouservalue>
          <values />
        </option>
        <option>
          <variablename>StoredProcedureDeletePrefix</variablename>
          <type>String</type>
          <text>Stored Procedure Delete Prefix</text>
          <description>Stored Procedure Delete Prefix</description>
          <category>Prefixes</category>
          <defaultvalue>DefaultValue_UserOption_StoredProcedureDeletePrefix</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_StoredProcedureDeletePrefix</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>StoredProcedureInsertPrefix</variablename>
          <type>String</type>
          <text>Stored Procedure Create Prefix</text>
          <description>Stored Procedure Create Prefix</description>
          <category>Prefixes</category>
          <defaultvalue>DefaultValue_UserOption_StoredProcedureInsertPrefix</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_StoredProcedureInsertPrefix</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>StoredProcedureSelectPrefix</variablename>
          <type>String</type>
          <text>Stored Procedure Read Prefix</text>
          <description>Stored Procedure Read Prefix</description>
          <category>Prefixes</category>
          <defaultvalue>DefaultValue_UserOption_StoredProcedureSelectPrefix</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_StoredProcedureSelectPrefix</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>StoredProcedureUpdatePrefix</variablename>
          <type>String</type>
          <text>Stored Procedure Update Prefix</text>
          <description>Stored Procedure Update Prefix</description>
          <category>Prefixes</category>
          <defaultvalue>DefaultValue_UserOption_StoredProcedureUpdatePrefix</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_StoredProcedureUpdatePrefix</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>UseLazyLoad</variablename>
          <type>Boolean</type>
          <text>Use Lazy Load</text>
          <description>Lazy load related objects</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_UseLazyLoad</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_UseLazyLoad</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>UseStaticBLLMethods</variablename>
          <type>Boolean</type>
          <text>Use Static BLL Methods</text>
          <description>Use Static BLL Methods</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_UseStaticBLLMethods</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_UseStaticBLLMethods</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>UseStoredProcedures</variablename>
          <type>Boolean</type>
          <text>Use Stored Procedures</text>
          <description>Use Stored Procedures</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_UseStoredProcedures</defaultvalue>
          <iteratorname />
          <validatorfunction />
          <displaytouserfunction>DisplayToUser_UserOption_UseStoredProcedures</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value />
          </values>
        </option>
        <option>
          <variablename>VisualStudioVersion</variablename>
          <type>Enum</type>
          <text>Visual Studio version.</text>
          <description>Version of Visual Studio to target.</description>
          <category>Options</category>
          <defaultvalue>DefaultValue_UserOption_VisualStudioVersion</defaultvalue>
          <iteratorname />
          <validatorfunction>Validate_UserOption_VisualStudioVersion</validatorfunction>
          <displaytouserfunction>DisplayToUser_UserOption_VisualStudioVersion</displaytouserfunction>
          <resetpersession>False</resetpersession>
          <isvalidvalue>True</isvalidvalue>
          <displaytouservalue>True</displaytouservalue>
          <values>
            <value>2005</value>
            <value>2008</value>
          </values>
        </option>
      </options>
      <defaultvaluefunctions>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_ArchiveDBRecordFieldName</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_IncludeBulkUpdate</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_IncludeModelColumnConstants</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_ProjectName</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_SkipIDAL</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_StoredProcedureDeletePrefix</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_StoredProcedureInsertPrefix</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_StoredProcedureSelectPrefix</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_StoredProcedureUpdatePrefix</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_UseLazyLoad</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_UseStaticBLLMethods</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_UseStoredProcedures</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_BLLGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_DALFactoryGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_DBUtilityGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_IDALGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_ModelGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_PackageGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_SQLServerDALGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_VisualStudioVersion</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
        <defaultvaluefunction>
          <objecttype>System.Boolean</objecttype>
          <propertyname>DisplayToUser_UserOption_SolutionGUID</propertyname>
          <usecustomcode>True</usecustomcode>
          <functiontype>DisplayToUser</functiontype>
          <isforuseroption>False</isforuseroption>
          <parametertypes />
        </defaultvaluefunction>
      </defaultvaluefunctions>
      <rootoutput>
        <rootfolder>
          <script filename="#UserOptions.ProjectName#.csproj" scriptname="GetCombinedProj" iteratorname="ArchAngel.Providers.Database.Model.Database[]" id="8c714f4f3040434b9ed737d168ce8763" outputs="Solution_Files" />
          <script filename="#UserOptions.ProjectName#.sln" scriptname="GetCombinedSolution" iteratorname="" id="d0e23abca14941aba205fd79da00d42f" outputs="Solution_Files" />
          <folder id="aa206af5e0b344a8b05565bb4204f26b" name="ROOT" iteratortype="" outputs="" />
          <folder id="d21f1d5eb092445c8712e5edc04d6d5a" name="BLL" iteratortype="" outputs="BLL,Solution_Files">
            <script filename="#iterator.Alias#.cs" scriptname="GetBLLScriptObject" iteratorname="ArchAngel.Providers.Database.Model.ScriptObject" id="3026a250c460451692184c8ec6d4456d" outputs="BLL" />
            <folder id="4e4e8d3dbbbf4030a52a91a934942f12" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupBLL_AssemblyInfo_cs" iteratorname="" id="6eae7dc5653842528ed93e5fadfd7025" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="bf75106db6fc4f17bb4f48e493aa8e25" name="DALFactory" iteratortype="" outputs="DALFactory,Solution_Files">
            <script filename="DataAccess.cs" scriptname="GetDALFactory" iteratorname="ArchAngel.Providers.Database.Model.Database[]" id="4ed3362ded7f4adc97aa5cdb702eac66" outputs="DALFactory" />
            <folder id="d8954a23291e4d54bc71cfbb4cbcc8c8" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupDALFactory_AssemblyInfo_cs" iteratorname="" id="afb865130bc649fd84ee24635f4b1765" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="b0d453984e584c8ebe0721cc598b87b0" name="IDAL" iteratortype="" outputs="IDAL,Solution_Files">
            <script filename="I#iterator.Alias#.cs" scriptname="GetIDALScriptObject" iteratorname="ArchAngel.Providers.Database.Model.ScriptObject" id="9b3fbc7aff444f03b6377aee78fb10ba" outputs="IDAL" />
            <folder id="a8ea707d111c4c688633c16b172fc683" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupIDAL_AssemblyInfo_cs" iteratorname="" id="97aa4377dd1f4b5883a63a0a2333394f" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="78a6118baa5d4cf2949cb5fb217b0c42" name="Model" iteratortype="" outputs="Model,Solution_Files">
            <script filename="#iterator.Alias#Info.cs" scriptname="GetModelScriptObject" iteratorname="ArchAngel.Providers.Database.Model.ScriptObject" id="d2a3fb6602ac40dd8e0b2046ed18c1bf" outputs="Model" />
            <script filename="Compare.cs" scriptname="GetCompareClass" iteratorname="" id="a6ea69cd765b4831b74fdaeb89c169c8" outputs="Model" />
            <folder id="792119d0a34b47c9b54ab1d00e6e508d" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupModel_AssemblyInfo_cs" iteratorname="" id="2f7c869ae335480b867fbb81eec9ae39" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="fcccbb5f304b4bc9b28e8162c173c046" name="SQLServerDAL" iteratortype="" outputs="Solution_Files,SQLServerDAL">
            <script filename="#iterator.Alias#.cs" scriptname="GetSQLServerDALScriptObject" iteratorname="ArchAngel.Providers.Database.Model.ScriptObject" id="d6f3ea95c7574cb09fea667025c962c8" outputs="SQLServerDAL" />
            <folder id="33dbbaec59c14d0da551966cd3785cf6" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupSQLServerDAL_AssemblyInfo_cs" iteratorname="" id="aa02ca164dab429b935ea07b6aa8023c" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="81f2705f1e774fa68579e7a630ba3a6f" name="DBUtility" iteratortype="" outputs="DBUtility,Solution_Files">
            <script filename="SQLHelper.cs" scriptname="GetSetupDBUtility_SQLHelper_cs" iteratorname="ArchAngel.Providers.Database.Model.Database[]" id="2010e36cc0c344b18b7859884dbd479d" outputs="DBUtility,Solution_Files" />
            <folder id="6159cbc0053b4bcbb64ac0e7c94ce67a" name="Properties" iteratortype="" outputs="Solution_Files">
              <script filename="AssemblyInfo.cs" scriptname="GetSetupDBUtility_AssemblyInfo_cs" iteratorname="" id="e04d592d02f942fc99e52d1074a75474" outputs="Solution_Files" />
            </folder>
          </folder>
          <folder id="d43a4cb1d1db49a1b2bf86bf149b5d47" name="StoredProcedure" iteratortype="" outputs="Solution_Files,StoredProcedure">
            <script filename="#iterator.Alias#.sql" scriptname="GetStoredProcedure" iteratorname="ArchAngel.Providers.Database.Model.ScriptObject" id="cef8f26dd5b24e4a963734abb7691544" outputs="StoredProcedure" />
            <script filename="All#iterator.Name#StoredProcedures.sql" scriptname="GetStoredProcedureProject" iteratorname="ArchAngel.Providers.Database.Model.Database" id="35a8e28043254bdeadbe0267d95f9770" outputs="StoredProcedure" />
          </folder>
          <folder id="540d233112f141c5b218bb3c4bf495bc" name="Properties" iteratortype="" outputs="BLL">
            <script filename="AssemblyInfo.cs" scriptname="GetCombined_AssemblyInfo_cs" iteratorname="" id="9fb86117abde4b4c8221935dd1ecbf2c" outputs="BLL" />
          </folder>
        </rootfolder>
      </rootoutput>
      <actions>
        <action typename="ArchAngel.Actions.GenerationStepAction" />
      </actions>
    </project>
  </config>
  <function name="DefaultValue_UserOption_ArchiveDBRecordFieldName" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (ArchiveDBRecordFieldName)" category="Default Values">return "";</function>
  <function name="DefaultValue_UserOption_BLLGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: BLLGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_DALFactoryGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: DALFactoryGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_DBUtilityGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: DBUtilityGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_IDALGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: IDALGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_IncludeBulkUpdate" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (IncludeBulkUpdate)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_IncludeModelColumnConstants" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (IncludeModelColumnConstants)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_ModelGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: ModelGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_PackageGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: PackageGUID" category="Default Values">return "FAE04EC0-301F-11D3-BF4B-00C04F79EFBC";</function>
  <function name="DefaultValue_UserOption_ProjectName" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (ProjectName)" category="Default Values">return "PetShop2005";</function>
  <function name="DefaultValue_UserOption_SkipIDAL" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (SkipIDAL)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_SolutionGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for User Option: SolutionGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_SQLServerDALGUID" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption: SQLServerDALGUID" category="Default Values">return System.Guid.NewGuid().ToString();</function>
  <function name="DefaultValue_UserOption_StoredProcedureDeletePrefix" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (StoredProcedureDeletePrefix)" category="Default Values">return "spDelete";</function>
  <function name="DefaultValue_UserOption_StoredProcedureInsertPrefix" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (StoredProcedureInsertPrefix)" category="Default Values">return "spInsert";</function>
  <function name="DefaultValue_UserOption_StoredProcedureSelectPrefix" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (StoredProcedureSelectPrefix)" category="Default Values">return "spSelect";</function>
  <function name="DefaultValue_UserOption_StoredProcedureUpdatePrefix" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (StoredProcedureUpdatePrefix)" category="Default Values">return "spUpdate";</function>
  <function name="DefaultValue_UserOption_UseLazyLoad" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (UseLazyLoad)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_UseStaticBLLMethods" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (UseStaticBLLMethods)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_UseStoredProcedures" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for UserOption (UseStoredProcedures)" category="Default Values">return true;</function>
  <function name="DefaultValue_UserOption_VisualStudioVersion" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for User Option: VisualStudioVersion" category="Default Values">return "2005";</function>
  <function name="DisplayToUser_UserOption_ArchiveDBRecordFieldName" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_BLLGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: BLLGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_DALFactoryGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: DALFactoryGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_DBUtilityGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: DBUtilityGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_IDALGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: IDALGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_IncludeBulkUpdate" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_IncludeModelColumnConstants" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_ModelGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: ModelGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_PackageGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: PackageGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_ProjectName" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_SkipIDAL" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_SolutionGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for User Option: SolutionGUID" category="DisplayToUser">return false;</function>
  <function name="DisplayToUser_UserOption_SQLServerDALGUID" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Display to user function for UserOption: SQLServerDALGUID" category="Default Values">return false;</function>
  <function name="DisplayToUser_UserOption_StoredProcedureDeletePrefix" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_StoredProcedureInsertPrefix" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_StoredProcedureSelectPrefix" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_StoredProcedureUpdatePrefix" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_UseLazyLoad" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_UseStaticBLLMethods" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_UseStoredProcedures" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Returns whether the associated UserOption or VirtualProperty should get displayed to the user." category="DisplayToUser">return true;</function>
  <function name="DisplayToUser_UserOption_VisualStudioVersion" returntype="Boolean" istemplatefunction="False" scriptlanguage="CSharp" description="Default value function for User Option: VisualStudioVersion" category="DisplayToUser">return true;</function>
  <function name="GetBLLScriptObject" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />using System;
using System.Collections.Generic;

// References to &lt;%Write(UserOptions.ProjectName);%&gt; specific libraries
using &lt;%Write(UserOptions.ProjectName);%&gt;.Model;&lt;%
if (UserOptions.SkipIDAL)
{%&gt;
using &lt;%Write(UserOptions.ProjectName);%&gt;.SQLServerDAL;&lt;%
}
else
{%&gt;
using &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL;&lt;%
}%&gt;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.BLL
{
	/// &lt;summary&gt;
	/// A business component used to manage &lt;%Write(scriptObject.AliasPlural);%&gt;
	/// The &lt;%Write(UserOptions.ProjectName);%&gt;.Model.&lt;%Write(scriptObject.Alias);%&gt; is used to store
	/// serializable information about a specific &lt;%Write(scriptObject.Alias);%&gt;
	/// &lt;/summary&gt;
	public sealed partial class &lt;%Write(scriptObject.Alias);%&gt;
	{&lt;%
if (!scriptObject.IsUserDefined)
{
	if (UserOptions.SkipIDAL)
	{%&gt;
		// Get an instance of the &lt;%Write(scriptObject.Alias);%&gt; DAL using the DALFactory
        // Making this static will cache the DAL instance after the initial load
        private static readonly SQLServerDAL.&lt;%Write(scriptObject.Alias);%&gt; dal = new SQLServerDAL.&lt;%Write(scriptObject.Alias);%&gt;();&lt;%
	}
	else
	{%&gt;
		// Get an instance of the &lt;%Write(scriptObject.Alias);%&gt; DAL using the DALFactory
        // Making this static will cache the DAL instance after the initial load
        private static readonly I&lt;%Write(scriptObject.Alias);%&gt; dal = &lt;%Write(UserOptions.ProjectName);%&gt;.DALFactory.DataAccess.Create&lt;%Write(scriptObject.Alias);%&gt;();&lt;%
	}
}%&gt;

		/// &lt;summary&gt;
		/// Default constructor
		/// &lt;/summary&gt;
		private &lt;%Write(scriptObject.Alias);%&gt;()
		{
		}&lt;%

foreach (Filter filter in scriptObject.Filters)
{
	if (!filter.IsReturnTypeCollection)
	{%&gt;

		/// &lt;summary&gt;
		/// Search for a specific &lt;%Write(scriptObject.Alias);%&gt; given it's unique contraints
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; business entity&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic() + scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;)
		{&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{
			if (SQLServer.IsDataTypeText(filterColumn.Column))
			{%&gt;
			// Return null if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return null;
			}
&lt;%
			}
		}%&gt;
			// Use the dal to search by unique constraint
			return dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter));%&gt;);
		}&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Search for a specific &lt;%Write(scriptObject.Alias);%&gt; given it's unique contraints
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; business entity&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic() + scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); 
		if (filter.FilterColumns.Length &gt; 0)
		{
			%&gt;, &lt;%
		}%&gt;System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
			foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
			{
				if (SQLServer.IsDataTypeText(filterColumn.Column))
				{%&gt;
			// Return null if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return null;
			}
&lt;%
				}
			}%&gt;
			// Use the dal to search by unique constraint
			return dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter)); if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;trans);
		}&lt;%
		}
	}
	else
	{%&gt;

		/// &lt;summary&gt;
		/// Get a list of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic());%&gt;IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;)
		{&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{
			if (SQLServer.IsDataTypeText(filterColumn.Column))
			{%&gt;
			// Return new if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
			}
&lt;%
			}
		}%&gt;
			// Run a search against the data store
			return dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter));%&gt;);
		}
		
		/// &lt;summary&gt;
		/// Get a list of sorted &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic());%&gt;IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;Sorted(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); if (filter.FilterColumns.Length &gt; 0) { %&gt;, &lt;% } %&gt;string sortExpression)
		{&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{
			if (SQLServer.IsDataTypeText(filterColumn.Column))
			{%&gt;
			// Return new if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
			}
&lt;%
			}
		}%&gt;			
			if (string.IsNullOrEmpty(sortExpression))
            {
				return &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter));%&gt;);
            }

            System.ComponentModel.ListSortDirection listSortDirection = System.ComponentModel.ListSortDirection.Ascending;
            string[] sortExpressionParams = sortExpression.Split(' ');
            string sortFieldName = sortExpressionParams[0];
            if (sortExpressionParams.Length &gt; 1)
            {
                string direction = sortExpressionParams[1];
                if (direction.ToUpper() == "DESC")
                {
                    listSortDirection = System.ComponentModel.ListSortDirection.Descending;
                }
            }

            // Run a search against the data store
            List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt; = (List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter));%&gt;);

            Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; comparer = new Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;(sortFieldName, listSortDirection);
            &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;.Sort(comparer);

            return (IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)&lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;;
		}&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Get a list of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic());%&gt;IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{
			if (SQLServer.IsDataTypeText(filterColumn.Column))
			{%&gt;
			// Return new if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
			}
&lt;%
			}
		}%&gt;
			// Run a search against the data store
			return dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter)); if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;trans);
		}
		
		/// &lt;summary&gt;
		/// Get a list of sorted &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic());%&gt;IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;Sorted(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); if (filter.FilterColumns.Length &gt; 0) { %&gt;, &lt;% } %&gt;string sortExpression, System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{
			if (SQLServer.IsDataTypeText(filterColumn.Column))
			{%&gt;
			// Return new if the string is empty
			if (string.IsNullOrEmpty(&lt;%Write(Script.GetCamelCase(filterColumn.Alias));%&gt;))
			{
				return new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
			}
&lt;%
			}
		}%&gt;			
			if (string.IsNullOrEmpty(sortExpression))
            {
				return &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter)); if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;trans);
            }

            System.ComponentModel.ListSortDirection listSortDirection = System.ComponentModel.ListSortDirection.Ascending;
            string[] sortExpressionParams = sortExpression.Split(' ');
            string sortFieldName = sortExpressionParams[0];
            if (sortExpressionParams.Length &gt; 1)
            {
                string direction = sortExpressionParams[1];
                if (direction.ToUpper() == "DESC")
                {
                    listSortDirection = System.ComponentModel.ListSortDirection.Descending;
                }
            }

            // Run a search against the data store
            List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt; = (List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)dal.&lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueString(filter)); if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;trans);

            Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; comparer = new Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;(sortFieldName, listSortDirection);
            &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;.Sort(comparer);

            return (IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)&lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;;
		}&lt;%
		}
	}
}

if (!scriptObject.IsUserDefined &amp;&amp; (scriptObject.IsTable || scriptObject.IsView) &amp;&amp;
	scriptObject.Filters.Length &gt; 0)
{%&gt;

		/// &lt;summary&gt;
		/// Get a filted list of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="fieldName"&gt;Database Field to filter on&lt;/param&gt;
		/// &lt;param name="operatorValue"&gt;SQL boolean operator (like, =, &lt;, &gt;, &lt;&gt;, &gt;=, &lt;=)&lt;/param&gt;
		/// &lt;param name="fieldValue"&gt;Data to search for&lt;/param&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		public &lt;%Write(GetBLLStatic());%&gt;IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; Get&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter(string fieldName, string operatorValue, string fieldValue, string sortExpression)
		{
			// Return new if the string is empty
			if (string.IsNullOrEmpty(fieldName) || string.IsNullOrEmpty(operatorValue) || string.IsNullOrEmpty(fieldValue))
			{
				return &lt;%Write(scriptObject.Filters[0].Alias);%&gt;Sorted(sortExpression);
			}
			
			if (string.IsNullOrEmpty(sortExpression))
            {
				return dal.Get&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter(fieldName, operatorValue, fieldValue);
            }

            System.ComponentModel.ListSortDirection listSortDirection = System.ComponentModel.ListSortDirection.Ascending;
            string[] sortExpressionParams = sortExpression.Split(' ');
            string sortFieldName = sortExpressionParams[0];
            if (sortExpressionParams.Length &gt; 1)
            {
                string direction = sortExpressionParams[1];
                if (direction.ToUpper() == "DESC")
                {
                    listSortDirection = System.ComponentModel.ListSortDirection.Descending;
                }
            }

            // Run a search against the data store
            List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt; = (List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)dal.Get&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter(fieldName, operatorValue, fieldValue);

            Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; comparer = new Model.SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;(sortFieldName, listSortDirection);
            &lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;.Sort(comparer);
			
			return (IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;)&lt;%Write(Script.GetCamelCase(scriptObject.AliasPlural));%&gt;;
		}&lt;%
}

// Relationships
foreach (Relationship relationship in scriptObject.Relationships)
{
	string primaryAlias = relationship.PrimaryScriptObject.Alias;
	string foreignAlias = relationship.ForeignScriptObject.Alias;
	
	if (//relationship.GetType() == typeof(OneToOneRelationship) ||
		relationship.GetType() == typeof(ManyToOneRelationship))
	{%&gt;

		/// &lt;summary&gt;
		/// Fill a specific &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which a specific &lt;%Write(relationship.Alias);%&gt; is added&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;)
		{
			// Validate &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt; == null)
			{
				return;
			}
			
			dal.Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;);&lt;%
		if (relationship.ForeignScriptObject.Relationships.Length &gt; 0)
		{%&gt;
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;.&lt;%Write(relationship.Alias);%&gt; != null)
			{
				&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;.&lt;%Write(relationship.Alias);%&gt;.EnableRelationshipLazyLoad = false;
			}&lt;%
		}%&gt;
		}&lt;%
	}
	
	if (relationship.GetType() == typeof(OneToManyRelationship) ||
		relationship.GetType() == typeof(ManyToManyRelationship))
	{%&gt;
	
		/// &lt;summary&gt;
		/// Fill &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which &lt;%Write(relationship.Alias);%&gt; are added&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;)
		{
			// Validate &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt; == null)
			{
				return;
			}
			
			dal.Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;);&lt;%
		if (relationship.ForeignScriptObject.Relationships.Length &gt; 0)
		{
			string relationshipObjName = Script.GetSingular(Script.GetCamelCase(relationship.Alias));
			
			if (Script.GetCamelCase(primaryAlias) == relationshipObjName)
			{
				relationshipObjName = "new"+ relationshipObjName;
			}%&gt;
			foreach (&lt;%=foreignAlias;%&gt;Info &lt;%=relationshipObjName;%&gt; in &lt;%=Script.GetCamelCase(primaryAlias);%&gt;.&lt;%=relationship.Alias;%&gt;)
			{
				if (&lt;%=relationshipObjName;%&gt; != null)
				{
					&lt;%=relationshipObjName;%&gt;.EnableRelationshipLazyLoad = false;
				}
			}&lt;%
		}%&gt;
		}&lt;%
	}
}

if (!scriptObject.IsUserDefined &amp;&amp; scriptObject.IsTable)
{
	Table table = (Table)scriptObject;%&gt;

		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the new &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{&lt;%
			if (primaryKeyColumn.IsIdentity)
			{%&gt;
				return -1;
			}
&lt;%
			}
			else
			{%&gt;
				return;
			}
&lt;%
			}
		}
	}%&gt;
			// Send the new &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Insert(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);
		}

		/// &lt;summary&gt;
		/// Update an existing &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the &lt;%Write(scriptObject.Alias);%&gt; to be updated&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{
				return;
			}
&lt;%
		}
	}%&gt;
			// Send the updated &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Update(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);
		}

		/// &lt;summary&gt;
		/// Delete an existing &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the &lt;%Write(scriptObject.Alias);%&gt; to be updated&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{
				return;
			}
&lt;%
		}
	}%&gt;
			// Send the &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Delete(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);
		}&lt;%
		
	if (UserOptions.IncludeBulkUpdate)
	{%&gt;

		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the new &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run insert within&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{&lt;%
			if (primaryKeyColumn.IsIdentity)
			{%&gt;
				return -1;
			}
&lt;%
			}
			else
			{%&gt;
				return;
			}
&lt;%
			}
		}
	}%&gt;
			// Send the new &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Insert(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
		}

		/// &lt;summary&gt;
		/// Update an existing &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the &lt;%Write(scriptObject.Alias);%&gt; to be updated&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{
				return;
			}
&lt;%
		}
	}%&gt;
			// Send the updated &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Update(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
		}

		/// &lt;summary&gt;
		/// Delete an existing &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;A specific &lt;%Write(scriptObject.Alias);%&gt; entity with information about the &lt;%Write(scriptObject.Alias);%&gt; to be updated&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans)
		{&lt;%
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (SQLServer.IsDataTypeText(primaryKeyColumn))
		{%&gt;
			// Validate input
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;.Trim() == string.Empty)
			{
				return;
			}
&lt;%
		}
	}%&gt;
			// Send the &lt;%Write(scriptObject.Alias);%&gt; information to the DAL
			dal.Delete(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
		}
		
		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;param name="customBulkUpdateCallBack"&gt;Call back function to execute&lt;/param&gt;
		/// &lt;/summary&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void BulkUpdate(&lt;%Write(scriptObject.Alias);%&gt;Info.CustomBulkUpdateCallBack customBulkUpdateCallBack)
		{
			// Send the &lt;%Write(scriptObject.Alias);%&gt; information to the DAL to be inserted/updated/deleted
			dal.BulkUpdate(customBulkUpdateCallBack);
		}
		
		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;/summary&gt;
		/// &lt;param name="original&lt;%Write(scriptObject.AliasPlural);%&gt;"&gt;Original Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		/// &lt;param name="modified&lt;%Write(scriptObject.AliasPlural);%&gt;"&gt;Modified Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		public &lt;%Write(GetBLLStatic());%&gt;void BulkUpdate(IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; original&lt;%Write(scriptObject.AliasPlural);%&gt;, IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; modified&lt;%Write(scriptObject.AliasPlural);%&gt;)
		{				
			// Send the &lt;%Write(scriptObject.Alias);%&gt; information to the DAL to be inserted/updated/deleted
			dal.BulkUpdate(original&lt;%Write(scriptObject.AliasPlural);%&gt;, modified&lt;%Write(scriptObject.AliasPlural);%&gt;);
		}&lt;%
	}
}%&gt;
	}
}</function>
  <function name="GetBLLStatic" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="" category="">if (UserOptions.UseStaticBLLMethods)
	return ("static ");
else
	return ("");</function>
  <function name="GetCombined_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CombinedProject")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("CombinedProject")]
[assembly: AssemblyCopyright("Copyright ©  2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.BLLGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]</function>
  <function name="GetCombinedProj" returntype="XML" istemplatefunction="True" scriptlanguage="CSharp" description="Creates the Visual Studio project file." category="">
    <parameter name="databases" type="ArchAngel.Providers.Database.Model.Database[]" modifiers="" />&lt;%
string toolsVersion = "";

if (UserOptions.VisualStudioVersion == "2008")
{
	toolsVersion =  " ToolsVersion=\"3.5\"";
}
%&gt;&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&lt;%=toolsVersion%&gt;&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
    &lt;ProductVersion&gt;8.0.50727&lt;/ProductVersion&gt;
    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
    &lt;ProjectGuid&gt;{&lt;%Write(UserOptions.BLLGUID.ToString().ToUpper());%&gt;}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;AppDesignerFolder&gt;Properties&lt;/AppDesignerFolder&gt;
    &lt;RootNamespace&gt;&lt;%Write(UserOptions.ProjectName);%&gt;&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;&lt;%Write(UserOptions.ProjectName);%&gt;&lt;/AssemblyName&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="System.Data" /&gt;
    &lt;Reference Include="System.Xml" /&gt;
	&lt;Reference Include="System.Configuration" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;&lt;!-- BLL ItemGroup --&gt;&lt;%
foreach (Database database in databases)
{
	foreach(Table scriptObject in database.EnabledTables)
	{%&gt;
	&lt;Compile Include="BLL\\&lt;%Write(scriptObject.Alias);%&gt;.cs" /&gt;&lt;%
	}
	
	foreach(View view in database.EnabledViews)
	{%&gt;
	&lt;Compile Include="BLL\\&lt;%Write(view.Alias);%&gt;.cs" /&gt;&lt;%
	}
	
	foreach(ArchAngel.Providers.Database.Model.StoredProcedure storedProcedure in database.EnabledStoredProcedures)
	{%&gt;
	&lt;Compile Include="BLL\\&lt;%Write(storedProcedure.Alias);%&gt;.cs" /&gt;&lt;%
	}
}%&gt;
  &lt;/ItemGroup&gt;&lt;%
if (!UserOptions.SkipIDAL)
{%&gt;  
  &lt;ItemGroup&gt;&lt;!-- DALFactory ItemGroup --&gt;
	&lt;Compile Include="DALFactory\DataAccess.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;&lt;!-- IDAL ItemGroup --&gt;&lt;%
	foreach (Database database in databases)
	{
		foreach(Table scriptObject in database.EnabledTables)
		{
			if (scriptObject.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="IDAL\I&lt;%Write(scriptObject.Alias);%&gt;.cs" /&gt;&lt;%
		}
	
		foreach(View view in database.EnabledViews)
		{	
			if (view.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="IDAL\I&lt;%Write(view.Alias);%&gt;.cs" /&gt;&lt;%
		}

		foreach(ArchAngel.Providers.Database.Model.StoredProcedure storedProcedure in database.EnabledStoredProcedures)
		{
			if (storedProcedure.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="IDAL\I&lt;%Write(storedProcedure.Alias);%&gt;.cs" /&gt;&lt;%
		}
	}%&gt;
  &lt;/ItemGroup&gt;&lt;%
 }%&gt;
  &lt;ItemGroup&gt;&lt;!-- Model ItemGroup --&gt;
	&lt;Compile Include="Model\Compare.cs" /&gt;&lt;%
foreach (Database database in databases)
{
	foreach(Table scriptObject in database.EnabledTables)
	{%&gt;
	&lt;Compile Include="Model\\&lt;%Write(scriptObject.Alias);%&gt;Info.cs" /&gt;&lt;%
	}
	
	foreach(View view in database.EnabledViews)
	{%&gt;
	&lt;Compile Include="Model\\&lt;%Write(view.Alias);%&gt;Info.cs" /&gt;&lt;%
	}
	
	foreach(ArchAngel.Providers.Database.Model.StoredProcedure storedProcedure in database.EnabledStoredProcedures)
	{%&gt;
	&lt;Compile Include="Model\\&lt;%Write(storedProcedure.Alias);%&gt;Info.cs" /&gt;&lt;%
	}	
}%&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;&lt;!-- SQLServerDAL ItemGroup --&gt;&lt;%
foreach (Database database in databases)
{
	foreach(Table scriptObject in database.EnabledTables)
	{
		if (scriptObject.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="SQLServerDAL\\&lt;%Write(scriptObject.Alias);%&gt;.cs" /&gt;&lt;%
	}
	
	foreach(View view in database.EnabledViews)
	{
		if (view.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="SQLServerDAL\\&lt;%Write(view.Alias);%&gt;.cs" /&gt;&lt;%
	}

	foreach(ArchAngel.Providers.Database.Model.StoredProcedure storedProcedure in database.EnabledStoredProcedures)
	{
		if (storedProcedure.IsUserDefined) { continue; }
	%&gt;
	&lt;Compile Include="SQLServerDAL\\&lt;%Write(storedProcedure.Alias);%&gt;.cs" /&gt;&lt;%
	}
}%&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;&lt;!-- DBUtility ItemGroup --&gt;
	&lt;Compile Include="DBUtility\SQLHelper.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;&lt;!-- CombinedProject ItemGroup --&gt;
    &lt;Compile Include="Properties\AssemblyInfo.cs" /&gt;
  &lt;/ItemGroup&gt;  
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
  &lt;!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  &lt;Target Name="BeforeBuild"&gt;
  &lt;/Target&gt;
  &lt;Target Name="AfterBuild"&gt;
  &lt;/Target&gt;
  --&gt;
&lt;/Project&gt;</function>
  <function name="GetCombinedSolution" returntype="Plain text" istemplatefunction="True" scriptlanguage="CSharp" description="Creates the Visual Studio solution file." category="">&lt;%
string vsFileVersion;
string vsVersion;

switch (UserOptions.VisualStudioVersion)
{
	case "2008":
		vsFileVersion = "10.00";
		vsVersion = "2008";
		break;
	case "2005":
	default:
		vsFileVersion = "9.00";
		vsVersion = "2005";
		break;
}
%&gt;Microsoft Visual Studio Solution File, Format Version &lt;%=vsFileVersion%&gt;
# Visual Studio &lt;%=vsVersion%&gt;
Project("{&lt;%=UserOptions.PackageGUID%&gt;}") = "&lt;%=UserOptions.ProjectName%&gt;", "&lt;%=UserOptions.ProjectName%&gt;.csproj", "{&lt;%=UserOptions.SolutionGUID%&gt;}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{&lt;%=UserOptions.SolutionGUID%&gt;}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{&lt;%=UserOptions.SolutionGUID%&gt;}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{&lt;%=UserOptions.SolutionGUID%&gt;}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{&lt;%=UserOptions.SolutionGUID%&gt;}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
</function>
  <function name="GetCompareClass" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.Model
{
    /// &lt;summary&gt;
    /// Summary description for Compare
    /// &lt;/summary&gt;
    public class SortComparer&lt;T&gt; : IComparer&lt;T&gt;
    {
        private ListSortDescriptionCollection _listSortDescriptionCollection;
        private PropertyDescriptor _propertyDescriptor;
        private ListSortDirection _listSortDirection;

        public SortComparer(string fieldName, ListSortDirection listSortDirection)
        {
            _propertyDescriptor = TypeDescriptor.GetProperties(typeof(T))[fieldName];
            _listSortDirection = listSortDirection;
        }

        public SortComparer(PropertyDescriptor propertyDescriptor, ListSortDirection listSortDirection)
        {
            _propertyDescriptor = propertyDescriptor;
            _listSortDirection = listSortDirection;
        }

        public SortComparer(string[] fieldNames, ListSortDirection listSortDirection)
        {
            List&lt;ListSortDescription&gt; listSortDescriptions = new List&lt;ListSortDescription&gt;();
            foreach (string fieldName in fieldNames)
            {
                PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(typeof(T))[fieldName];
                ListSortDescription listSortDescription = new ListSortDescription(propertyDescriptor, listSortDirection);
                listSortDescriptions.Add(listSortDescription);
            }

            _listSortDescriptionCollection = new ListSortDescriptionCollection((ListSortDescription[])listSortDescriptions.ToArray());

        }

        public SortComparer(ListSortDescriptionCollection listSortDescriptionCollection)
        {
            _listSortDescriptionCollection = listSortDescriptionCollection;
        }

        int IComparer&lt;T&gt;.Compare(T x, T y)
        {
            if (_propertyDescriptor != null) // Simple sort
            {
                object xValue = _propertyDescriptor.GetValue(x);
                object yValue = _propertyDescriptor.GetValue(y);
                return CompareValues(xValue, yValue, _listSortDirection);
            }
            else if (_listSortDescriptionCollection != null &amp;&amp; _listSortDescriptionCollection.Count &gt; 0)
            {
                return RecursiveCompareInternal(x, y, 0);
            }
            else
            {
                return 0;
            }
        }

        private int CompareValues(object xValue, object yValue, ListSortDirection listSortDirection)
        {
            int retValue = 0;
			
			if (xValue == null &amp;&amp; yValue == null)
            {
                return retValue;
            }
			
            if (xValue is IComparable) // Can ask the x value
            {
                retValue = ((IComparable)xValue).CompareTo(yValue);
            }
            else if (yValue is IComparable) //Can ask the y value
            {
                retValue = ((IComparable)yValue).CompareTo(xValue);
            }
            else if (!xValue.Equals(yValue))    // not comparable, compare String representations
            {
                retValue = xValue.ToString().CompareTo(yValue.ToString());
            }

            if (listSortDirection == ListSortDirection.Ascending)
            {
                return retValue;
            }
            else
            {
                return retValue * -1;
            }
        }

        private int RecursiveCompareInternal(T x, T y, int index)
        {
            if (index &gt;= _listSortDescriptionCollection.Count)
            {
                return 0; // termination condition
            }

            ListSortDescription listSortDesc = _listSortDescriptionCollection[index];
            object xValue = listSortDesc.PropertyDescriptor.GetValue(x);
            object yValue = listSortDesc.PropertyDescriptor.GetValue(y);

            int retValue = CompareValues(xValue, yValue, listSortDesc.SortDirection);
            if (retValue == 0)
            {
                return RecursiveCompareInternal(x, y, ++index);
            }
            else
            {
                return retValue;
            }
        }
    }
}</function>
  <function name="GetDALFactory" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="databases" type="ArchAngel.Providers.Database.Model.Database[]" modifiers="" />using System.Reflection;
using System.Configuration;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.DALFactory
{
	/// &lt;summary&gt;
    /// This class is implemented following the Abstract Factory pattern to create the DAL implementation
    /// specified from the configuration file
    /// &lt;/summary&gt;
	public sealed class DataAccess
	{
		// Look up the DAL implementation we should be using
        private static readonly string path = ConfigurationManager.AppSettings["DAL"];
        
		/// &lt;summary&gt;
		/// Default constructor
		/// &lt;/summary&gt;
		private DataAccess()
		{
		}&lt;%
foreach (Database database in databases)
{
		foreach(Table scriptObject in database.Tables)
		{%&gt;
		
		public static &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(scriptObject.Alias);%&gt; Create&lt;%Write(scriptObject.Alias);%&gt;()
		{
			string className = path + ".&lt;%Write(scriptObject.Alias);%&gt;";
			return (&lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(scriptObject.Alias);%&gt;)Assembly.Load(path).CreateInstance(className);
		}&lt;%
		}
		
		foreach(View view in database.Views)
		{%&gt;
		
		public static &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(view.Alias);%&gt; Create&lt;%Write(view.Alias);%&gt;()
		{
			string className = path + ".&lt;%Write(view.Alias);%&gt;";
			return (&lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(view.Alias);%&gt;)Assembly.Load(path).CreateInstance(className);
		}&lt;%
		}
		
		foreach(ArchAngel.Providers.Database.Model.StoredProcedure storedProcedure in database.StoredProcedures)
		{%&gt;
		
		public static &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(storedProcedure.Alias);%&gt; Create&lt;%Write(storedProcedure.Alias);%&gt;()
		{
			string className = path + ".&lt;%Write(storedProcedure.Alias);%&gt;";
			return (&lt;%Write(UserOptions.ProjectName);%&gt;.IDAL.I&lt;%Write(storedProcedure.Alias);%&gt;)Assembly.Load(path).CreateInstance(className);
		}&lt;%
		}
}%&gt;
	}
}</function>
  <function name="GetDeleteInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />&lt;%
Column archiveColumn = (Column)table.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (archiveColumn == null)
{
	%&gt;DELETE FROM &lt;%Write(SQLServer.GetSQLName(table.Name));
}
else
{
	%&gt;UPDATE &lt;%Write(SQLServer.GetSQLName(table.Name));%&gt; SET Archive = 1&lt;%
}

%&gt; WHERE&lt;%

for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
{
	Column masterPrimaryKeyColumn = table.PrimaryKeyColumns[i];
	Column primaryKeyColumn = table.PrimaryKeyColumns[i];
	
	%&gt; &lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	if (i &lt; table.PrimaryKeyColumns.Length - 1)
	{
		%&gt; AND&lt;%
	}
}%&gt;</function>
  <function name="GetDeleteSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />CREATE PROCEDURE [dbo].[&lt;%Write(UserOptions.StoredProcedureDeletePrefix + table.Alias);%&gt;]&lt;%

for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
{
	Column primaryKeyColumn = table.PrimaryKeyColumns[i];%&gt;
@&lt;%Write(primaryKeyColumn.Alias + " " + SQLServer.GetSQLDataType(primaryKeyColumn));
	if (i &lt; table.PrimaryKeyColumns.Length - 1)
	{
		%&gt;,&lt;%
	}
}%&gt;

AS&lt;%

Column archiveColumn = (Column)table.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (archiveColumn == null)
{%&gt;
	
	DELETE
	FROM
		&lt;%Write(SQLServer.GetSQLName(table.Name));
}
else
{%&gt;
	UPDATE &lt;%Write(SQLServer.GetSQLName(table.Name));%&gt;
	SET 
		Archive = 1&lt;%
}%&gt;
	WHERE&lt;%
for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
{
	Column masterPrimaryKeyColumn = table.PrimaryKeyColumns[i];
	Column primaryKeyColumn = table.PrimaryKeyColumns[i];%&gt;
		&lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	if (i &lt; table.PrimaryKeyColumns.Length - 1)
	{
		%&gt; AND&lt;%
	}
}%&gt;</function>
  <function name="GetIDALScriptObject" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />using System;
using System.Collections.Generic;

// References to &lt;%Write(UserOptions.ProjectName);%&gt; specific libraries
using &lt;%Write(UserOptions.ProjectName);%&gt;.Model;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL
{
	/// &lt;summary&gt;
	/// Interface for the &lt;%Write(scriptObject.Alias);%&gt; Data Access Layer
	/// &lt;/summary&gt;
	public interface I&lt;%Write(scriptObject.Alias);%&gt;
	{&lt;%

foreach (Filter filter in scriptObject.Filters)
{
	if (!filter.IsReturnTypeCollection)
	{%&gt;

		/// &lt;summary&gt;
		/// Get a specific &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Unique Constraint&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/returns&gt;
		&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;);&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Get a specific &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;&lt;%
			foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
			{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Unique Constraint&lt;/param&gt;&lt;%
			}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/returns&gt;
		&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); if (filter.FilterColumns.Length &gt; 0)	{%&gt;, &lt;%}%&gt;System.Data.SqlClient.SqlTransaction trans);&lt;%
		}
	}
	else
	{%&gt;

		/// &lt;summary&gt;
		/// Get a list of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;);&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Get a list of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
			foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
			{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
			}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;Arraylist of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/returns&gt;
		IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); if (filter.FilterColumns.Length &gt; 0)	{%&gt;, &lt;%}%&gt;System.Data.SqlClient.SqlTransaction trans);&lt;%
		}
	}
}

if (scriptObject.IsTable || scriptObject.IsView)
{%&gt;

		/// &lt;summary&gt;
		/// Get a filtered collection of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="fieldName"&gt;Database Field to filter on&lt;/param&gt;
		/// &lt;param name="operatorValue"&gt;SQL boolean operator (like, =, &lt;, &gt;, &lt;&gt;, &gt;=, &lt;=)&lt;/param&gt;
		/// &lt;param name="fieldValue"&gt;Data to search for&lt;/param&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt; ArrayList&lt;/returns&gt;
		IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; Get&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter(string fieldName, string operatorValue, string fieldValue);&lt;%
}

// Relationships
foreach (Relationship relationship in scriptObject.Relationships)
{
	string primaryAlias = relationship.PrimaryScriptObject.Alias;
	
	if (//relationship.GetType() == typeof(OneToOneRelationship) ||
		relationship.GetType() == typeof(ManyToOneRelationship))
	{%&gt;

		/// &lt;summary&gt;
		/// Fill a specific &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which a specific &lt;%Write(relationship.Alias);%&gt; is added&lt;/param&gt;
		void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;);&lt;%
	}
	
	if (relationship.GetType() == typeof(OneToManyRelationship) ||
		relationship.GetType() == typeof(ManyToManyRelationship))
	{%&gt;
	
		/// &lt;summary&gt;
		/// Fill &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which &lt;%Write(relationship.Alias);%&gt; are added&lt;/param&gt;
		void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;);&lt;%
	}
}

if (scriptObject.IsTable)
{
Table table = (Table)scriptObject;
%&gt;

		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt; into the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);

		/// &lt;summary&gt;
		/// Update a specific &lt;%Write(scriptObject.Alias);%&gt; in the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);

		/// &lt;summary&gt;
		/// Delete a specific &lt;%Write(scriptObject.Alias);%&gt; from the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);&lt;%
		
	if (UserOptions.IncludeBulkUpdate)
	{%&gt;

		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt; into the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run insert within&lt;/param&gt;
		void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans);

		/// &lt;summary&gt;
		/// Update a specific &lt;%Write(scriptObject.Alias);%&gt; in the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans);

		/// &lt;summary&gt;
		/// Delete a specific &lt;%Write(scriptObject.Alias);%&gt; from the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, System.Data.SqlClient.SqlTransaction trans);

		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;param name="customBulkUpdateCallBack"&gt;Call back function to execute&lt;/param&gt;
		/// &lt;/summary&gt;
		void BulkUpdate(&lt;%Write(scriptObject.Alias);%&gt;Info.CustomBulkUpdateCallBack customBulkUpdateCallBack);
		
		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;/summary&gt;
		/// &lt;param name="original&lt;%Write(scriptObject.AliasPlural);%&gt;"&gt; Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		/// &lt;param name="modified&lt;%Write(scriptObject.AliasPlural);%&gt;"&gt; Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		void BulkUpdate(IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; original&lt;%Write(scriptObject.AliasPlural);%&gt;, IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; modified&lt;%Write(scriptObject.AliasPlural);%&gt;);&lt;%
	}
}%&gt;
	}
}</function>
  <function name="GetInsertInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />&lt;%

Column identityPrimaryKeyColumn = null;
foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
{
	if (primaryKeyColumn.IsIdentity)
	{
		identityPrimaryKeyColumn = primaryKeyColumn;
		break;
	}
}

%&gt;INSERT INTO &lt;%Write(SQLServer.GetSQLName(table.Name));%&gt; (&lt;%
int numColsAdded = 0;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (numColsAdded &gt; 0)
	{
		%&gt;, &lt;%
	}
	Write(SQLServer.GetSQLName(column.Name));
	numColsAdded++;
}

%&gt;) VALUES (&lt;%
numColsAdded = 0;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (numColsAdded &gt; 0)
	{
		%&gt;, &lt;%
	}
	if (column.InPrimaryKey)
	{
		Column masterPrimaryKeyColumn = table.UpdateableColumns[i];
		%&gt;@&lt;%Write(masterPrimaryKeyColumn.Alias);
	}
	else
	{
		%&gt;@&lt;%Write(column.Alias);
	}
	numColsAdded++;
}%&gt;)</function>
  <function name="GetInsertSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />CREATE PROCEDURE [dbo].[&lt;%Write(UserOptions.StoredProcedureInsertPrefix + table.Alias);%&gt;]&lt;%

Column identityPrimaryKeyColumn = null;
foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
{
	if (primaryKeyColumn.IsIdentity)
	{
		identityPrimaryKeyColumn = primaryKeyColumn;
		break;
	}
}
bool isFirstColumn = true;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];

	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (!isFirstColumn)
	{
		Write(",");
	}
	%&gt;
@&lt;%Write(column.Alias + " " + SQLServer.GetSQLDataType(column));
	isFirstColumn = false;
}%&gt;

AS

	INSERT INTO &lt;%Write(SQLServer.GetSQLName(table.Name));%&gt;
		(&lt;%
isFirstColumn = true;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (!isFirstColumn)
	{
		Write(",");
	}
	Write(SQLServer.GetSQLName(column.Name));
	isFirstColumn = false;
}%&gt;)
	VALUES
		(&lt;%
isFirstColumn = true;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (!isFirstColumn)
	{
		Write(",");
	}
	if (column.InPrimaryKey)
	{
		Column masterPrimaryKeyColumn = table.UpdateableColumns[i];
		%&gt;@&lt;%Write(masterPrimaryKeyColumn.Alias);
	}
	else
	{
		%&gt;@&lt;%Write(column.Alias);
	}
	isFirstColumn = false;
}%&gt;)&lt;%

if (identityPrimaryKeyColumn != null)
{%&gt;

	SELECT SCOPE_IDENTITY()&lt;%
}%&gt;</function>
  <function name="GetModelOriginal" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="" category="">return ("original");</function>
  <function name="GetModelScriptObject" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />using System;
using System.Collections.Generic;
using System.Configuration;
using System.Reflection;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.Model
{&lt;%
	if (UserOptions.IncludeModelColumnConstants)
	{%&gt;
	/// &lt;summary&gt;
	/// Column Constants for use by UI components
	/// &lt;/summary&gt;
	public sealed class &lt;%Write(scriptObject.Alias);%&gt;InfoMetaData
	{
		public enum Columns
		{
			&lt;%for (int i = 0; i &lt; scriptObject.Columns.Length; i++)
			{
				Column column = scriptObject.Columns[i];
				Write(column.Alias);
				
				if (i &lt; scriptObject.Columns.Length - 1)
				{
					Write(",");
				}
			}%&gt;
		}
		/// &lt;summary&gt;
		/// Get a column name as a string.
		/// &lt;/summary&gt;
		public static string GetName(Columns column)
		{
			switch (column)
			{
				&lt;%foreach (Column column in scriptObject.Columns)
				{
					%&gt;case Columns.&lt;%=column.Alias%&gt;: return "&lt;%=column.Alias%&gt;";
					&lt;%
				}%&gt;
				default:
					throw new NotImplementedException(string.Format("Switch statement missing case for:{0}", column.ToString()));
			}
		}
		
		/// &lt;summary&gt;
		/// Get the maximum allowable value of text-based columns.
		/// &lt;/summary&gt;
		public static int GetMaxLength(Columns column)
		{
			switch (column)
			{
				&lt;%foreach (Column column in scriptObject.Columns)
				{
					%&gt;case Columns.&lt;%=column.Alias%&gt;: return &lt;%=column.Size.ToString()%&gt;;
					&lt;%
				}%&gt;
				default:
					throw new NotImplementedException(string.Format("Switch statement missing case for:{0}", column.ToString()));
			}
		}
	}&lt;%
	}%&gt;
	
	/// &lt;summary&gt;
	/// Business entity used to model a specific &lt;%Write(scriptObject.Alias);%&gt;
	/// &lt;/summary&gt;
	[Serializable]
	public partial class &lt;%Write(scriptObject.Alias);%&gt;Info&lt;%
	
	OneToOneRelationship[] oneToOneRelationships = Script.GetDerivedOneToOneRelationships(scriptObject);
	if (oneToOneRelationships.Length &gt; 1)
	{
		throw new Exception("Template does not support multiple inheritance");
	}
	OneToOneRelationship oneToOneRelationship = null;
	if (oneToOneRelationships.Length == 1)
	{
		oneToOneRelationship = oneToOneRelationships[0];
	}
	
	if (oneToOneRelationship != null)
	{
		%&gt; : &lt;%Write(oneToOneRelationship.ForeignRelationship.Parent.Alias); %&gt;Info&lt;%
	}%&gt;
	{
		// Internal member variables&lt;%

Column[] inheritedColumns = CSharp.GetInheritedColumns(scriptObject);
foreach (Column column in scriptObject.Columns)
{
	Column existingOriginalColumn1 = Script.GetColumnByColumnAlias(inheritedColumns, column.Alias);
	bool columnIsInherited = existingOriginalColumn1 != null;
	
	if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
	{%&gt;
		private &lt;%Write(CSharp.GetDataType(column));%&gt; _&lt;%Write(GetModelOriginal() + column.Alias);%&gt;;&lt;%
	}
	if (!columnIsInherited)
	{%&gt;
		private &lt;%Write(CSharp.GetDataType(column));%&gt; _&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;&lt;%
	}
}

if (UserOptions.UseLazyLoad &amp;&amp; scriptObject.Relationships.Length &gt; 0 &amp;&amp; oneToOneRelationship == null)
{%&gt;

		// Relationships
		private bool _enableRelationshipLazyLoad = true;&lt;%
}

// Relationships
foreach (Relationship relationship in scriptObject.Relationships)
{
	string primaryAlias = relationship.PrimaryScriptObject.Alias;
	string foreignAlias = relationship.ForeignScriptObject.Alias;
	
	if (//relationship.GetType() == typeof(OneToOneRelationship) ||
		relationship.GetType() == typeof(ManyToOneRelationship))
	{%&gt;
		private &lt;%Write(foreignAlias);%&gt;Info _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;;&lt;%
	}
	
	if (relationship.GetType() == typeof(OneToManyRelationship) ||
		relationship.GetType() == typeof(ManyToManyRelationship))
	{%&gt;
		private &lt;%Write(foreignAlias);%&gt;Info[] _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;;&lt;%
	}
}

if (UserOptions.IncludeBulkUpdate &amp;&amp; oneToOneRelationship == null)
{%&gt;

		/// &lt;summary&gt;
		/// Bulk update call back function
		/// &lt;/summary&gt;
		/// &lt;param name="trans"&gt;Transaction to run bulk update within&lt;/param&gt;
		public delegate void CustomBulkUpdateCallBack(System.Data.SqlClient.SqlTransaction trans);&lt;%
}

// Used only for adding blank row in UI ButtonAdd_Click
if (true || scriptObject.IsView ||
	scriptObject.IsStoredProcedure)
{%&gt;

		/// &lt;summary&gt;
		/// Default constructor
		/// &lt;/summary&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info()
		{
		}

		/// &lt;summary&gt;
		/// Constructor with specified initial values
		/// &lt;/summary&gt;&lt;%
	
	Column[] selectColumns = CSharp.GetSelectColumns(scriptObject);
	Column[] baseColumns = CSharp.GetBaseColumns(scriptObject);
	
	foreach (Column column in selectColumns)
	{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;"&gt;&lt;%Write(column.Alias);%&gt; Property&lt;/param&gt;&lt;%	
	}%&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%Write(CSharp.GetKeyValueStringWithDataType(selectColumns));%&gt;)&lt;%
	if (oneToOneRelationship != null)
	{%&gt;
			: base(&lt;%Write(CSharp.GetKeyValueString(baseColumns));%&gt;)&lt;%
	}%&gt;
		{&lt;%
	foreach (Column column in scriptObject.Columns)
	{
		if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
		{%&gt;
			this._&lt;%Write(GetModelOriginal() + column.Alias);%&gt; = &lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;&lt;%
		}
		Column existingOriginalColumn1 = Script.GetColumnByColumnAlias(inheritedColumns, column.Alias);
		bool columnIsInherited = existingOriginalColumn1 != null;
		
		if (!columnIsInherited)
		{%&gt;
			this._&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; = &lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;&lt;%
		}
	}%&gt;
		}&lt;%

	if (scriptObject.IsTable)
	{
		Table table = (Table)scriptObject;
		Column[] updateColumns = CSharp.GetUpdateColumns(table);
	
		if (!table.IsUserDefined &amp;&amp; updateColumns.Length != selectColumns.Length)
		{%&gt;
	
		/// &lt;summary&gt;
		/// Constructor with specified initial values
		/// &lt;/summary&gt;&lt;%
		
			Column[] baseUpdateColumns = CSharp.GetBaseUpdateColumns(scriptObject);	
		
			foreach (Column column in updateColumns)
			{
				if (column.InPrimaryKey)
				{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;"&gt;Unique identifier&lt;/param&gt;&lt;%
				}
				else
				{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;"&gt;&lt;%Write(column.Alias);%&gt; Property&lt;/param&gt;&lt;%	
				}
			}%&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%Write(CSharp.GetKeyValueStringWithDataType(updateColumns));%&gt;)&lt;%
			if (oneToOneRelationship != null)
			{%&gt;
			: base(&lt;%Write(CSharp.GetKeyValueString(baseUpdateColumns));%&gt;)&lt;%
			}%&gt;
		{&lt;%
			foreach (Column column in updateColumns)
			{
				if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
				{%&gt;
			this._&lt;%Write(GetModelOriginal() + column.Alias);%&gt; = &lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;&lt;%
				}%&gt;
			this._&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; = &lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;&lt;%
			}%&gt;
		}&lt;%
		}
	
		if (table.PrimaryKeyColumns.Length != selectColumns.Length &amp;&amp; table.UpdateableColumns.Length != table.PrimaryKeyColumns.Length)
		{%&gt;

		/// &lt;summary&gt;
		/// Constructor for primary key values
		/// &lt;/summary&gt;&lt;%
			foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
			{%&gt;
		/// &lt;param name="&lt;%Write(primaryKeyColumn.Alias);%&gt;"&gt;Unique identifier&lt;/param&gt;&lt;%
			}%&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%Write(CSharp.GetKeyValueStringWithDataType(table.PrimaryKeyColumns));%&gt;)&lt;%
			if (oneToOneRelationship != null)
			{%&gt;
			: base(&lt;%Write(CSharp.GetKeyValueString(oneToOneRelationship.ForeignRelationship.PrimaryColumns));%&gt;)&lt;%
			}%&gt;
		{&lt;%
			foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
			{			
				if (!primaryKeyColumn.IsIdentity)
				{%&gt;
			this._&lt;%Write(GetModelOriginal() + primaryKeyColumn.Alias);%&gt; = &lt;%Write(Script.GetCamelCase(primaryKeyColumn.Alias));%&gt;;&lt;%
				}
				Column existingOriginalColumn1 = Script.GetColumnByColumnAlias(inheritedColumns, primaryKeyColumn.Alias);
				bool columnIsInherited = existingOriginalColumn1 != null;
			
				if (!columnIsInherited)
				{%&gt;
			this._&lt;%Write(Script.GetCamelCase(primaryKeyColumn.Alias));%&gt; = &lt;%Write(Script.GetCamelCase(primaryKeyColumn.Alias));%&gt;;&lt;%
				}
			}%&gt;
		}&lt;%
		}
	}

	foreach (Column column in scriptObject.Columns)
	{
		Column[] overrideColumns = CSharp.GetOverrideColumns(scriptObject);
		// Don't add properties for child objects that override parent properties
		Column existingOriginalColumn1 = Script.GetColumnByColumnAlias(inheritedColumns, column.Alias);
		bool columnIsInherited = existingOriginalColumn1 != null;
		
		if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
		{%&gt;

		/// &lt;summary&gt;
		/// Original&lt;%Write(column.Alias);%&gt; Property
		/// &lt;/summary&gt;
		public &lt;%
			
			// Columns that can be overriden
			Column existingOriginalOverrideColumn = Script.GetColumnByColumnAlias(overrideColumns, column.Alias);
			if (existingOriginalOverrideColumn != null &amp;&amp; existingOriginalOverrideColumn.InPrimaryKey &amp;&amp; !existingOriginalOverrideColumn.IsIdentity)
			{
				%&gt;virtual &lt;%
			}
			else
			{
				// Override columns that hide base ones
				Column existingOriginalColumn = Script.GetColumnByColumnAlias(inheritedColumns, column.Alias);
				if (existingOriginalColumn != null &amp;&amp; existingOriginalColumn.InPrimaryKey &amp;&amp; !existingOriginalColumn.IsIdentity)
				{
					%&gt;override &lt;%
				}
			}
			
			Write(CSharp.GetDataType(column));%&gt; Original&lt;%Write(column.Alias);%&gt;
		{
			get { return _&lt;%Write(GetModelOriginal() + column.Alias);%&gt;; }
		}&lt;%
		}
		if (!columnIsInherited)
		{
		%&gt;
		
		/// &lt;summary&gt;
		/// &lt;%Write(column.Alias);%&gt; Property
		/// &lt;/summary&gt;
		public &lt;%		
		
			// Columns that can be overriden
			Column existingOverrideColumn = Script.GetColumnByColumnAlias(overrideColumns, column.Alias);
			if (existingOverrideColumn != null &amp;&amp; !existingOverrideColumn.InPrimaryKey)
			{
				%&gt;virtual &lt;%
			}
			else
			{
				Column existingColumn = Script.GetColumnByColumnAlias(inheritedColumns, column.Alias);
				
				// Columns that override base ones
				if (existingColumn != null &amp;&amp; existingColumn.InPrimaryKey)
				{
					%&gt;override &lt;%
				}
				// Columns that hide base ones
				else if (existingColumn != null &amp;&amp; !existingColumn.InPrimaryKey)
				{
					%&gt;new &lt;%
				}
			}
		
			Write(CSharp.GetDataType(column));%&gt; &lt;%Write(column.Alias);%&gt;
		{&lt;%
			if (SQLServer.IsDataTypeBinary(column) &amp;&amp; scriptObject.IsTable)
			{
				Table table = (Table)scriptObject;
			%&gt;
			get
			{ 
				// Lazy load &lt;%Write(column.Alias);%&gt;.
				if (_&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; == null)
				{&lt;%
				if (UserOptions.SkipIDAL)
				{%&gt;
					string path = "&lt;%Write(UserOptions.ProjectName);%&gt;.SQLServerDAL";&lt;%
				}
				else
				{%&gt;
					string path = System.Configuration.ConfigurationManager.AppSettings["DAL"];&lt;%
				}%&gt;
					string className = path + ".&lt;%Write(scriptObject.Alias);%&gt;";

					Assembly assembly = Assembly.Load(path);
					object obj = assembly.CreateInstance(className);
					Type type = obj.GetType();

					&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt; = (&lt;%Write(scriptObject.Alias);%&gt;Info)type.InvokeMember("Get&lt;%Write(scriptObject.Alias);%&gt;", BindingFlags.InvokeMethod, null, obj, new object[] { &lt;%Write(CSharp.GetKeyValueStringWithUnderscore(table.PrimaryKeyColumns));%&gt; }, new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"]));
					
					_&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt;;
				}
			
				// Check for zero length byte array from DAL indicating a null field in database.
				if (_&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; == null || _&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;.Length == 0)
                {
                    return null;
                }
                else
                {
                    return _&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;;
                }
			}&lt;%
			}
			else
			{%&gt;
			get { return _&lt;%Write(Script.GetCamelCase(column.Alias));%&gt;; }&lt;%
			}
			
			if ((!column.ReadOnly || column.IsIdentity) || scriptObject.IsView || scriptObject.IsStoredProcedure)
			{%&gt;
			set { &lt;%
				if (SQLServer.IsDataTypeText(column))
				{
					%&gt;if (value.Length &gt; &lt;%=scriptObject.Alias;%&gt;InfoMetaData.GetMaxLength(&lt;%=scriptObject.Alias;%&gt;InfoMetaData.Columns.&lt;%=column.Alias%&gt;))
				{
					throw new Exception("Length exceeds MaxLength.");
				}
				&lt;%
				}
				%&gt;_&lt;%Write(Script.GetCamelCase(column.Alias));%&gt; = value; }&lt;%
			}%&gt;
		}&lt;%
		}
	}

	if (UserOptions.UseLazyLoad &amp;&amp; scriptObject.Relationships.Length &gt; 0 &amp;&amp; oneToOneRelationship == null)
	{%&gt;

		/// &lt;summary&gt;
		/// Enable Relationship Lazy Load Property
		/// &lt;/summary&gt;
		public bool EnableRelationshipLazyLoad
		{
			get { return _enableRelationshipLazyLoad; }
			set { _enableRelationshipLazyLoad = value; }
		}&lt;%
	}

	// Relationships
	foreach (Relationship relationship in scriptObject.Relationships)
	{
		string primaryAlias = relationship.PrimaryScriptObject.Alias;
		string foreignAlias = relationship.ForeignScriptObject.Alias;
		
		if (//relationship.GetType() == typeof(OneToOneRelationship) ||
			relationship.GetType() == typeof(ManyToOneRelationship))
		{%&gt;
	
		/// &lt;summary&gt;
		/// &lt;%Write(relationship.Alias);%&gt; Property
		/// &lt;/summary&gt;
		public &lt;%Write(foreignAlias);%&gt;Info &lt;%Write(relationship.Alias);%&gt;
		{&lt;%
			if (UserOptions.UseLazyLoad)
			{%&gt;
			get
			{ 
				// Lazy load &lt;%Write(relationship.Alias);%&gt;.
				// Use BLL.Group.Fill&lt;%Write(relationship.Alias);%&gt; if a faster option is required.
				if (_&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; == null &amp;&amp; EnableRelationshipLazyLoad)
				{
					&lt;%=UserOptions.ProjectName%&gt;.SQLServerDAL.&lt;%=scriptObject.Alias%&gt; &lt;%=Script.GetCamelCase(scriptObject.Alias)%&gt; = new &lt;%=UserOptions.ProjectName%&gt;.SQLServerDAL.&lt;%=scriptObject.Alias%&gt;();
					&lt;%=Script.GetCamelCase(scriptObject.Alias)%&gt;.Fill&lt;%=relationship.Alias;%&gt;(this);
				}
				return _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;;
			}&lt;%
			}
			else
			{%&gt;
			get { return _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;; }&lt;%
			}%&gt;
			set { _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; = value; }
		}&lt;%
		}
	
		if (relationship.GetType() == typeof(OneToManyRelationship) ||
			relationship.GetType() == typeof(ManyToManyRelationship))
		{%&gt;
	
		/// &lt;summary&gt;
		/// &lt;%Write(relationship.Alias);%&gt; Property
		/// &lt;/summary&gt;
		public &lt;%Write(foreignAlias);%&gt;Info[] &lt;%Write(relationship.Alias);%&gt;
		{&lt;%
			if (UserOptions.UseLazyLoad)
			{%&gt;
			get
			{ 
				// Lazy load &lt;%Write(relationship.Alias);%&gt;.
				// Use BLL.Group.Fill&lt;%Write(relationship.Alias);%&gt; if a faster option is required.
				if (_&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; == null &amp;&amp; EnableRelationshipLazyLoad)
				{
					&lt;%=UserOptions.ProjectName%&gt;.SQLServerDAL.&lt;%=scriptObject.Alias%&gt; &lt;%=Script.GetCamelCase(scriptObject.Alias)%&gt; = new &lt;%=UserOptions.ProjectName%&gt;.SQLServerDAL.&lt;%=scriptObject.Alias%&gt;();
					&lt;%=Script.GetCamelCase(scriptObject.Alias)%&gt;.Fill&lt;%=relationship.Alias;%&gt;(this);					
				}

				return _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;; 
			}&lt;%
			}
			else
			{%&gt;
			get { return _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;; }&lt;%
			}%&gt;
			set { _&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; = value; }
		}&lt;%
		}
	}
}%&gt;
	}
}</function>
  <function name="GetNonIdentityPrimaryKeyColumns" returntype="Column[]" istemplatefunction="False" scriptlanguage="CSharp" description="" category="">
    <parameter name="primaryKeyColumns" type="ArchAngel.Providers.Database.Model.Column[]" modifiers="" />System.Collections.ArrayList nonIdentityPrimaryKeyColumns = new System.Collections.ArrayList();

foreach (Column primaryKeyColumn in primaryKeyColumns)
{
	if (primaryKeyColumn.IsIdentity)
	{
		continue;
	}
	
	nonIdentityPrimaryKeyColumns.Add(primaryKeyColumn);
}

return (Column[])nonIdentityPrimaryKeyColumns.ToArray(typeof(Column));</function>
  <function name="GetSelectByFilterInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />&lt;%Write(GetSelectCommonInlineSQL(scriptObject, false));%&gt; WHERE&lt;%
	
Column archiveColumn = (Column)scriptObject.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (archiveColumn != null)
{
	Write(SQLServer.GetSQLName(scriptObject.Name));%&gt;.Archive = 0 AND&lt;%
}

%&gt; #FieldName# #Operator# @FieldValue&lt;%
	
if (scriptObject.IsTable)
{
	%&gt; ORDER BY &lt;%
	Table table = (Table)scriptObject;
	for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
	{
		Column primaryKeyColumn = table.PrimaryKeyColumns[i];
		Write(SQLServer.GetSQLName(scriptObject.Name) + "." + SQLServer.GetSQLName(primaryKeyColumn.Name));
		if (i &lt; table.PrimaryKeyColumns.Length-1)
		{
			%&gt;, &lt;%
		}
	}	
}%&gt;</function>
  <function name="GetSelectByFilterSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />CREATE PROCEDURE [dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + scriptObject.AliasPlural + "ByFilter");%&gt;]
@FieldName nvarchar(50),
@Operator nvarchar(50),
@FieldValue nvarchar(50)

AS
	DECLARE @sql AS nvarchar(2000)
	SET @sql =
	'
	&lt;%Write(GetSelectCommonSP(scriptObject, false));%&gt;
	WHERE&lt;%
	
Column archiveColumn = (Column)scriptObject.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (archiveColumn != null)
{%&gt;	
		&lt;%Write(SQLServer.GetSQLName(scriptObject.Name));%&gt;.Archive = 0 AND&lt;%
}%&gt;
		' + @FieldName + ' ' + @Operator + ' @v&lt;%
	
if (scriptObject.IsTable)
{%&gt;
	ORDER BY&lt;%
	Table table = (Table)scriptObject;
	for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
	{
		Column primaryKeyColumn = table.PrimaryKeyColumns[i];%&gt;
		&lt;%Write(SQLServer.GetSQLName(scriptObject.Name) + "." + SQLServer.GetSQLName(primaryKeyColumn.Name));
		if (i &lt; table.PrimaryKeyColumns.Length-1)
		{
			%&gt;,&lt;%
		}
	}	
}%&gt;
	'
	
	EXEC sp_executesql @sql, N'@v nvarchar(50)', @v = @FieldValue</function>
  <function name="GetSelectCommonInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
    <parameter name="isUnique" type="System.Boolean" modifiers="" />SELECT &lt;%

Column[] columns = CSharp.GetSelectColumns(scriptObject);

for (int i=0; i&lt;columns.Length; i++)
{
	Column column = columns[i];
	
	// Image types must be lazy loaded
	if (column.IsMapColumn)
	{
		MapColumn mapColumn = (MapColumn)column;
		Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
		Write(SQLServer.GetSQLParentAlias(mapColumn) + "." + mapColumn.ForeignColumn.Name + " AS " + mapColumn.Alias);
	}
	else
	{
		if (SQLServer.IsDataTypeBinary(column) &amp;&amp; !isUnique)
		{
			%&gt;NULL AS &lt;%Write(column.Alias);
		}
		else if (!column.IsUserDefined)
		{
			Write(SQLServer.GetSQLName(column.Parent.Name) + "." + SQLServer.GetSQLName(column.Name));
		}
		else
		{
			%&gt;NULL AS &lt;%Write(column.Alias);
		}
		
		if (column.Name != column.Alias)
		{
			%&gt; AS &lt;%Write(column.Alias);
		}
	}
	if (i &lt; columns.Length - 1)
	{
		%&gt;, &lt;%
	}
}
%&gt; FROM &lt;%Write(SQLServer.GetSQLName(scriptObject.Name));

OneToOneRelationship[] oneToOneRelationships = Script.GetInheritedOneToOneRelationships(scriptObject);

foreach (OneToOneRelationship oneToOneRelationship in oneToOneRelationships)
{
	%&gt; INNER JOIN &lt;%
	
	Write(SQLServer.GetSQLName(oneToOneRelationship.ForeignRelationship.Parent.Name));
	
	%&gt; ON&lt;%
	for (int i=0; i &lt; oneToOneRelationship.ForeignRelationship.PrimaryColumns.Length; i++)
	{
		Column primaryColumn = oneToOneRelationship.ForeignRelationship.PrimaryColumns[i];
		Column foreignColumn = oneToOneRelationship.ForeignRelationship.ForeignColumns[i];
		
		%&gt; &lt;%Write(SQLServer.GetSQLName(oneToOneRelationship.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(foreignColumn.Name));%&gt; = &lt;%Write(SQLServer.GetSQLName(oneToOneRelationship.ForeignRelationship.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(primaryColumn.Name));%&gt;&lt;%
		
		if (i &lt; oneToOneRelationship.ForeignRelationship.PrimaryColumns.Length - 1)
		{
			%&gt; AND&lt;%
		}
	}
}
	
if (scriptObject.IsTable)
{
	MapColumn[] mapColumns = CSharp.GetSelectMapColumns(scriptObject);
	foreach (MapColumn mapColumn in mapColumns)
	{
		if (mapColumn.IsNullable || mapColumn.RelationshipPath[0].ForeignColumns[0].IsNullable)
		{
			%&gt; LEFT JOIN &lt;%
		}
		else
		{
			%&gt; INNER JOIN &lt;%
		}
		
		Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
		
		if (mapColumn.RelationshipPath[0].PrimaryColumns.Length != mapColumn.RelationshipPath[0].ForeignColumns.Length)
		{
			throw new Exception("mapColumn.ManyToOneRelationship.ForeignRelationship PrimaryColumns.Length must equal ForeignColumns.Length");
		}
		
		Write(SQLServer.GetSQLName(foreignTable.Name));
		
		string sqlParentAlias = SQLServer.GetSQLParentAlias(mapColumn);
		if (SQLServer.GetSQLName(foreignTable.Name) != sqlParentAlias)
		{
			%&gt; AS &lt;%Write(sqlParentAlias);
		}
		
		%&gt; ON&lt;%
		for (int i=0; i &lt; mapColumn.RelationshipPath[0].ForeignRelationship.PrimaryColumns.Length; i++)
		{
			Column primaryColumn = mapColumn.RelationshipPath[0].ForeignRelationship.PrimaryColumns[i];
			Column foreignColumn = mapColumn.RelationshipPath[0].ForeignRelationship.ForeignColumns[i];
			
			//FROM
			//Table_6 INNER JOIN
			//Table_5 ON Table_6.Id1_5f = Table_5.Id1_5p AND Table_6.Id2_5f = Table_5.Id2_5p INNER JOIN
			//Table_7 ON Table_6.Id1_7f = Table_7.Id1_7p AND Table_6.Id2_7f = Table_7.Id2_7p
			
			//FROM
			//[Group] INNER JOIN
            //[Group] AS Group_1 ON [Group].ChildGroupId1 = Group_1.Id1 AND [Group].ChildGroupId2 = Group_1.Id2 INNER JOIN
            //[Group] AS Group_2 ON [Group].Child2GroupId1 = Group_2.Id1 AND [Group].Child2GroupId2 = Group_2.Id2
			
			%&gt; &lt;%Write(SQLServer.GetSQLName(mapColumn.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(foreignColumn.Name));%&gt; = &lt;%Write(sqlParentAlias);%&gt;.&lt;%Write(SQLServer.GetSQLName(primaryColumn.Name));%&gt;&lt;%
			
			if (i &lt; mapColumn.RelationshipPath[0].PrimaryColumns.Length - 1)
			{
				%&gt; AND&lt;%
			}
		}
	}
}%&gt;</function>
  <function name="GetSelectCommonSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
    <parameter name="isUnique" type="System.Boolean" modifiers="" />SELECT&lt;%

Column[] columns = CSharp.GetSelectColumns(scriptObject);

for (int i=0; i&lt;columns.Length; i++)
{
	Column column = columns[i];%&gt;
		&lt;%
	
	// Image types must be lazy loaded
	if (column.IsMapColumn)
	{
		MapColumn mapColumn = (MapColumn)column;
		Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
		Write(SQLServer.GetSQLParentAlias(mapColumn) + "." + mapColumn.ForeignColumn.Name + " AS " + mapColumn.Alias);
	}
	else
	{
		if (SQLServer.IsDataTypeBinary(column) &amp;&amp; !isUnique)
		{
			%&gt;NULL AS &lt;%Write(SQLServer.GetSQLName(column.Alias));
		}
		else if (!column.IsUserDefined)
		{
			Write(SQLServer.GetSQLName(column.Parent.Name) + "." + SQLServer.GetSQLName(column.Name));
		}
		else
		{
			%&gt;NULL AS &lt;%Write(column.Alias);
		}
		
		if (column.Name != column.Alias)
		{
			%&gt; AS &lt;%Write(column.Alias);
		}
	}
	
	if (i &lt; columns.Length - 1)
	{
		%&gt;,&lt;%
	}
}%&gt;
	FROM
		&lt;%Write(SQLServer.GetSQLName(scriptObject.Name));

OneToOneRelationship[] oneToOneRelationships = Script.GetInheritedOneToOneRelationships(scriptObject);

foreach (OneToOneRelationship oneToOneRelationship in oneToOneRelationships)
{
	%&gt; INNER JOIN
		&lt;%
	
	Write(SQLServer.GetSQLName(oneToOneRelationship.ForeignRelationship.Parent.Name));
	
	%&gt; ON&lt;%
	for (int i=0; i &lt; oneToOneRelationship.ForeignRelationship.PrimaryColumns.Length; i++)
	{
		Column primaryColumn = oneToOneRelationship.ForeignRelationship.PrimaryColumns[i];
		Column foreignColumn = oneToOneRelationship.ForeignRelationship.ForeignColumns[i];
		
		%&gt; &lt;%Write(SQLServer.GetSQLName(oneToOneRelationship.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(foreignColumn.Name));%&gt; = &lt;%Write(SQLServer.GetSQLName(oneToOneRelationship.ForeignRelationship.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(primaryColumn.Name));%&gt;&lt;%
		
		if (i &lt; oneToOneRelationship.ForeignRelationship.PrimaryColumns.Length - 1)
		{
			%&gt; AND&lt;%
		}
	}
}
	
if (scriptObject.IsTable)
{
	MapColumn[] mapColumns = CSharp.GetSelectMapColumns(scriptObject);
	foreach (MapColumn mapColumn in mapColumns)
	{
		
		
		//string str = mapColumn.RelationshipPath[0].Name;
		
		//continue;
		
		if (mapColumn.IsNullable || mapColumn.RelationshipPath[0].ForeignColumns[0].IsNullable)
		{
			%&gt; LEFT JOIN
		&lt;%
		}
		else
		{
			%&gt; INNER JOIN
		&lt;%
		}
		
		Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
		
		if (mapColumn.RelationshipPath[0].PrimaryColumns.Length != mapColumn.RelationshipPath[0].ForeignColumns.Length)
		{
			throw new Exception("mapColumn.RelationshipPath[0].ForeignRelationship PrimaryColumns.Length must equal ForeignColumns.Length");
		}
		
		Write(SQLServer.GetSQLName(foreignTable.Name));
		
		string sqlParentAlias = SQLServer.GetSQLParentAlias(mapColumn);
		if (SQLServer.GetSQLName(foreignTable.Name) != sqlParentAlias)
		{
			%&gt; AS &lt;%Write(sqlParentAlias);
		}
		
		%&gt; ON&lt;%
		for (int i=0; i &lt; mapColumn.RelationshipPath[0].ForeignRelationship.PrimaryColumns.Length; i++)
		{
			Column primaryColumn = mapColumn.RelationshipPath[0].ForeignRelationship.PrimaryColumns[i];
			Column foreignColumn = mapColumn.RelationshipPath[0].ForeignRelationship.ForeignColumns[i];
			
			//FROM
			//Table_6 INNER JOIN
			//Table_5 ON Table_6.Id1_5f = Table_5.Id1_5p AND Table_6.Id2_5f = Table_5.Id2_5p INNER JOIN
			//Table_7 ON Table_6.Id1_7f = Table_7.Id1_7p AND Table_6.Id2_7f = Table_7.Id2_7p
			
			//FROM
			//[Group] INNER JOIN
            //[Group] AS Group_1 ON [Group].ChildGroupId1 = Group_1.Id1 AND [Group].ChildGroupId2 = Group_1.Id2 INNER JOIN
            //[Group] AS Group_2 ON [Group].Child2GroupId1 = Group_2.Id1 AND [Group].Child2GroupId2 = Group_2.Id2
			
			%&gt; &lt;%Write(SQLServer.GetSQLName(mapColumn.Parent.Name));%&gt;.&lt;%Write(SQLServer.GetSQLName(foreignColumn.Name));%&gt; = &lt;%Write(sqlParentAlias);%&gt;.&lt;%Write(SQLServer.GetSQLName(primaryColumn.Name));%&gt;&lt;%
			
			if (i &lt; mapColumn.RelationshipPath[0].PrimaryColumns.Length - 1)
			{
				%&gt; AND&lt;%
			}
		}
	}
}%&gt;</function>
  <function name="GetSelectFilterInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
    <parameter name="filter" type="ArchAngel.Providers.Database.Model.Filter" modifiers="" />&lt;%Write(GetSelectCommonInlineSQL(scriptObject, !filter.IsReturnTypeCollection));

Column archiveColumn = (Column)scriptObject.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (filter.FilterColumns.Length &gt; 0 || filter.UseCustomWhere || archiveColumn != null)
{
	%&gt; WHERE&lt;%
}

if (archiveColumn != null)
{
	%&gt; &lt;%Write(SQLServer.GetSQLName(scriptObject.Name));%&gt;.Archive = 0&lt;%
	if (filter.FilterColumns.Length &gt; 0)
	{
		%&gt; AND&lt;%
	}
}
		
if (filter.UseCustomWhere)
{
	string[] lines = filter.CustomWhere.Split('\n');
	foreach (string line in lines)
	{
		Write("\n\t\t" + line);
	}
}
else
{
	int numColumnsAdded = 0;
	
	foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
	{
		string logicalOperator = filterColumn.LogicalOperator;
		
		if (logicalOperator != "" &amp;&amp; numColumnsAdded &gt; 0)
		{
			%&gt; &lt;%Write(logicalOperator.ToUpper());
		}
		if (filterColumn.Column.IsMapColumn)
		{
			MapColumn mapColumn = (MapColumn)filterColumn.Column;
			Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
			%&gt; &lt;%Write(SQLServer.GetSQLParentAlias(mapColumn)+ "." + mapColumn.ForeignColumn.Name + " " + filterColumn.CompareOperator + " @" + filterColumn.Alias);
		}
		else
		{
			%&gt; &lt;%Write(SQLServer.GetSQLName(filterColumn.Column.Parent.Name) + "." + SQLServer.GetSQLName(filterColumn.Column.Name) + " " + filterColumn.CompareOperator + " @" + filterColumn.Alias);
		}
		numColumnsAdded++;
	}
}

if (filter.OrderByColumns.Length &gt; 0)
{
	%&gt; ORDER BY &lt;%
	int numColumnsAdded = 0;
	
	for (int i=0; i&lt;filter.OrderByColumns.Length; i++)
	{
		Filter.OrderByColumn orderByColumn = filter.OrderByColumns[i];
		string sortOperator = orderByColumn.SortOperator;
		
		if (numColumnsAdded &gt; 0)
		{
			%&gt;, &lt;%
		}
		if (orderByColumn.Column.IsMapColumn)
		{
			MapColumn mapColumn = (MapColumn)orderByColumn.Column;
			Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
			Write(SQLServer.GetSQLParentAlias((MapColumn)orderByColumn.Column)+ "." + mapColumn.ForeignColumn.Name + " " + sortOperator);
		}
		else
		{
			Write(SQLServer.GetSQLName(orderByColumn.Column.Parent.Name) + "." + SQLServer.GetSQLName(orderByColumn.Column.Name) + " " + sortOperator);
		}
		numColumnsAdded++;
	}
}%&gt;</function>
  <function name="GetSelectFilterSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
    <parameter name="filter" type="ArchAngel.Providers.Database.Model.Filter" modifiers="" />CREATE PROCEDURE [dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + RemoveGetSP(filter.Alias));%&gt;]&lt;%

for (int i=0; i&lt;filter.FilterColumns.Length; i++)
{
	Filter.FilterColumn filterColumn = filter.FilterColumns[i];%&gt;
@&lt;%Write(filterColumn.Alias + " " + SQLServer.GetSQLDataType(filterColumn.Column));
	if (i &lt; filter.FilterColumns.Length-1)
	{
		%&gt;,&lt;%
	}
}%&gt;

AS
	&lt;%Write(GetSelectCommonSP(scriptObject, !filter.IsReturnTypeCollection));

	Column archiveColumn = (Column)scriptObject.GetColumn(UserOptions.ArchiveDBRecordFieldName);
if (filter.FilterColumns.Length &gt; 0 || filter.UseCustomWhere || archiveColumn != null)
{%&gt;
	WHERE&lt;%
}

if (archiveColumn != null)
{%&gt;	
		&lt;%Write(SQLServer.GetSQLName(scriptObject.Name));%&gt;.Archive = 0&lt;% 
		
	if (filter.FilterColumns.Length &gt; 0)
	{
		%&gt; AND&lt;%
	}
}
		
if (filter.UseCustomWhere)
{
	string[] lines = filter.CustomWhere.Split('\n');
	foreach (string line in lines)
	{
		Write("\n\t\t" + line);
	}
}
else
{%&gt;
		&lt;%
	for (int i = 0; i &lt; filter.FilterColumns.Length; i++)
	{
		Filter.FilterColumn filterColumn = filter.FilterColumns[i];
		string logicalOperator = filterColumn.LogicalOperator;
		
		if (logicalOperator != "" &amp;&amp; i != 0)
		{
		%&gt; &lt;%Write(logicalOperator.ToUpper());%&gt;
		&lt;%
		}
		
		if (filterColumn.Column.IsMapColumn)
		{
			MapColumn mapColumn = (MapColumn)filterColumn.Column;
			Table foreignTable = (Table)mapColumn.ForeignColumn.Parent;
			Write(SQLServer.GetSQLParentAlias(mapColumn)+ "." + mapColumn.ForeignColumn.Name + " " + filterColumn.CompareOperator + " @" + filterColumn.Alias);
		}
		else
		{
			Write(SQLServer.GetSQLName(filterColumn.Column.Parent.Name) + "." + SQLServer.GetSQLName(filterColumn.Column.Name) + " " + filterColumn.CompareOperator + " @" + filterColumn.Alias);
		}
	}
}

if (filter.OrderByColumns.Length &gt; 0)
{%&gt;
	ORDER BY
		&lt;%
	for (int i=0; i&lt;filter.OrderByColumns.Length; i++)
	{
		Filter.OrderByColumn orderByColumn = filter.OrderByColumns[i];
		string sortOperator = orderByColumn.SortOperator;
		
		if (orderByColumn.Column.IsMapColumn)
		{
			MapColumn mapColumn = (MapColumn)orderByColumn.Column;
			Table foreignTable = (Table)((MapColumn)orderByColumn.Column).ForeignColumn.Parent;
			Write(SQLServer.GetSQLParentAlias(mapColumn)+ "." + mapColumn.ForeignColumn.Name + " " + sortOperator);
		}
		else
		{
			Write(SQLServer.GetSQLName(orderByColumn.Column.Parent.Name) + "." + SQLServer.GetSQLName(orderByColumn.Column.Name) + " " + sortOperator);
		}
		
		if (i &lt; filter.OrderByColumns.Length-1)
		{
		%&gt;,
		&lt;%
		}
	}
}%&gt;</function>
  <function name="GetSetupBLL_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("BLL")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("BLL")]
[assembly: AssemblyCopyright("Copyright ©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.BLLGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSetupDALFactory_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("DALFactory")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("DALFactory")]
[assembly: AssemblyCopyright("Copyright Â©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.DALFactoryGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSetupDBUtility_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Utility")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Utility")]
[assembly: AssemblyCopyright("Copyright Â©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.DBUtilityGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSetupDBUtility_SQLHelper_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="databases" type="ArchAngel.Providers.Database.Model.Database[]" modifiers="" />//===============================================================================
// This file is based on the Microsoft Data Access Application Block for .NET
// For more information please go to 
// http://msdn.microsoft.com/library/en-us/dnbda/html/daab-rm.asp
//===============================================================================

using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.DBUtility
{
	/// &lt;summary&gt;
	/// The SqlHelper class is intended to encapsulate high performance, 
	/// scalable best practices for common uses of SqlClient.
	/// &lt;/summary&gt;
	public abstract class SQLHelper
	{&lt;%
		foreach (Database database in databases)
		{%&gt;
		
		// &lt;%Write(database.ConnectionString.DatabaseName);%&gt; Database connection string
		public static string &lt;%Write(database.ConnectionString.DatabaseName);%&gt;ConnectionString
		{
			get { return ConfigurationManager.ConnectionStrings["&lt;%Write(database.ConnectionString.DatabaseName);%&gt;"].ToString(); }
		}&lt;%
		}%&gt;

		// Hashtable to store cached parameters
		private static Hashtable parmCache = Hashtable.Synchronized(new Hashtable());

		/// &lt;summary&gt;
		/// Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="connectionString"&gt;a valid connection string for a SqlConnection&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;an int representing the number of rows affected by the command&lt;/returns&gt;
		public static int ExecuteNonQuery(string connString, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			using (SqlConnection conn = new SqlConnection(connString)) 
			{
				PrepareCommand(cmd, conn, null, cmdType, cmdText, cmdParms);
				int val = cmd.ExecuteNonQuery();
				cmd.Parameters.Clear();
				return val;
			}
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand (that returns no resultset) against an existing database connection 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="conn"&gt;an existing database connection&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;an int representing the number of rows affected by the command&lt;/returns&gt;
		public static int ExecuteNonQuery(SqlConnection conn, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			PrepareCommand(cmd, conn, null, cmdType, cmdText, cmdParms);
			int val = cmd.ExecuteNonQuery();
			cmd.Parameters.Clear();
			return val;
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand (that returns no resultset) using an existing SQL Transaction 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="trans"&gt;an existing sql transaction&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;an int representing the number of rows affected by the command&lt;/returns&gt;
		public static int ExecuteNonQuery(SqlTransaction trans, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();
			PrepareCommand(cmd, trans.Connection, trans, cmdType, cmdText, cmdParms);
			int val = cmd.ExecuteNonQuery();
			cmd.Parameters.Clear();
			return val;
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand that returns a resultset against the database specified in the connection string 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="connectionString"&gt;a valid connection string for a SqlConnection&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;A SqlDataReader containing the results&lt;/returns&gt;
		public static SqlDataReader ExecuteReader(string connString, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();
			SqlConnection conn = new SqlConnection(connString);

			// we use a try/catch here because if the method throws an exception we want to 
			// close the connection throw code, because no datareader will exist, hence the 
			// commandBehaviour.CloseConnection will not work
			try 
			{
				PrepareCommand(cmd, conn, null, cmdType, cmdText, cmdParms);
				SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
				cmd.Parameters.Clear();
				return rdr;
			}
			catch 
			{
				conn.Close();
				throw;
			}
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand that returns a resultset against the database specified in the connection string 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="trans"&gt;an existing sql transaction&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;A SqlDataReader containing the results&lt;/returns&gt;
		public static SqlDataReader ExecuteReader(SqlTransaction trans, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			PrepareCommand(cmd, trans.Connection, trans, cmdType, cmdText, cmdParms);
			SqlDataReader rdr = cmd.ExecuteReader();
			cmd.Parameters.Clear();
			return rdr;
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="connectionString"&gt;a valid connection string for a SqlConnection&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;An object that should be converted to the expected type using Convert.To{Type}&lt;/returns&gt;
		public static object ExecuteScalar(string connString, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			using (SqlConnection conn = new SqlConnection(connString)) 
			{
				PrepareCommand(cmd, conn, null, cmdType, cmdText, cmdParms);
				object val = cmd.ExecuteScalar();
				cmd.Parameters.Clear();
				return val;
			}
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand that returns the first column of the first record against an existing database connection 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="conn"&gt;an existing database connection&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;An object that should be converted to the expected type using Convert.To{Type}&lt;/returns&gt;
		public static object ExecuteScalar(SqlConnection conn, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			PrepareCommand(cmd, conn, null, cmdType, cmdText, cmdParms);
			object val = cmd.ExecuteScalar();
			cmd.Parameters.Clear();
			return val;
		}

		/// &lt;summary&gt;
		/// Execute a SqlCommand that returns the first column of the first record against an existing database connection 
		/// using the provided parameters.
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		/// e.g.:  
		///  Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
		/// &lt;/remarks&gt;
		/// &lt;param name="trans"&gt;an existing sql transaction&lt;/param&gt;
		/// &lt;param name="commandType"&gt;the CommandType (stored procedure, text, etc.)&lt;/param&gt;
		/// &lt;param name="commandText"&gt;the stored procedure name or T-SQL command&lt;/param&gt;
		/// &lt;param name="commandParameters"&gt;an array of SqlParamters used to execute the command&lt;/param&gt;
		/// &lt;returns&gt;An object that should be converted to the expected type using Convert.To{Type}&lt;/returns&gt;
		public static object ExecuteScalar(SqlTransaction trans, CommandType cmdType, string cmdText, params SqlParameter[] cmdParms) 
		{
			SqlCommand cmd = new SqlCommand();

			PrepareCommand(cmd, trans.Connection, trans, cmdType, cmdText, cmdParms);
			object val = cmd.ExecuteScalar();
			cmd.Parameters.Clear();
			return val;
		}
		
		/// &lt;summary&gt;
		/// add parameter array to the cache
		/// &lt;/summary&gt;
		/// &lt;param name="cacheKey"&gt;Key to the parameter cache&lt;/param&gt;
		/// &lt;param name="cmdParms"&gt;an array of SqlParamters to be cached&lt;/param&gt;
		public static void CacheParameters(string cacheKey, params SqlParameter[] cmdParms) 
		{
			parmCache[cacheKey] = cmdParms;
		}

		/// &lt;summary&gt;
		/// Retrieve cached parameters
		/// &lt;/summary&gt;
		/// &lt;param name="cacheKey"&gt;key used to lookup parameters&lt;/param&gt;
		/// &lt;returns&gt;Cached SqlParamters array&lt;/returns&gt;
		public static SqlParameter[] GetCachedParameters(string cacheKey) 
		{
			SqlParameter[] cachedParms = (SqlParameter[])parmCache[cacheKey];

			if (cachedParms == null)
				return null;

			SqlParameter[] clonedParms = new SqlParameter[cachedParms.Length];

			for (int i = 0, j = cachedParms.Length; i &lt; j; i++)
				clonedParms[i] = (SqlParameter)((ICloneable)cachedParms[i]).Clone();

			return clonedParms;
		}

		/// &lt;summary&gt;
		/// Prepare a command for execution
		/// &lt;/summary&gt;
		/// &lt;param name="cmd"&gt;SqlCommand object&lt;/param&gt;
		/// &lt;param name="conn"&gt;SqlConnection object&lt;/param&gt;
		/// &lt;param name="trans"&gt;SqlTransaction object&lt;/param&gt;
		/// &lt;param name="cmdType"&gt;Cmd type e.g. stored procedure or text&lt;/param&gt;
		/// &lt;param name="cmdText"&gt;Command text, e.g. Select * from Products&lt;/param&gt;
		/// &lt;param name="cmdParms"&gt;SqlParameters to use in the command&lt;/param&gt;
		private static void PrepareCommand(SqlCommand cmd, SqlConnection conn, SqlTransaction trans, CommandType cmdType, string cmdText, SqlParameter[] cmdParms) 
		{
			if (conn.State != ConnectionState.Open)
				conn.Open();

			cmd.Connection = conn;
			cmd.CommandText = cmdText;

			if (trans != null)
				cmd.Transaction = trans;

			cmd.CommandType = cmdType;

			if (cmdParms != null) 
			{
				foreach (SqlParameter parm in cmdParms)
					cmd.Parameters.Add(parm);
			}
		}

		/// &lt;summary&gt;
		/// Get Array of bytes from datareader
		/// &lt;/summary&gt;
		/// &lt;param name="rdr"&gt;SqlDataReader object&lt;/param&gt;
		/// &lt;param name="index"&gt;int&lt;/param&gt;
		public static byte[] GetBytes(SqlDataReader rdr, int index)
		{
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			System.IO.BinaryWriter binaryWriter = new System.IO.BinaryWriter(memoryStream);
			
			// Set up buffer for GetBytes
			int bufferSize = 100;
			byte[] bytes = new byte[bufferSize];
			int startIndex = 0;
			long retVal = rdr.GetBytes(index, startIndex, bytes, 0, bufferSize);
			while (retVal == bufferSize)
			{
				binaryWriter.Write(bytes);
				binaryWriter.Flush();

				// Reposition start index for next byte array
				startIndex += bufferSize;
				retVal = rdr.GetBytes(index, startIndex, bytes, 0, bufferSize);
			}

			// Write the remaining buffer.
			binaryWriter.Write(bytes, 0, (int)retVal);
			binaryWriter.Flush();

			return(memoryStream.ToArray());
		}
	}
}</function>
  <function name="GetSetupIDAL_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("IDAL")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("IDAL")]
[assembly: AssemblyCopyright("Copyright Â©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.IDALGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSetupModel_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Model")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Model")]
[assembly: AssemblyCopyright("Copyright Â©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.ModelGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSetupSQLServerDAL_AssemblyInfo_cs" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SQLServerDAL")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SQLServerDAL")]
[assembly: AssemblyCopyright("Copyright Â©  2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("&lt;%Write(UserOptions.SQLServerDALGUID.ToString().ToUpper());%&gt;")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</function>
  <function name="GetSQLServerDALColumnUpdateTable" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
    <parameter name="column" type="ArchAngel.Providers.Database.Model.Column" modifiers="" />
    <parameter name="index" type="System.Int32" modifiers="" />
    <parameter name="loadImage" type="System.Boolean" modifiers="" />&lt;%
if (scriptObject.IsTable)
{
	if (SQLServer.IsDataTypeBinary(column))
	{
		if (loadImage)
		{
			if (column.IsNullable)
			{
			%&gt;rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;) ? new byte[0] : SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;)&lt;%
			}
			else
			{
			%&gt;SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;)&lt;%
			}
		}
		else
		{
			return "null";
			if (column.IsNullable)
			{%&gt;
					if (!rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;))
					{
						//new&lt;%Write(scriptObject.Alias);%&gt;.&lt;%Write(column.Alias);%&gt; = SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;);
					}&lt;%
			}
			else
			{
			%&gt;//new&lt;%Write(scriptObject.Alias);%&gt;.&lt;%Write(column.Alias);%&gt; = SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;);&lt;%
			}
		}
	}
	else
	{
		if (column.IsNullable &amp;&amp; CSharp.GetDataType(column) == "string")
		{
		%&gt;rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;) ? null : rdr.&lt;%Write(CSharp.GetDataReaderType(column));%&gt;(&lt;%Write(index.ToString());%&gt;)&lt;%
		}
		else if (column.IsNullable &amp;&amp; CSharp.GetDataType(column) != "string")
		{
		%&gt;rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;) ? null : (&lt;%Write(CSharp.GetDataType(column));%&gt;)rdr.&lt;%Write(CSharp.GetDataReaderType(column));%&gt;(&lt;%Write(index.ToString());%&gt;)&lt;%
		}
		else
		{
		%&gt;rdr.&lt;%Write(CSharp.GetDataReaderType(column));%&gt;(&lt;%Write(index.ToString());%&gt;)&lt;%
		}
	}
}

if (scriptObject.IsView || scriptObject.IsStoredProcedure)
{
	if (SQLServer.IsDataTypeBinary(column))
	{
		if (column.IsNullable)
		{
			%&gt;rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;) ? null : SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;)&lt;%
		}
		else
		{
			%&gt;SQLHelper.GetBytes(rdr, &lt;%Write(index.ToString());%&gt;)&lt;%
		}
	}
	else
	{
		if (column.IsNullable)
		{
			%&gt;rdr.IsDBNull(&lt;%Write(index.ToString());%&gt;) ? null : (&lt;%Write(CSharp.GetDataType(column));%&gt;)rdr.&lt;%Write(CSharp.GetDataReaderType(column));%&gt;(&lt;%Write(index.ToString());%&gt;)&lt;%
		}
		else
		{
			%&gt;rdr.&lt;%Write(CSharp.GetDataReaderType(column));%&gt;(&lt;%Write(index.ToString());%&gt;)&lt;%
		}
	}
}
%&gt;</function>
  <function name="GetSQLServerDALScriptObject" returntype="C#" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />&lt;%
if (scriptObject.IsUserDefined)
{
	SkipCurrentFile = true;
	return "";
}
string connectionStringReference = "SQLHelper." + scriptObject.Database.ConnectionString.DatabaseName + "ConnectionString";

Column[] columns = CSharp.GetSelectColumns(scriptObject);

Column[] nonIdentityPrimaryKeyColumns = new Column[0];
Column identityPrimaryKeyColumn = null;

if (scriptObject.IsTable)
{
	Table table = (Table)scriptObject;
	nonIdentityPrimaryKeyColumns = GetNonIdentityPrimaryKeyColumns(table.PrimaryKeyColumns);
	
	foreach (Column primaryKeyColumn in table.PrimaryKeyColumns)
	{
		if (primaryKeyColumn.IsIdentity)
		{
			identityPrimaryKeyColumn = primaryKeyColumn;
			break;
		}
	}
}

%&gt;using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using &lt;%Write(UserOptions.ProjectName);%&gt;.DBUtility;

// References to &lt;%Write(UserOptions.ProjectName);%&gt; specific libraries
using &lt;%Write(UserOptions.ProjectName);%&gt;.Model;&lt;%
if (!UserOptions.SkipIDAL)
{%&gt;
using &lt;%Write(UserOptions.ProjectName);%&gt;.IDAL;&lt;%
}%&gt;

namespace &lt;%Write(UserOptions.ProjectName);%&gt;.SQLServerDAL
{	
	/// &lt;summary&gt;
	/// &lt;%Write(scriptObject.Alias);%&gt; SQLServer Data Access Layer
	/// &lt;/summary&gt;
	public class &lt;%Write(scriptObject.Alias); if (!UserOptions.SkipIDAL) { %&gt; : I&lt;%Write(scriptObject.Alias); }%&gt;
	{&lt;%

if (UserOptions.UseStoredProcedures)
{%&gt;
		/// &lt;summary&gt;
		/// Stored Procedure names
		/// &lt;/summary&gt;&lt;%
		
	foreach (Filter filter in scriptObject.Filters)
	{
		if (scriptObject.IsTable || scriptObject.IsView)
		{%&gt;
		private const string SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt; = "&lt;% Write(UserOptions.StoredProcedureSelectPrefix + RemoveGetSP(filter.Alias));%&gt;";&lt;%
		}
		
		if (scriptObject.IsStoredProcedure)
		{
			StoredProcedure storedProcedure = (StoredProcedure)scriptObject;
		%&gt;
		private const string SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt; = "&lt;% Write(filter.Name);%&gt;";&lt;%
		}		
	}
	
	if (scriptObject.IsTable || scriptObject.IsView)
	{%&gt;
		private const string SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER = "&lt;%Write(UserOptions.StoredProcedureSelectPrefix + scriptObject.AliasPlural);%&gt;ByFilter";&lt;%
	}
	
	if (scriptObject.IsTable)
	{%&gt;
		private const string SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(UserOptions.StoredProcedureInsertPrefix + scriptObject.Alias);%&gt;";
		private const string SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(UserOptions.StoredProcedureUpdatePrefix + scriptObject.Alias);%&gt;";
		private const string SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(UserOptions.StoredProcedureDeletePrefix + scriptObject.Alias);%&gt;";&lt;%
	}
}
else // Generating Inline SQL
{%&gt;
		/// &lt;summary&gt;
		/// Inline SQL
		/// &lt;/summary&gt;&lt;%
	if (scriptObject.IsTable)
	{
		Table table = (Table)scriptObject;
		if (identityPrimaryKeyColumn != null)
		{%&gt;
		private const string SQL_SELECT_LAST_INSERT = "SELECT TOP 1 &lt;%Write(identityPrimaryKeyColumn.Name);%&gt; FROM &lt;%Write(scriptObject.Name);%&gt; ORDER BY &lt;%Write(identityPrimaryKeyColumn.Name);%&gt; DESC";&lt;%
		}
	}
		
	foreach (Filter filter in scriptObject.Filters)
	{%&gt;
		private const string SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt; = "&lt;%
		
		if (filter.CreateStoredProcedure)
		{
			Write(GetSelectFilterInlineSQL(scriptObject, filter));%&gt;";&lt;%
		}
		else
		{
			%&gt;##USER SQL HERE##";&lt;%
		}
	}
	
	if (scriptObject.IsTable || scriptObject.IsView)
	{%&gt;
		private const string SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER = "&lt;%Write(GetSelectByFilterInlineSQL(scriptObject));%&gt;";&lt;%
	}
		
	if (scriptObject.IsTable)
	{
		Table table = (Table)scriptObject;%&gt;
		private const string SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(GetInsertInlineSQL(table));%&gt;";
		private const string SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(GetUpdateInlineSQL(table));%&gt;";
		private const string SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt; = "&lt;%Write(GetDeleteInlineSQL(table));%&gt;";&lt;%
	}
}

if (UserOptions.UseStoredProcedures)
{%&gt;

		/// &lt;summary&gt;
		/// Parameters for stored procedures
		/// &lt;/summary&gt;&lt;%
}
else
{%&gt;

		/// &lt;summary&gt;
		/// Parameters for Inline SQL
		/// &lt;/summary&gt;&lt;%
}

System.Collections.ArrayList parms = new System.Collections.ArrayList();
foreach (Column column in columns)
{
	if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
	{%&gt;
		private const string PARM_ORIGINAL_&lt;%Write(column.Alias.ToUpper());%&gt; = "@Original&lt;%Write(column.Alias);%&gt;";&lt;%
		parms.Add("PARM_ORIGINAL_" + column.Alias.ToUpper());
	}%&gt;
		private const string PARM_&lt;%Write(column.Alias.ToUpper());%&gt; = "@&lt;%Write(column.Alias);%&gt;";&lt;%
		parms.Add("PARM_" + column.Alias.ToUpper());
}

foreach (Filter filter in scriptObject.Filters)
{
	foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
	{
		bool isNew = true;
		foreach (string parm in parms)
		{
			if (parm == "PARM_" + filterColumn.Column.Alias.ToUpper())
			{
				isNew = false;
			}
		}

		if (isNew)
		{%&gt;
		private const string PARM_&lt;%Write(filterColumn.Column.Alias.ToUpper());%&gt; = "@&lt;%Write(filterColumn.Column.Alias);%&gt;";&lt;%
			parms.Add("PARM_" + filterColumn.Column.Alias.ToUpper());
		}
	}
}

foreach (Filter filter in scriptObject.Filters)
{
	foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
	{
		if (filterColumn.Alias == "" || filterColumn.Alias == null)
		{
			continue;
		}
		
		bool isNew = true;
		foreach (string parm in parms)
		{
			if (parm == "PARM_" + filterColumn.Alias.ToUpper())
			{
				isNew = false;
			}
		}

		if (isNew)
		{%&gt;
		private const string PARM_&lt;%Write(filterColumn.Alias.ToUpper());%&gt; = "@&lt;%Write(filterColumn.Alias);%&gt;";&lt;%
			parms.Add("PARM_" + filterColumn.Alias.ToUpper());
		}
	}
}%&gt;

		/// &lt;summary&gt;
		/// &lt;%Write(scriptObject.Alias);%&gt; Constructor
		/// &lt;/summary&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;()
		{
		}&lt;%

foreach (Filter filter in scriptObject.Filters)
{
	if (!filter.IsReturnTypeCollection)
	{%&gt;

		/// &lt;summary&gt;
		/// Get a specific &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Unique Constraint&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/returns&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;)
		{
			// Set up a return value
			&lt;%Write(scriptObject.Alias);%&gt;Info new&lt;%Write(scriptObject.Alias);%&gt; = null;

			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms = &lt;%Write(filter.Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
		for (int i=0; i&lt;filter.FilterColumns.Length; i++)
		{
			Filter.FilterColumn filterColumn = filter.FilterColumns[i];
			string filterAlias = filterColumn.Alias;

			if (filterAlias == "" || filterAlias == null)
			{
				filterAlias = filterColumn.Column.Alias;
			}
			else
			{
				filterAlias = Script.GetCamelCase(filterAlias);
			}%&gt;
			&lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(filterAlias);%&gt;;&lt;%
		}%&gt;

			// Execute the query
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(&lt;%Write(connectionStringReference);%&gt;, &lt;%
		if (UserOptions.UseStoredProcedures)
		{
			%&gt;CommandType.StoredProcedure&lt;%
		}
		else
		{
			%&gt;CommandType.Text&lt;%
		}%&gt;, SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms))
			{
				rdr.Read();
				if (rdr.HasRows)
				{
					new&lt;%Write(scriptObject.Alias);%&gt; = new &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%
	
		for (int i=0; i&lt;columns.Length; i++)
		{	
			Column column = columns[i];
			Write(GetSQLServerDALColumnUpdateTable(scriptObject, column, i, true));
			
			if (i&lt;columns.Length - 1)
			{
				Write(", ");
			}
		}
		%&gt;);
				}
			}

			return new&lt;%Write(scriptObject.Alias);%&gt;;
		}&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Get a specific &lt;%Write(scriptObject.Alias);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Unique Constraint&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/returns&gt;
		public &lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));	if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;SqlTransaction trans)
		{
			// Set up a return value
			&lt;%Write(scriptObject.Alias);%&gt;Info new&lt;%Write(scriptObject.Alias);%&gt; = null;

			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms = &lt;%Write(filter.Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
		for (int i=0; i&lt;filter.FilterColumns.Length; i++)
		{
			Filter.FilterColumn filterColumn = filter.FilterColumns[i];
			string filterAlias = filterColumn.Alias;

			if (filterAlias == "" || filterAlias == null)
			{
				filterAlias = filterColumn.Column.Alias;
			}
			else
			{
				filterAlias = Script.GetCamelCase(filterAlias);
			}%&gt;
			&lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(filterAlias);%&gt;;&lt;%
		}%&gt;

			// Execute the query
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(trans, &lt;%
		if (UserOptions.UseStoredProcedures)
		{
			%&gt;CommandType.StoredProcedure&lt;%
		}
		else
		{
			%&gt;CommandType.Text&lt;%
		}%&gt;, SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms))
			{
				rdr.Read();
				if (rdr.HasRows)
				{
					new&lt;%Write(scriptObject.Alias);%&gt; = new &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%
			
		for (int i=0; i&lt;columns.Length; i++)
		{	
			Column column = columns[i];
			Write(GetSQLServerDALColumnUpdateTable(scriptObject, column, i, true));
			
			if (i&lt;columns.Length - 1)
			{
				Write(", ");
			}
		}%&gt;);
				}
			}

			return new&lt;%Write(scriptObject.Alias);%&gt;;
		}&lt;%
		}
	}
	else
	{%&gt;

		/// &lt;summary&gt;
		/// Get a collection of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
		foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
		{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
		}%&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt; List&lt;/returns&gt;
		public IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter));%&gt;)
		{
			IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; new&lt;%Write(scriptObject.AliasPlural);%&gt; = new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();

			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms = &lt;%Write(filter.Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
			for (int i=0; i&lt;filter.FilterColumns.Length; i++)
			{
				Filter.FilterColumn filterColumn = filter.FilterColumns[i];
				string filterAlias = filterColumn.Alias;

				if (filterAlias == "" || filterAlias == null)
				{
					filterAlias = filterColumn.Column.Alias;
				}
				else
				{
					filterAlias = Script.GetCamelCase(filterAlias);
				}%&gt;
			&lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(filterAlias);%&gt;;&lt;%
			}%&gt;

			// Execute the query against the database
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(&lt;%Write(connectionStringReference);%&gt;, &lt;%
		if (UserOptions.UseStoredProcedures)
		{
			%&gt;CommandType.StoredProcedure&lt;%
		}
		else
		{
			%&gt;CommandType.Text&lt;%
		}%&gt;, SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms))
			{
				// Scroll through the results
				while (rdr.Read())
				{
					&lt;%Write(scriptObject.Alias);%&gt;Info new&lt;%Write(scriptObject.Alias);%&gt; = new &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%
	
		for (int i=0; i&lt;columns.Length; i++)
		{	
			Column column = columns[i];
			Write(GetSQLServerDALColumnUpdateTable(scriptObject, column, i, false));
			
			if (i&lt;columns.Length - 1)
			{
				Write(", ");
			}
		}%&gt;);

					// Add each &lt;%Write(scriptObject.Alias);%&gt; to the list
					new&lt;%Write(scriptObject.AliasPlural);%&gt;.Add(new&lt;%Write(scriptObject.Alias);%&gt;);
				}
			}

			return new&lt;%Write(scriptObject.AliasPlural);%&gt;;
		}&lt;%
		
		if (UserOptions.IncludeBulkUpdate)
		{%&gt;
		
		/// &lt;summary&gt;
		/// Get a collection of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;&lt;%
			foreach (Filter.FilterColumn filterColumn in filter.FilterColumns)
			{%&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(filterColumn.Column.Alias));%&gt;"&gt;Constraint for a &lt;%Write(scriptObject.Alias);%&gt;&lt;/param&gt;&lt;%
			}%&gt;
		/// &lt;param name="trans"&gt;Transaction to run select within&lt;/param&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt; List&lt;/returns&gt;
		public IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; &lt;%Write(filter.Alias);%&gt;(&lt;%Write(CSharp.GetFilterValueAndDataTypeString(filter)); 	if (filter.FilterColumns.Length &gt; 0) {%&gt;, &lt;%}%&gt;SqlTransaction trans)
		{
			IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; new&lt;%Write(scriptObject.AliasPlural);%&gt; = new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();

			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms = &lt;%Write(filter.Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
			for (int i=0; i&lt;filter.FilterColumns.Length; i++)
			{
				Filter.FilterColumn filterColumn = filter.FilterColumns[i];
				string filterAlias = filterColumn.Alias;

				if (filterAlias == "" || filterAlias == null)
				{
					filterAlias = filterColumn.Column.Alias;
				}
				else
				{
					filterAlias = Script.GetCamelCase(filterAlias);
				}%&gt;
			&lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(filterAlias);%&gt;;&lt;%
			}%&gt;

			// Execute the query against the database
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(trans, &lt;%
			if (UserOptions.UseStoredProcedures)
			{
				%&gt;CommandType.StoredProcedure&lt;%
			}
			else
			{
				%&gt;CommandType.Text&lt;%
			}%&gt;, SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(filter.Alias));%&gt;Parms))
			{
				// Scroll through the results
				while (rdr.Read())
				{
					&lt;%Write(scriptObject.Alias);%&gt;Info new&lt;%Write(scriptObject.Alias);%&gt; = new &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%
			
			for (int i=0; i&lt;columns.Length; i++)
			{	
				Column column = columns[i];
				Write(GetSQLServerDALColumnUpdateTable(scriptObject, column, i, false));
				
				if (i&lt;columns.Length - 1)
				{
					Write(", ");
				}
			}%&gt;);

					// Add each &lt;%Write(scriptObject.Alias);%&gt; to the list
					new&lt;%Write(scriptObject.AliasPlural);%&gt;.Add(new&lt;%Write(scriptObject.Alias);%&gt;);
				}
			}

			return new&lt;%Write(scriptObject.AliasPlural);%&gt;;
		}&lt;%
		}
	}
}

if (scriptObject.IsTable || scriptObject.IsView)
{%&gt;

		/// &lt;summary&gt;
		/// Get a filtered collection of &lt;%Write(scriptObject.AliasPlural);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="fieldName"&gt;Database Field to filter on&lt;/param&gt;
		/// &lt;param name="operatorValue"&gt;SQL boolean operator (like, =, &lt;, &gt;, &lt;&gt;, &gt;=, &lt;=)&lt;/param&gt;
		/// &lt;param name="fieldValue"&gt;Data to search for&lt;/param&gt;
		/// &lt;returns&gt;&lt;%Write(scriptObject.Alias);%&gt; List&lt;/returns&gt;
		public IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; Get&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter(string fieldName, string operatorValue, string fieldValue)
		{
			IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; new&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter = new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
			
			// Validate OperatorValue
			if (string.IsNullOrEmpty(fieldName) || string.IsNullOrEmpty(operatorValue) || string.IsNullOrEmpty(fieldValue))
			{
				return new&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter;
			}
			
			if (string.Compare(operatorValue, "like", true, new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"])) == 0)
			{
				fieldValue = "%" + fieldValue + "%";
			}&lt;%

	if (UserOptions.UseStoredProcedures)
	{%&gt;

			// Create the parameters
			SqlParameter[] filterParms = GetParametersByFilter();

			// Bind the parameters
			filterParms[0].Value = fieldName;
			filterParms[1].Value = operatorValue;
			filterParms[2].Value = fieldValue;&lt;%
	}
	else
	{%&gt;

			// Create a parameter
			SqlParameter parm = new SqlParameter("@FieldValue", SqlDbType.VarChar, 50);

			// Bind the parameter
			parm.Value = fieldValue;&lt;%
	}%&gt;

			// Execute the query against the database&lt;%
	if (UserOptions.UseStoredProcedures)
	{%&gt;
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(&lt;%Write(connectionStringReference);%&gt;, CommandType.StoredProcedure, SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER, filterParms))&lt;%
	}
	else
	{%&gt;
			using (SqlDataReader rdr = SQLHelper.ExecuteReader(&lt;%Write(connectionStringReference);%&gt;, CommandType.Text, SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER.Replace("#FieldName#", fieldName).Replace("#Operator#", operatorValue), parm))&lt;%
	}%&gt;
			{
				// Scroll through the results
				while (rdr.Read())
				{
					&lt;%Write(scriptObject.Alias);%&gt;Info new&lt;%Write(scriptObject.Alias);%&gt; = new &lt;%Write(scriptObject.Alias);%&gt;Info(&lt;%
	
	for (int i=0; i&lt;columns.Length; i++)
	{	
		Column column = columns[i];
		Write(GetSQLServerDALColumnUpdateTable(scriptObject, column, i, false));
		
		if (i &lt; columns.Length - 1)
		{
			Write(", ");
		}
	}%&gt;);

					// Add each &lt;%Write(scriptObject.Alias);%&gt; to the list
					new&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter.Add(new&lt;%Write(scriptObject.Alias);%&gt;);
				}
			}

			return new&lt;%Write(scriptObject.AliasPlural);%&gt;ByFilter;
		}&lt;%
}

// Relationships
foreach (Relationship relationship in scriptObject.Relationships)
{
	string primaryAlias = relationship.PrimaryScriptObject.Alias;
	string foreignAlias = relationship.ForeignScriptObject.Alias;
	
	if (relationship.ForeignRelationship == null)
	{
		throw new Exception(relationship.GetType().Name + "_" + relationship.Alias);
	}
	
	if (//relationship.GetType() == typeof(OneToOneRelationship) ||
		relationship.GetType() == typeof(ManyToOneRelationship))
	{%&gt;
	
		/// &lt;summary&gt;
		/// Fill a specific &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which a specific &lt;%Write(relationship.Alias);%&gt; is added&lt;/param&gt;
		public void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;)
		{
			// Validate &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt; == null)
			{
				return;
			}&lt;%
			
		foreach (Column primaryColumn in relationship.PrimaryColumns)
		{
			if (primaryColumn.IsNullable)
			{%&gt;
			
			if (&lt;%=Script.GetCamelCase(primaryAlias) +"."+ primaryColumn.Alias;%&gt; == null)
			{
				return;
			}&lt;%
			}
		}%&gt;
			
			&lt;%
			string relationshipObjName;
			
			// Make sure we don't name the child object the same as the parameter
			if (Script.GetCamelCase(relationship.Alias) != Script.GetCamelCase(primaryAlias))
			{
				relationshipObjName = Script.GetCamelCase(relationship.Alias);
			}
			else
			{
				relationshipObjName = "new"+ Script.GetCamelCase(relationship.Alias);
			}
			Write(foreignAlias);%&gt;Info &lt;%Write(relationshipObjName);%&gt; = new &lt;%
			Write(foreignAlias);%&gt;().&lt;%Write(relationship.ForeignRelationship.Filter.Alias);
			%&gt;(&lt;%
			Write(CSharp.GetKeyValueStringWithClass(relationship.PrimaryColumns, Script.GetCamelCase(primaryAlias)));
			%&gt;);
			&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;.&lt;%Write(relationship.Alias);%&gt; = &lt;%Write(relationshipObjName);%&gt;;
		}&lt;%
	}
	
	if (relationship.GetType() == typeof(OneToManyRelationship) ||
		relationship.GetType() == typeof(ManyToManyRelationship))
	{%&gt;
	
		/// &lt;summary&gt;
		/// Fill &lt;%Write(relationship.Alias);%&gt; related to a specific &lt;%Write(primaryAlias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;"&gt;&lt;%Write(primaryAlias);%&gt; to which &lt;%Write(relationship.Alias);%&gt; are added&lt;/param&gt;
		public void Fill&lt;%Write(relationship.Alias);%&gt;(&lt;%Write(primaryAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;)
		{
			// Validate &lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt; == null)
			{
				return;
			}&lt;%
			
		foreach (Column primaryColumn in relationship.PrimaryColumns)
		{
			if (primaryColumn.IsNullable)
			{%&gt;
			
			if (&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt; == null)
			{
				return;
			}&lt;%
			}
		}
	
		if (relationship.GetType() == typeof(OneToManyRelationship))
		{%&gt;
			
			List&lt;&lt;%Write(foreignAlias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; = (List&lt;&lt;%Write(foreignAlias);%&gt;Info&gt;)new &lt;%
			Write(foreignAlias);%&gt;().&lt;%Write(relationship.ForeignRelationship.Filter.Alias);
			%&gt;(&lt;%
			Write(CSharp.GetKeyValueStringWithClass(relationship.PrimaryColumns, Script.GetCamelCase(primaryAlias)));
			%&gt;);
			&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;.&lt;%Write(relationship.Alias);%&gt; = (&lt;%Write(foreignAlias);%&gt;Info[])&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;.ToArray();&lt;%
		}
		
		if (relationship.GetType() == typeof(ManyToManyRelationship))
		{
			ManyToManyRelationship manyToManyRelationship = (ManyToManyRelationship)relationship;
			string intermediateAlias = manyToManyRelationship.IntermediatePrimaryRelationship.ForeignScriptObject.Alias;
			string intermediatePrimaryRelationshipAlias = Script.GetSingular(manyToManyRelationship.IntermediatePrimaryRelationship.Alias);
			string intermediatePrimaryRelationshipAliasPlural = manyToManyRelationship.IntermediatePrimaryRelationship.Alias;
			string intermediateForeignRelationshipAlias = Script.GetSingular(manyToManyRelationship.IntermediateForeignRelationship.Alias);
			string intermediateForeignRelationshipAliasPlural = manyToManyRelationship.IntermediateForeignRelationship.Alias;
			string finalAlias = Script.GetSingular(relationship.Alias);
			
		%&gt;
		
			List&lt;&lt;%Write(foreignAlias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt; = new List&lt;&lt;%Write(foreignAlias);%&gt;Info&gt;();
			
			IList&lt;&lt;%Write(intermediateAlias);%&gt;Info&gt; &lt;%Write(Script.GetCamelCase(intermediatePrimaryRelationshipAliasPlural));%&gt; = new &lt;%
			Write(intermediateAlias);%&gt;().&lt;%Write(manyToManyRelationship.IntermediatePrimaryRelationship.ForeignRelationship.Filter.Alias);
				%&gt;(&lt;%
				Write(CSharp.GetKeyValueStringWithClass(manyToManyRelationship.IntermediatePrimaryRelationship.PrimaryColumns, Script.GetCamelCase(primaryAlias)));
				%&gt;);
			foreach (&lt;%Write(intermediateAlias);%&gt;Info new&lt;%Write(intermediatePrimaryRelationshipAlias);%&gt; in &lt;%Write(Script.GetCamelCase(intermediatePrimaryRelationshipAliasPlural));%&gt;)
			{
				&lt;%Write(foreignAlias);%&gt;Info &lt;%Write(Script.GetCamelCase(finalAlias));%&gt; = new &lt;%
				Write(foreignAlias);%&gt;().&lt;%Write(relationship.ForeignRelationship.Filter.Alias);
				%&gt;(&lt;%
				Write(CSharp.GetKeyValueStringWithClass(manyToManyRelationship.IntermediateForeignRelationship.PrimaryColumns, "new" + intermediatePrimaryRelationshipAlias));
				%&gt;);&lt;%
			
				foreach (Column primaryColumn in manyToManyRelationship.ForeignRelationship.PrimaryColumns)
				{
					if (primaryColumn.IsNullable)
					{%&gt;
					
				if (&lt;%Write(Script.GetCamelCase(foreignAlias));%&gt; == null)
				{
					continue;
				}&lt;%
					}
				}%&gt;
				&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;.Add(&lt;%Write(Script.GetCamelCase(finalAlias));%&gt;);
			}
			
			&lt;%Write(Script.GetCamelCase(primaryAlias));%&gt;.&lt;%Write(relationship.Alias);%&gt; = (&lt;%Write(foreignAlias);%&gt;Info[])&lt;%Write(Script.GetCamelCase(relationship.Alias));%&gt;.ToArray();&lt;%
		}%&gt;
		}&lt;%
	}
}

if (scriptObject.IsTable)
{
	Table table = (Table)scriptObject;
	Table[] updateTables = Script.GetUpdateTables(table);%&gt;

		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt; into the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		public void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{
			// Execute the query
			using (SqlConnection conn = new SqlConnection(&lt;%Write(connectionStringReference);%&gt;))
			{
				conn.Open();
				using (SqlTransaction trans = conn.BeginTransaction())
				{
					try
					{&lt;%
	
	foreach (Table updateTable in updateTables)
	{
		if (updateTable.Name == table.Name)
		{
			continue;
		}%&gt;
						// Update component table &lt;%Write(updateTable.Alias);%&gt;
                        new &lt;%Write(updateTable.Alias);%&gt;().Insert((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
						
						// Update the parameters after the parent has been inserted: to get the auto-generated keys etc.&lt;%
	}%&gt;
						SqlParameter[] &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms = GetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters();
						SetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);
	&lt;%
					
	if (UserOptions.UseStoredProcedures)
	{
		if (identityPrimaryKeyColumn != null)
		{%&gt;
						&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; = &lt;%Write(CSharp.GetASCXConvertStart(identityPrimaryKeyColumn));%&gt;SQLHelper.ExecuteScalar(trans, CommandType.StoredProcedure, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms), new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"])&lt;%Write(CSharp.GetASCXConvertEnd(identityPrimaryKeyColumn));%&gt;;&lt;%
		}
		else
		{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
		}
	}
	else
	{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
		if (!UserOptions.UseStoredProcedures &amp;&amp; identityPrimaryKeyColumn != null)
		{%&gt;
		
						// Get &lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; of last inserted &lt;%Write(scriptObject.Alias);%&gt;
						&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; = &lt;%Write(CSharp.GetASCXConvertStart(identityPrimaryKeyColumn));%&gt;SQLHelper.ExecuteScalar(trans, CommandType.Text, SQL_SELECT_LAST_INSERT), new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"])&lt;%Write(CSharp.GetASCXConvertEnd(identityPrimaryKeyColumn));%&gt;;
&lt;%
		}
	}%&gt;
						trans.Commit();
					}
					catch
					{
						trans.Rollback();
						throw;
					}
				}
			}
		}

		/// &lt;summary&gt;
		/// Update a specific &lt;%Write(scriptObject.Alias);%&gt; in the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		public void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{
			SqlParameter[] &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms = GetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters();
			SetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);

			// Execute the query
			using (SqlConnection conn = new SqlConnection(&lt;%Write(connectionStringReference);%&gt;))
			{
				conn.Open();
				using (SqlTransaction trans = conn.BeginTransaction())
				{
					try
					{&lt;%
	
	foreach (Table updateTable in updateTables)
	{
		if (updateTable.Name == table.Name)
		{
			continue;
		}%&gt;
						// Update component table &lt;%Write(updateTable.Alias);%&gt;
                        new &lt;%Write(updateTable.Alias);%&gt;().Update((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
&lt;%
	}
	
	if (UserOptions.UseStoredProcedures)
	{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
	}
	else
	{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
	}%&gt;
						trans.Commit();
					}
					catch
					{
						trans.Rollback();
						throw;
					}
				}
			}
		}

		/// &lt;summary&gt;
		/// Delete a specific &lt;%Write(scriptObject.Alias);%&gt; from the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		public void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	if (table.PrimaryKeyColumns.Length == 1)
	{%&gt;
			// Create a parameter
			SqlParameter parm = new SqlParameter(PARM_&lt;%Write(table.PrimaryKeyColumns[0].Alias.ToUpper());%&gt;, &lt;%Write(CSharp.GetDatabaseType(table.PrimaryKeyColumns[0]));%&gt;);

			// Bind the parameter
			parm.Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(table.PrimaryKeyColumns[0].Alias);%&gt;;&lt;%
	}
	else
	{%&gt;
			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms = &lt;%Write(table.Filters[1].Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
		for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
		{
			Column primaryKeyColumn = table.PrimaryKeyColumns[i];%&gt;
			&lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;;&lt;%
		}
	}%&gt;

			// Execute the query
			using (SqlConnection conn = new SqlConnection(&lt;%Write(connectionStringReference);%&gt;))
			{
				conn.Open();
				using (SqlTransaction trans = conn.BeginTransaction())
				{
					try
					{&lt;%
		
	if (UserOptions.UseStoredProcedures)
	{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());
	}
	else
	{%&gt;
						SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());
	}
	if (table.PrimaryKeyColumns.Length == 1)
	{
	%&gt;, parm);&lt;%
	}
	else
	{
	%&gt;, &lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms);&lt;%
	}
	
	foreach (Table updateTable in updateTables)
	{
		if (updateTable.Name == table.Name)
		{
			continue;
		}%&gt;
		
						// Update component table &lt;%Write(updateTable.Alias);%&gt;
                        new &lt;%Write(updateTable.Alias);%&gt;().Delete((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
&lt;%
	}%&gt;
						trans.Commit();
					}
					catch
					{
						trans.Rollback();
						throw;
					}
				}
			}
		}&lt;%
		
	if (UserOptions.IncludeBulkUpdate)
	{%&gt;
	
		/// &lt;summary&gt;
		/// Insert a new &lt;%Write(scriptObject.Alias);%&gt; into the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run insert within&lt;/param&gt;
		public void Insert(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, SqlTransaction trans)
		{
			SqlParameter[] &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms = GetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters();
			SetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);&lt;%
	
		foreach (Table updateTable in updateTables)
		{
			if (updateTable.Name == table.Name)
			{
				continue;
			}%&gt;
			
			// Update component table &lt;%Write(updateTable.Alias);%&gt;
            new &lt;%Write(updateTable.Alias);%&gt;().Insert((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);&lt;%
		}%&gt;
		
			// Execute the query&lt;%
		if (UserOptions.UseStoredProcedures)
		{
			if (identityPrimaryKeyColumn != null)
			{%&gt;
			&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; = &lt;%Write(CSharp.GetASCXConvertStart(identityPrimaryKeyColumn));%&gt;SQLHelper.ExecuteScalar(trans, CommandType.StoredProcedure, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms), new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"])&lt;%Write(CSharp.GetASCXConvertEnd(identityPrimaryKeyColumn));%&gt;;&lt;%
			}
			else
			{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
			}
		}
		else
		{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
		}
	
		if (!UserOptions.UseStoredProcedures &amp;&amp; identityPrimaryKeyColumn != null)
		{%&gt;
		
			// Get &lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; of last inserted &lt;%Write(scriptObject.Alias);%&gt;
			&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(identityPrimaryKeyColumn.Alias);%&gt; = &lt;%Write(CSharp.GetASCXConvertStart(identityPrimaryKeyColumn));%&gt;SQLHelper.ExecuteScalar(trans, CommandType.Text, SQL_SELECT_LAST_INSERT), new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["culture"])&lt;%Write(CSharp.GetASCXConvertEnd(identityPrimaryKeyColumn));%&gt;;&lt;%
		}%&gt;
		}
		
		/// &lt;summary&gt;
		/// Update a specific &lt;%Write(scriptObject.Alias);%&gt; in the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		public void Update(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, SqlTransaction trans)
		{
			SqlParameter[] &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms = GetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters();
			SetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;);&lt;%
	
		foreach (Table updateTable in updateTables)
		{
			if (updateTable.Name == table.Name)
			{
				continue;
			}%&gt;
			
			// Update component table &lt;%Write(updateTable.Alias);%&gt;
            new &lt;%Write(updateTable.Alias);%&gt;().Update((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);&lt;%
		}%&gt;

			// Execute the query&lt;%
		if (UserOptions.UseStoredProcedures)
		{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
		}
		else
		{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;Parms);&lt;%
		}%&gt;
		}

		/// &lt;summary&gt;
		/// Delete a specific &lt;%Write(scriptObject.Alias);%&gt; from the database
		/// &lt;/summary&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;&lt;%Write(scriptObject.Alias);%&gt;Info&lt;/param&gt;
		/// &lt;param name="trans"&gt;Transaction to run update within&lt;/param&gt;
		public void Delete(&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, SqlTransaction trans)
		{&lt;%
		if (table.PrimaryKeyColumns.Length == 1)
		{%&gt;
			// Create a parameter
			SqlParameter parm = new SqlParameter(PARM_&lt;%Write(table.PrimaryKeyColumns[0].Alias.ToUpper());%&gt;, &lt;%Write(CSharp.GetDatabaseType(table.PrimaryKeyColumns[0]));%&gt;);

			// Bind the parameter
			parm.Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(table.PrimaryKeyColumns[0].Alias);%&gt;;&lt;%
		}
		else
		{%&gt;
			// Create the parameters
			SqlParameter[] &lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms = &lt;%Write(table.Filters[1].Alias);%&gt;Parameters();

			// Bind the parameters&lt;%
			for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
			{
				Column primaryKeyColumn = table.PrimaryKeyColumns[i];%&gt;
			&lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms[&lt;%Write(i.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(primaryKeyColumn.Alias);%&gt;;&lt;%
			}
		}%&gt;

			// Execute the query&lt;%
		if (UserOptions.UseStoredProcedures)
		{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.StoredProcedure, SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());
		}
		else
		{%&gt;
			SQLHelper.ExecuteNonQuery(trans, CommandType.Text, SQL_DELETE_&lt;%Write(scriptObject.Alias.ToUpper());
		}
		if (table.PrimaryKeyColumns.Length == 1)
		{
	%&gt;, parm);&lt;%
		}
		else
		{
	%&gt;, &lt;%Write(Script.GetCamelCase(table.Alias));%&gt;Parms);&lt;%
		}
		
		foreach (Table updateTable in updateTables)
		{
			if (updateTable.Name == table.Name)
			{
				continue;
			}%&gt;
			
			// Update component table &lt;%Write(updateTable.Alias);%&gt;
            new &lt;%Write(updateTable.Alias);%&gt;().Delete((&lt;%Write(updateTable.Alias);%&gt;Info)&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);&lt;%
		}%&gt;
		}
		
		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;param name="customBulkUpdateCallBack"&gt;Call back function to execute&lt;/param&gt;
		/// &lt;/summary&gt;
		public void BulkUpdate(&lt;%Write(scriptObject.Alias);%&gt;Info.CustomBulkUpdateCallBack customBulkUpdateCallBack)
		{
			// Validate CustomBulkUpdateCallBack
			if (customBulkUpdateCallBack == null)
			{
				return;
			}
			
			using (SqlConnection conn = new SqlConnection(&lt;%Write(connectionStringReference);%&gt;))
			{
				conn.Open();
				using (SqlTransaction trans = conn.BeginTransaction())
				{
					try
					{
						customBulkUpdateCallBack(trans);
						trans.Commit();
					}
					catch
					{
						trans.Rollback();
						throw;
					}
				}
			}
		}
	
		/// &lt;summary&gt;
		/// Bulk Insert/Update/Delete
		/// &lt;/summary&gt;
		/// &lt;param name="original&lt;%Write(scriptObject.AliasPlural);%&gt;Original Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		/// &lt;param name="modified&lt;%Write(scriptObject.AliasPlural);%&gt;Modified Collection of &lt;%Write(scriptObject.AliasPlural);%&gt;&lt;/param&gt;
		public void BulkUpdate(IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; original&lt;%Write(scriptObject.AliasPlural);%&gt;, IList&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; modified&lt;%Write(scriptObject.AliasPlural);%&gt;)
		{
			// Validate CustomBulkUpdateCallBack
			if (original&lt;%Write(scriptObject.AliasPlural);%&gt; == null)
			{
				return;
			}
			
			if (modified&lt;%Write(scriptObject.AliasPlural);%&gt; == null)
			{
				return;
			}
			
			using (SqlConnection conn = new SqlConnection(&lt;%Write(connectionStringReference);%&gt;))
			{
				// Compare for all &lt;%Write(scriptObject.Alias.ToLower());%&gt; arrays
				SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; sortComparer = new SortComparer&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;(new string[] { &lt;%
						
		for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
		{
			Column column = table.PrimaryKeyColumns[i];
			%&gt;"&lt;%Write(column.Alias);%&gt;"&lt;%
			if (i &lt; table.PrimaryKeyColumns.Length - 1)
			{
				%&gt;, &lt;%
			}
		}			
				
				%&gt; }, System.ComponentModel.ListSortDirection.Ascending);
				
				List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; sortedModified&lt;%Write(scriptObject.AliasPlural);%&gt; = new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;(modified&lt;%Write(scriptObject.AliasPlural);%&gt;);
				sortedModified&lt;%Write(scriptObject.AliasPlural);%&gt;.Sort(sortComparer);
						
				// Get list of existing &lt;%Write(scriptObject.AliasPlural.ToLower());%&gt; outside transaction
				List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt; sortedExisting&lt;%Write(scriptObject.AliasPlural);%&gt; = new List&lt;&lt;%Write(scriptObject.Alias);%&gt;Info&gt;();
				foreach (&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt; in modified&lt;%Write(scriptObject.AliasPlural);%&gt;)
				{
					&lt;%Write(scriptObject.Alias);%&gt;Info existing&lt;%Write(scriptObject.Alias);%&gt; = &lt;%Write(scriptObject.Filters[1].Alias);%&gt;(&lt;%Write(CSharp.GetKeyValueStringWithClass(table.PrimaryKeyColumns, scriptObject.Alias));%&gt;);
					if (existing&lt;%Write(scriptObject.Alias);%&gt; != null)
					{
						sortedExisting&lt;%Write(scriptObject.AliasPlural);%&gt;.Add(existing&lt;%Write(scriptObject.Alias);%&gt;);
					}
				}
				sortedExisting&lt;%Write(scriptObject.AliasPlural);%&gt;.Sort(sortComparer);
				
				conn.Open();
				using (SqlTransaction trans = conn.BeginTransaction())
				{
					try
					{
						// Delete
						foreach (&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt; in original&lt;%Write(scriptObject.AliasPlural);%&gt;)
						{
							int index = sortedModified&lt;%Write(scriptObject.AliasPlural);%&gt;.BinarySearch(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, sortComparer);
							if (index &lt; 0)
							{
								Delete(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
							}
						}
						
						// Update and Insert
						foreach (&lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt; in modified&lt;%Write(scriptObject.AliasPlural);%&gt;)
						{
							int index = sortedExisting&lt;%Write(scriptObject.AliasPlural);%&gt;.BinarySearch(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, sortComparer);
							if (index &lt; 0)
							{
								Insert(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
							}
							else
							{
								Update(&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;, trans);
							}
						}
			
						trans.Commit();
					}
					catch
					{
						trans.Rollback();
						throw;
					}
				}
			}
		}&lt;%
}%&gt;
		
		/// &lt;summary&gt;
		/// Get database parameters for insert
		/// &lt;/summary&gt;
		/// &lt;returns&gt;Parameter array&lt;/returns&gt;
		private static SqlParameter[] GetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters()
		{
			SqlParameter[] parms = SQLHelper.GetCachedParameters(SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;);

			if (parms == null)
			{
				parms = new SqlParameter[]
				{&lt;%
	for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
	{
		Column column = table.UpdateableColumns[i];
	
		if (column.IsUserDefined)
		{
			continue;
		}
	
		if (column.IsIdentity)
		{
			continue;
		}%&gt;
					new SqlParameter(PARM_&lt;%Write(column.Alias.ToUpper());%&gt;, &lt;%Write(CSharp.GetDatabaseType(column));%&gt;)&lt;%
		if (i &lt; table.UpdateableColumns.Length - 1)
		{
			%&gt;,&lt;%
		}
	}%&gt;
				};
				SQLHelper.CacheParameters(SQL_INSERT_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, parms);
			}

			return parms;
		}

		/// &lt;summary&gt;
		/// Get database parameters for update
		/// &lt;/summary&gt;
		/// &lt;returns&gt;Parameter array&lt;/returns&gt;
		private static SqlParameter[] GetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters()
		{
			SqlParameter[] parms = SQLHelper.GetCachedParameters(SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;);

			if (parms == null)
			{
				parms = new SqlParameter[]
				{&lt;%
	for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
	{
		Column column = table.UpdateableColumns[i];
		
		if (column.IsUserDefined)
		{
			continue;
		}
		
		if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
		{%&gt;
					new SqlParameter(PARM_ORIGINAL_&lt;%Write(column.Alias.ToUpper());%&gt;, &lt;%Write(CSharp.GetDatabaseType(column));%&gt;),&lt;%
		}%&gt;
					new SqlParameter(PARM_&lt;%Write(column.Alias.ToUpper());%&gt;, &lt;%Write(CSharp.GetDatabaseType(column));%&gt;)&lt;%
		if (i &lt; table.UpdateableColumns.Length - 1)
		{
		%&gt;,&lt;%
		}
	}%&gt;
				};
				SQLHelper.CacheParameters(SQL_UPDATE_&lt;%Write(scriptObject.Alias.ToUpper());%&gt;, parms);
			}

			return parms;
		}

		/// &lt;summary&gt;
		/// Bind insert values to parameters
		/// &lt;/summary&gt;
		/// &lt;param name="parms"&gt;Database parameters&lt;/param&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;Values to bind to parameters&lt;/param&gt;
		private static void SetInsert&lt;%Write(scriptObject.Alias);%&gt;Parameters(SqlParameter[] parms, &lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	int intParam=0;
	foreach (Column column in table.UpdateableColumns)
	{
		if (column.IsUserDefined)
		{
			continue;
		}
		
		if (column.IsIdentity)
		{
			continue;
		}
		
		if (column.IsNullable)
		{%&gt;
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt; != null)
			{
				parms[&lt;%Write(intParam.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt;;
			}
			else
			{
				parms[&lt;%Write(intParam.ToString());%&gt;].Value = DBNull.Value;
			}&lt;%
			intParam++;
		}
		else
		{%&gt;
			parms[&lt;%Write(intParam.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt;;&lt;%
		intParam++;
		}
	}%&gt;
		}

		/// &lt;summary&gt;
		/// Bind update values to parameters
		/// &lt;/summary&gt;
		/// &lt;param name="parms"&gt;Database parameters&lt;/param&gt;
		/// &lt;param name="&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;"&gt;Values to bind to parameters&lt;/param&gt;
		private static void SetUpdate&lt;%Write(scriptObject.Alias);%&gt;Parameters(SqlParameter[] parms, &lt;%Write(scriptObject.Alias);%&gt;Info &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;)
		{&lt;%
	intParam=0;
	foreach (Column column in table.UpdateableColumns)
	{
		if (column.IsUserDefined)
		{
			continue;
		}
		
		if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
		{%&gt;
			parms[&lt;%Write(intParam.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.Original&lt;%Write(column.Alias);%&gt;;&lt;%
			intParam++;
		}
		
		if (column.IsNullable)
		{%&gt;
			if (&lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt; != null)
			{
				parms[&lt;%Write(intParam.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt;;
			}
			else
			{
				parms[&lt;%Write(intParam.ToString());%&gt;].Value = DBNull.Value;
			}&lt;%
		}
		else
		{%&gt;
			parms[&lt;%Write(intParam.ToString());%&gt;].Value = &lt;%Write(Script.GetCamelCase(scriptObject.Alias));%&gt;.&lt;%Write(column.Alias);%&gt;;&lt;%
		}
		intParam++;
	}%&gt;
		}&lt;%
}

foreach (Filter filter in scriptObject.Filters)
{
	if (!filter.IsReturnTypeCollection)
	{%&gt;
	
		/// &lt;summary&gt;
		/// Get unique constraints cached parameters
		/// &lt;/summary&gt;
		/// &lt;returns&gt;Parameter array&lt;/returns&gt;
		private static SqlParameter[] &lt;%Write(filter.Alias);%&gt;Parameters()
		{
			SqlParameter[] parms = SQLHelper.GetCachedParameters(SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;);

			if (parms == null) {
				parms = new SqlParameter[]
				{&lt;%
		for (int i=0; i&lt;filter.FilterColumns.Length; i++)
		{
			Filter.FilterColumn filterColumn = filter.FilterColumns[i];
			string filterAlias = filterColumn.Alias;

			if (filterAlias == "" || filterAlias == null)
			{
				filterAlias = filterColumn.Column.Alias.ToUpper();
			}
			else
			{
				filterAlias = filterAlias.ToUpper();
			}%&gt;
					new SqlParameter("@&lt;%Write(filterAlias);%&gt;", &lt;%Write(CSharp.GetDatabaseType(filterColumn.Column));%&gt;)&lt;%
			if (i &lt; filter.FilterColumns.Length - 1)
			{
				%&gt;,&lt;%
			}
		}%&gt;
				};

				SQLHelper.CacheParameters(SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, parms);
			}

			return parms;
		}&lt;%
	}
	else
	{%&gt;

		/// &lt;summary&gt;
		/// Get database parameters for &lt;%Write(filter.Alias);%&gt;
		/// &lt;/summary&gt;
		/// &lt;returns&gt;Parameter array&lt;/returns&gt;
		private static SqlParameter[] &lt;%Write(filter.Alias);%&gt;Parameters()
		{
			SqlParameter[] parms = SQLHelper.GetCachedParameters(SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;);

			if (parms == null)
			{
				parms = new SqlParameter[]
				{&lt;%
		for (int i=0; i&lt;filter.FilterColumns.Length; i++)
		{
			Filter.FilterColumn filterColumn = filter.FilterColumns[i];
			string filterAlias = filterColumn.Alias;

			if (filterAlias == "" || filterAlias == null)
			{
				filterAlias = filterColumn.Column.Alias.ToUpper();
			}
			else
			{
				filterAlias = filterAlias.ToUpper();
			}%&gt;
					new SqlParameter(PARM_&lt;%Write(filterAlias);%&gt;, &lt;%Write(CSharp.GetDatabaseType(filterColumn.Column));%&gt;)&lt;%
			if (i &lt; filter.FilterColumns.Length - 1)
			{
				%&gt;,&lt;%
			}
		}%&gt;
				};
				SQLHelper.CacheParameters(SQL_SELECT_&lt;%Write(RemoveGetSP(filter.Alias).ToUpper());%&gt;, parms);
			}

			return parms;
		}&lt;%
	}
}
if (UserOptions.UseStoredProcedures &amp;&amp; (scriptObject.IsTable || scriptObject.IsView))
{%&gt;

		/// &lt;summary&gt;
		/// Get filter cached parameters
		/// &lt;/summary&gt;
		/// &lt;returns&gt;Parameter array&lt;/returns&gt;
		private static SqlParameter[] GetParametersByFilter()
		{
			SqlParameter[] parms = SQLHelper.GetCachedParameters(SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER);

			if (parms == null)
			{
				parms = new SqlParameter[]
				{
					new SqlParameter("@FieldName", SqlDbType.VarChar, 50),
					new SqlParameter("@Operator", SqlDbType.VarChar, 50),
					new SqlParameter("@FieldValue", SqlDbType.VarChar, 50)
				};
				SQLHelper.CacheParameters(SQL_SELECT_&lt;%Write(scriptObject.AliasPlural.ToUpper());%&gt;_BY_FILTER, parms);
			}

			return parms;
		}&lt;%
}%&gt;
	}
}</function>
  <function name="GetStoredProcedure" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="scriptObject" type="ArchAngel.Providers.Database.Model.ScriptObject" modifiers="" />
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + scriptObject.AliasPlural + "ByFilter");%&gt;]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + scriptObject.AliasPlural + "ByFilter");%&gt;]
GO

&lt;%Write(GetSelectByFilterSP(scriptObject));%&gt;
GO&lt;%
foreach (Filter filter in scriptObject.Filters)
{
	if (!filter.CreateStoredProcedure)
	{
		continue;
	}%&gt;
	
	
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + RemoveGetSP(filter.Alias));%&gt;]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[&lt;%Write(UserOptions.StoredProcedureSelectPrefix + RemoveGetSP(filter.Alias));%&gt;]
GO

&lt;%Write(GetSelectFilterSP(scriptObject, filter));%&gt;
GO&lt;%
}

if (scriptObject.IsTable)
{
Table table = (Table)scriptObject;%&gt;


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[&lt;%Write(UserOptions.StoredProcedureInsertPrefix + RemoveGetSP(scriptObject.Alias));%&gt;]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[&lt;%Write(UserOptions.StoredProcedureInsertPrefix + table.Alias);%&gt;]
GO


&lt;%Write(GetInsertSP(table));%&gt;
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[&lt;%Write(UserOptions.StoredProcedureUpdatePrefix + RemoveGetSP(scriptObject.Alias));%&gt;]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[&lt;%Write(UserOptions.StoredProcedureUpdatePrefix + table.Alias);%&gt;]
GO


&lt;%Write(GetUpdateSP(table));%&gt;
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[&lt;%Write(UserOptions.StoredProcedureDeletePrefix + RemoveGetSP(scriptObject.Alias));%&gt;]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[&lt;%Write(UserOptions.StoredProcedureDeletePrefix + table.Alias);%&gt;]
GO


&lt;%Write(GetDeleteSP(table));%&gt;
GO&lt;%
}%&gt;
</function>
  <function name="GetStoredProcedureProject" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="">
    <parameter name="database" type="ArchAngel.Providers.Database.Model.Database" modifiers="" />&lt;%
foreach (Table scriptObject in database.Tables)
{
	Write(GetStoredProcedure(scriptObject));%&gt;
&lt;%
}

foreach (View view in database.Views)
{	
	Write(GetStoredProcedure(view));%&gt;
&lt;%
}%&gt;

</function>
  <function name="GetUpdateInlineSQL" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Inline SQL">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />UPDATE &lt;%Write(SQLServer.GetSQLName(table.Name));%&gt; SET &lt;%
int numColumnsAdded = 0;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (numColumnsAdded &gt; 0)
	{
		%&gt;, &lt;%
	}
	if (column.InPrimaryKey)
	{
		Column masterPrimaryKeyColumn = table.UpdateableColumns[i];
		Write(SQLServer.GetSQLName(column.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	}
	else
	{
		Write(SQLServer.GetSQLName(column.Name) + " = @" + column.Alias);
	}
	numColumnsAdded++;
}
%&gt; WHERE&lt;%

for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
{
	Column masterPrimaryKeyColumn = table.PrimaryKeyColumns[i];
	Column primaryKeyColumn = table.PrimaryKeyColumns[i];

	if (!primaryKeyColumn.IsIdentity)
	{
		%&gt; &lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @Original" + masterPrimaryKeyColumn.Alias);
	}
	else
	{
		%&gt; &lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	}
	if (i &lt; table.PrimaryKeyColumns.Length - 1)
	{
		%&gt; AND&lt;%
	}
}%&gt;</function>
  <function name="GetUpdateSP" returntype="SQL" istemplatefunction="True" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="table" type="ArchAngel.Providers.Database.Model.Table" modifiers="" />CREATE PROCEDURE [dbo].[&lt;%Write(UserOptions.StoredProcedureUpdatePrefix + table.Alias);%&gt;]&lt;%
bool isFirstColumn = true;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsUserDefined)
	{
		continue;
	}
	if (!isFirstColumn)
	{
		Write(",");
	}
	if (column.InPrimaryKey &amp;&amp; !column.IsIdentity)
	{%&gt;
@Original&lt;%Write(column.Alias+ " " + SQLServer.GetSQLDataType(column));%&gt;,&lt;%
	}%&gt;
@&lt;%Write(column.Alias+ " " + SQLServer.GetSQLDataType(column));

	isFirstColumn = false;
}%&gt;

AS
	UPDATE
		&lt;%Write(SQLServer.GetSQLName(table.Name));%&gt;
	SET&lt;%
isFirstColumn = true;

for (int i=0; i&lt;table.UpdateableColumns.Length; i++)
{
	Column column = table.UpdateableColumns[i];
	if (column.IsIdentity || column.IsUserDefined)
	{
		continue;
	}
	if (!isFirstColumn)
	{
		Write(",");
	}%&gt;
		&lt;%
	
	if (column.InPrimaryKey)
	{
		Column masterPrimaryKeyColumn = table.UpdateableColumns[i];
		Write(SQLServer.GetSQLName(column.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	}
	else
	{
		Write(SQLServer.GetSQLName(column.Name) + " = @" + column.Alias);
	}
	isFirstColumn = false;
}%&gt;
	WHERE&lt;%
for (int i=0; i&lt;table.PrimaryKeyColumns.Length; i++)
{
	Column masterPrimaryKeyColumn = table.PrimaryKeyColumns[i];
	Column primaryKeyColumn = table.PrimaryKeyColumns[i];

	if (!primaryKeyColumn.IsIdentity)
	{%&gt;
		&lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @Original" + masterPrimaryKeyColumn.Alias);
	}
	else
	{%&gt;
		&lt;%Write(SQLServer.GetSQLName(primaryKeyColumn.Name) + " = @" + masterPrimaryKeyColumn.Alias);
	}

	if (i &lt; table.PrimaryKeyColumns.Length - 1)
	{
		%&gt; AND&lt;%
	}
}%&gt;</function>
  <function name="RemoveGetSP" returntype="String" istemplatefunction="False" scriptlanguage="CSharp" description="" category="Stored Procedures">
    <parameter name="str" type="System.String" modifiers="" />if (str.Length &gt;=3 &amp;&amp; str.Substring(0, 3) == "Get")
{
	return str.Substring(3, str.Length - 3);
}

return str;</function>
</ROOT>