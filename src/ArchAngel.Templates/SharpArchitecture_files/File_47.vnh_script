using System.Web.Mvc;
using <#=Project.Settings.Name#>.Core;
using SharpArch.Core.PersistenceSupport;
using SharpArch.Core.DomainModel;
using System.Collections.Generic;
using System;
using SharpArch.Web.NHibernate;
using NHibernate.Validator.Engine;
using System.Text;
using SharpArch.Web.CommonValidator;
using SharpArch.Core;

namespace <#=Project.Settings.Name#>.Web.Controllers
{
    [HandleError]
    public class <#=entity.NamePlural#>Controller : Controller
    {
        public <#=entity.NamePlural#>Controller(IRepository<<#=entity.Name#>> <#=entity.NameCamelCase#>Repository) {
            Check.Require(<#=entity.NameCamelCase#>Repository != null, "<#=entity.NameCamelCase#>Repository may not be null");

            this.<#=entity.NameCamelCase#>Repository = <#=entity.NameCamelCase#>Repository;
        }

        [Transaction]
        public ActionResult Index() {
            IList<<#=entity.Name#>> <#=entity.NameCamelCasePlural#> = <#=entity.NameCamelCase#>Repository.GetAll();
            return View(<#=entity.NameCamelCasePlural#>);
        }

        [Transaction]
        public ActionResult Show(int id) {
            <#=entity.Name#> <#=entity.NameCamelCase#> = <#=entity.NameCamelCase#>Repository.Get(id);
            return View(<#=entity.NameCamelCase#>);
        }

        public ActionResult Create() {
            <#=entity.Name#>FormViewModel viewModel = <#=entity.Name#>FormViewModel.Create<#=entity.Name#>FormViewModel();
            return View(viewModel);
        }

        [ValidateAntiForgeryToken]
        [Transaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Create(<#=entity.Name#> <#=entity.NameCamelCase#>) {
            if (ViewData.ModelState.IsValid && <#=entity.NameCamelCase#>.IsValid()) {
                <#=entity.NameCamelCase#>Repository.SaveOrUpdate(<#=entity.NameCamelCase#>);

                TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()] = 
					"The <#=entity.NameCamelCase#> was successfully created.";
                return RedirectToAction("Index");
            }

            <#=entity.Name#>FormViewModel viewModel = <#=entity.Name#>FormViewModel.Create<#=entity.Name#>FormViewModel();
            viewModel.<#=entity.Name#> = <#=entity.NameCamelCase#>;
            return View(viewModel);
        }

        [Transaction]
        public ActionResult Edit(int id) {
            <#=Project.Settings.Name#>FormViewModel viewModel = <#=Project.Settings.Name#>FormViewModel.Create<#=Project.Settings.Name#>FormViewModel();
            viewModel.<#=Project.Settings.Name#> = <#=entity.NameCamelCase#>Repository.Get(id);
            return View(viewModel);
        }

        [ValidateAntiForgeryToken]
        [Transaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Edit(<#=entity.Name#> <#=entity.NameCamelCase#>) {
            <#=entity.Name#> <#=entity.NameCamelCase#>ToUpdate = <#=entity.NameCamelCase#>Repository.Get(<#=entity.NameCamelCase#>.Id);
            TransferFormValuesTo(<#=entity.NameCamelCase#>ToUpdate, <#=entity.NameCamelCase#>);

            if (ViewData.ModelState.IsValid && <#=entity.NameCamelCase#>.IsValid()) {
                TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()] = 
					"The <#=entity.NameCamelCase#> was successfully updated.";
                return RedirectToAction("Index");
            }
            else {
                <#=entity.NameCamelCase#>Repository.DbContext.RollbackTransaction();

				<#=entity.Name#>FormViewModel viewModel = <#=entity.Name#>FormViewModel.Create<#=entity.Name#>FormViewModel();
				viewModel.<#=entity.Name#> = <#=entity.NameCamelCase#>;
				return View(viewModel);
            }
        }

        private void TransferFormValuesTo(<#=entity.Name#> <#=entity.NameCamelCase#>ToUpdate, <#=entity.Name#> <#=entity.NameCamelCase#>FromForm) {<#
foreach (var property in entity.Properties)
{#>
			<#=entity.NameCamelCase#>ToUpdate.<#=property.Name#> = <#=entity.NameCamelCase#>FromForm.<#=property.Name#>;<#
}
		
		#>
        }

        [ValidateAntiForgeryToken]
        [Transaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Delete(int id) {
            string resultMessage = "The <#=entity.NameCamelCase#> was successfully deleted.";
            <#=entity.Name#> <#=entity.NameCamelCase#>ToDelete = <#=entity.NameCamelCase#>Repository.Get(id);

            if (<#=entity.NameCamelCase#>ToDelete != null) {
                <#=entity.NameCamelCase#>Repository.Delete(<#=entity.NameCamelCase#>ToDelete);

                try {
                    <#=entity.NameCamelCase#>Repository.DbContext.CommitChanges();
                }
                catch {
                    resultMessage = "A problem was encountered preventing the <#=entity.NameCamelCase#> from being deleted. " +
						"Another item likely depends on this <#=entity.NameCamelCase#>.";
                    <#=entity.NameCamelCase#>Repository.DbContext.RollbackTransaction();
                }
            }
            else {
                resultMessage = "The <#=entity.NameCamelCase#> could not be found for deletion. It may already have been deleted.";
            }

            TempData[ControllerEnums.GlobalViewDataProperty.PageMessage.ToString()] = resultMessage;
            return RedirectToAction("Index");
        }

		/// <summary>
		/// Holds data to be passed to the <#=entity.Name#> form for creates and edits
		/// </summary>
        public class <#=entity.Name#>FormViewModel
        {
            private <#=entity.Name#>FormViewModel() { }

			/// <summary>
			/// Creation method for creating the view model. Services may be passed to the creation 
			/// method to instantiate items such as lists for drop down boxes.
			/// </summary>
            public static <#=entity.Name#>FormViewModel Create<#=entity.Name#>FormViewModel() {
                <#=entity.Name#>FormViewModel viewModel = new <#=entity.Name#>FormViewModel();
                
                return viewModel;
            }

            public <#=entity.Name#> <#=entity.Name#> { get; internal set; }
        }

        private readonly IRepository<<#=entity.Name#>> <#=entity.NameCamelCase#>Repository;
    }
}