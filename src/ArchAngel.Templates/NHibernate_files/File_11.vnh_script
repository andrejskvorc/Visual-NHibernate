<%
if (Project.ExistingCsProjectFile == null && System.IO.File.Exists(CurrentFilePath))
{
	string actualPath = RelativePathHelper.GetRelativePath(Project.TempFolder, CurrentFilePath);
	actualPath = RelativePathHelper.GetFullPath(Project.OutputFolder, actualPath);
	Project.ExistingCsProjectFile = new Slyce.Common.CSProjFile(actualPath);
}
if (Project.ExistingCsProjectFile != null && Project.ExistingCsProjectFile.FileExists)
{ 
	CurrentFilePath = Project.ExistingCsProjectFile.FilePath;
	
	Project.ExistingCsProjectFile.EnsurePropertyGroupItemExists("ProjectGuid", Project.Settings.Guid);
	Project.ExistingCsProjectFile.EnsurePropertyGroupItemExists("RootNamespace", Project.Settings.Name);
	Project.ExistingCsProjectFile.EnsurePropertyGroupItemExists("AssemblyName", Project.Settings.Name);
	
	Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate", "False", @"Libraries\NHibernate.dll");
	Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.Validator", "False", @"Libraries\NHibernate.Validator.dll");
	Project.ExistingCsProjectFile.EnsureReferenceExists("Iesi.Collections", "False", @"Libraries\Iesi.Collections.dll");
	Project.ExistingCsProjectFile.EnsureReferenceExists("Antlr3.Runtime", "False", @"Libraries\Antlr3.Runtime.dll");
	
	if (Project.Settings.UseFluentNHibernate)
		Project.ExistingCsProjectFile.EnsureReferenceExists("FluentNHibernate", "False", @"Libraries\FluentNHibernate.dll");
	
	Project.ExistingCsProjectFile.EnsureNoneFileExists("nhvalidator.cfg.xml", "Always");
	Project.ExistingCsProjectFile.EnsureReferenceExists("log4net", "False", @"Libraries\log4net.dll");
	Project.ExistingCsProjectFile.EnsureNoneFileExists(@"Libraries\log4net.xml", "Always");
		
	if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v2)
	{
		Project.ExistingCsProjectFile.EnsureNoneFileExists(@"Libraries\log4net.license.txt", "Always");
		Project.ExistingCsProjectFile.EnsureReferenceExists("nunit.framework", "False", @"Libraries\nunit.framework.dll");
	}
	if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v3)
	{
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.Validator.Specific", "False", @"Libraries\NHibernate.Validator.Specific.dll");
	}
	if (Project.Settings.UseSpatial)
	{
		Project.ExistingCsProjectFile.EnsureReferenceExists("GeoAPI.dll", "False", @"Libraries\GeoAPI.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NetTopologySuite.dll", "False", @"Libraries\NetTopologySuite.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.Spatial.dll", "False", @"Libraries\NHibernate.Spatial.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.Spatial.MsSql2008.dll", "False", @"Libraries\NHibernate.Spatial.MsSql2008.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.Spatial.MsSqlSpatial.dll", "False", @"Libraries\NHibernate.Spatial.MsSqlSpatial.dll");
	}
	if (Project.Settings.BytecodeGenerator == BytecodeGenerator.Spring)
	{
		Project.ExistingCsProjectFile.EnsureReferenceExists("antlr.runtime", "False", @"Libraries\antlr.runtime.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("Common.Logging", "False", @"Libraries\Common.Logging.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.ByteCode.Spring", "False", @"Libraries\NHibernate.ByteCode.Spring.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("Spring.Aop", "False", @"Libraries\Spring.Aop.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("Spring.Core", "False", @"Libraries\Spring.Core.dll");
	}
	else if (Project.Settings.BytecodeGenerator == BytecodeGenerator.LinFu)
	{
		Project.ExistingCsProjectFile.EnsureReferenceExists("LinFu.DynamicProxy", "False", @"Libraries\LinFu.DynamicProxy.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.ByteCode.LinFu", "False", @"Libraries\NHibernate.ByteCode.LinFu.dll");
	}
	else
	{
		Project.ExistingCsProjectFile.EnsureReferenceExists("Castle.Core", "False", @"Libraries\Castle.Core.dll");
		Project.ExistingCsProjectFile.EnsureReferenceExists("NHibernate.ByteCode.Castle", "False", @"Libraries\NHibernate.ByteCode.Castle.dll");
		
		if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v2)
			Project.ExistingCsProjectFile.EnsureReferenceExists("Castle.DynamicProxy2", "False", @"Libraries\Castle.DynamicProxy2.dll");
	}
	if (!Project.NHibernateConfig.FileExists)
		Project.ExistingCsProjectFile.EnsureNoneFileExists("hibernate.cfg.xml", "Always");

	Project.ExistingCsProjectFile.EnsureCompileFileExists(@"Model\Validation.cs");
	
	// Model files
	// This removes the duplicates
	HashSet<string> entityFilenames = new HashSet<string>();
	
	foreach (Entity entity in Project.Entities)
	{
		string filePath;
		
		if (entity.MappedClass != null)
			filePath = RelativePathHelper.GetRelativePath(System.IO.Path.GetDirectoryName(CurrentFilePath), entity.MappedClass.FilePath);
		else
			filePath = System.IO.Path.Combine("Model", entity.Name + ".cs");	
			
		entityFilenames.Add(filePath);
	}
	foreach(var filename in entityFilenames)
		Project.ExistingCsProjectFile.EnsureCompileFileExists(filename);

	foreach (Component component in Project.Components)
		Project.ExistingCsProjectFile.EnsureCompileFileExists(string.Format(@"Model\{0}.cs", component.Name));

	// HBM ItemGroup
	foreach (Entity entity in Project.Entities)
	{
		Project.ExistingCsProjectFile.EnsureEmbeddedResourceExists(string.Format(@"Model\Mappings\{0}.nhv.xml", entity.Name));

		if (!entity.IsMapped && !entity.IsAbstract)
			continue;
		if (entity.InheritanceTypeWithParent == IEntity.InheritanceTypes.TablePerConcreteClass)
			continue;
		
		if (!Project.Settings.UseFluentNHibernate)
			Project.ExistingCsProjectFile.EnsureEmbeddedResourceExists(string.Format(@"Model\Mappings\{0}.hbm.xml", entity.Name));
		else
			Project.ExistingCsProjectFile.EnsureCompileFileExists(string.Format(@"Model\Mappings\{0}Mapping.cs", entity.Name));
	}
	return Project.ExistingCsProjectFile.Xml;
}
%><?xml version="1.0" encoding="utf-16"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="<%WriteIf(Project.Settings.VisualStudioVersion == VisualStudioVersions.VS_2008, "3.5", "4.0")%>">
	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
		<ProductVersion>8.0.50727</ProductVersion>
		<SchemaVersion>2.0</SchemaVersion>
		<ProjectGuid>{<%=Project.Settings.Guid%>}</ProjectGuid>
		<OutputType>Library</OutputType>
		<AppDesignerFolder>Properties</AppDesignerFolder>
		<RootNamespace><%=Project.Settings.Name%></RootNamespace>
		<AssemblyName><%=Project.Settings.Name%></AssemblyName>
		<TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
		<DebugSymbols>true</DebugSymbols>
		<DebugType>full</DebugType>
		<Optimize>false</Optimize>
		<OutputPath>bin\Debug\</OutputPath>
		<DefineConstants>DEBUG;TRACE</DefineConstants>
		<ErrorReport>prompt</ErrorReport>
		<WarningLevel>4</WarningLevel>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
		<DebugType>pdbonly</DebugType>
		<Optimize>true</Optimize>
		<OutputPath>bin\Release\</OutputPath>
		<DefineConstants>TRACE</DefineConstants>
		<ErrorReport>prompt</ErrorReport>
		<WarningLevel>4</WarningLevel>
	</PropertyGroup>
	<ItemGroup>
		<Reference Include="System" />
		<Reference Include="System.Core" />
		<Reference Include="System.Data" />
		<Reference Include="System.Xml" />
		<Reference Include="System.Configuration" />
		<Reference Include="NHibernate">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.Validator">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.Validator.dll</HintPath>
		</Reference><%
if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v3)
{
		%>
		<Reference Include="NHibernate.Validator.Specific">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.Validator.Specific.dll</HintPath>
		</Reference><%		
}%>
		<Reference Include="Iesi.Collections">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Iesi.Collections.dll</HintPath>
		</Reference><%
if (Project.Settings.BytecodeGenerator == BytecodeGenerator.Spring)
{%>
		<Reference Include="antlr.runtime">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\antlr.runtime.dll</HintPath>
		</Reference>
		<Reference Include="Common.Logging">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Common.Logging.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.ByteCode.Spring">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.ByteCode.Spring.dll</HintPath>
		</Reference>
		<Reference Include="Spring.Aop">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Spring.Aop.dll</HintPath>
		</Reference>
		<Reference Include="Spring.Core">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Spring.Core.dll</HintPath>
		</Reference><%
}
else if (Project.Settings.BytecodeGenerator == BytecodeGenerator.LinFu)
{%>
		<Reference Include="LinFu.DynamicProxy">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\LinFu.DynamicProxy.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.ByteCode.LinFu">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.ByteCode.LinFu.dll</HintPath>
		</Reference><%
}
else
{%>
		<Reference Include="Castle.Core">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Castle.Core.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.ByteCode.Castle">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.ByteCode.Castle.dll</HintPath>
		</Reference><%
	if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v2)
	{
		%>
		<Reference Include="Castle.DynamicProxy2">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Castle.DynamicProxy2.dll</HintPath>
		</Reference><%
	}
}%>
		<Reference Include="log4net">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\log4net.dll</HintPath>
		</Reference>
		<Reference Include="nunit.framework">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\nunit.framework.dll</HintPath>
		</Reference>
		<Reference Include="Antlr3.Runtime">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\Antlr3.Runtime.dll</HintPath>
		</Reference><%
if (Project.Settings.UseFluentNHibernate)
{%>
		<Reference Include="FluentNHibernate">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\FluentNHibernate.dll</HintPath>
		</Reference><%
}
if (Project.Settings.UseSpatial)
{%>
		<Reference Include="GeoApi">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\GeoAPI.dll</HintPath>
		</Reference>
		<Reference Include="NetTopologySuite">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NetTopologySuite.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.Spatial">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.Spatial.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.Spatial.MsSql2008">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.Spatial.MsSql2008.dll</HintPath>
		</Reference>
		<Reference Include="NHibernate.Spatial.MsSqlSpatial">
			<SpecificVersion>False</SpecificVersion>
			<HintPath>Libraries\NHibernate.Spatial.MsSqlSpatial.dll</HintPath>
		</Reference><%
}%>
	</ItemGroup>
	<ItemGroup><%
if (Project.Settings.NHibernateVersion == ArchAngel.NHibernateHelper.NHibernateVersions.v2)
{
		%>
		<None Include="Libraries\log4net.license.txt">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None><%
}
if (Project.NHibernateConfig.FileExists)
{%>
		<None Include="<%=System.IO.Path.GetFileName(Project.NHibernateConfig.ExistingFilePath)%>">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None><%
}
else
{%>
		<None Include="hibernate.cfg.xml">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None><%
}%>
		<None Include="nhvalidator.cfg.xml">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None>
		<None Include="Libraries\log4net.xml">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None>
	</ItemGroup>
	<ItemGroup>
		<!-- Model ItemGroup -->
		<Compile Include="Model\Validation.cs" /><%
// This removes the duplicates
HashSet<string> entityFilenames2 = new HashSet<string>();
	
foreach (Entity entity in Project.Entities)
	entityFilenames2.Add(ArchAngel.NHibernateHelper.HibernateMappingHelper.GetRelativeFilenameForEntityCSharpFile(entity, CurrentFilePath));

foreach (string filename in entityFilenames2)
{%>
		<Compile Include="<%=filename%>" /><%
}
foreach (Component component in Project.Components)
{%>
		<Compile Include="Model\\<%=component.Name%>.cs" /><%
}%>
	</ItemGroup>
	<ItemGroup>
		<!-- HBM ItemGroup --><%
foreach (Entity entity in Project.Entities)
{%>
		<EmbeddedResource Include="Model\Mappings\\<%=entity.Name%>.nhv.xml" /><%
	
	if (!entity.IsMapped && !entity.IsAbstract)
		continue;
	
	if (!Project.Settings.UseFluentNHibernate)
	{
		if (entity.InheritanceTypeWithParent == IEntity.InheritanceTypes.TablePerConcreteClass ||
			entity.InheritanceTypeWithParent == IEntity.InheritanceTypes.TablePerSubClass ||
			entity.InheritanceTypeWithParent == IEntity.InheritanceTypes.TablePerHierarchy)
			continue;
			
	%>
		<EmbeddedResource Include="Model\Mappings\\<%=entity.Name%>.hbm.xml" /><%
	}
	else
	{%>
		<Compile Include="Model\Mappings\\<%=entity.Name%>Mapping.cs" /><%
	}
}%>
	</ItemGroup>
	<ItemGroup>
		<Compile Include="SessionManager.cs" />
	</ItemGroup>
	<ItemGroup>
		<Compile Include="Properties\AssemblyInfo.cs" />
	</ItemGroup>
	<Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
	<!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
		Other similar extension points exist, see Microsoft.Common.targets.
	<Target Name="BeforeBuild">
	</Target>
	<Target Name="AfterBuild">
	</Target>
	-->
</Project>