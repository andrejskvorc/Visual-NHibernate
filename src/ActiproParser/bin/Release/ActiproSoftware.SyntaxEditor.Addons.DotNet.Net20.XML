<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ActiproSoftware.SyntaxEditor.Addons.DotNet.Net20</name>
    </assembly>
    <members>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext">
            <summary>
            Represents the <c>Visual Basic</c> language context for a specific offset.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext">
            <summary>
            Represents the base class for a .NET language context at a specific offset.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.SyntaxLanguage,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <c>DotNetContext</c> class.
            </summary>
            <param name="parentContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if any, that created this context.</param>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType"/> that describes the type of context.</param>
            <param name="items">The <see cref="T:System.Collections.ArrayList"/> of context items.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetAdditionalBindingFlags(System.Int32)">
            <summary>
            Gets additional <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> that should be used when doing reflection with this context.
            </summary>
            <value>Additional <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> that should be used when doing reflection with this context.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetStatements(ActiproSoftware.SyntaxEditor.IAstNode)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> of statements for the specified node, if there are any.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> of statements for the specified node, if there are any.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetVariableDeclaratorReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> return type for a variable declarator by attempting to resolve the return type
            if it was implicitly typed.
            </summary>
            <param name="variableDeclarator">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> to examine.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <returns>The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetVariableName(ActiproSoftware.SyntaxEditor.IAstNode)">
            <summary>
            Gets the variable name from a <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetVariables(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Collections.ArrayList)"/> method result.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> to examine.</param>
            <returns>The variable name from a <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetVariables(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Collections.ArrayList)"/> method result.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.GetVariables(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Collections.ArrayList)">
            <summary>
            Gets the variables that are declared before the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that specifies context information.</param>
            <param name="variableDeclarators">Returns an <see cref="T:System.Collections.ArrayList"/> containing the variables that are declared before the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> at which searching ends.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.InsertItems(System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem[])">
            <summary>
            Inserts new <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> objects into the existing items.
            </summary>
            <param name="index">The index at which to insert the items.</param>
            <param name="newItems">The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> objects to insert.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ParseXmlTag(System.String,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Parses the specified XML tag.
            </summary>
            <param name="tagText">The XML tag.</param>
            <param name="isOpen">Returns whether the tag is open.</param>
            <param name="isClosed">Returns whether the tag is closed.</param>
            <param name="tagName">Returns the tag name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.PrefixWithTypeItem(System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Adds a type item into the items list.
            </summary>
            <param name="itemIndex">The index at which to insert the item.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> resolved info.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ResolveArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Resolves the arguments in the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ArgumentsText"/>.
            </summary>
            <param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> to examine.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ResolveForCode(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> being parsed.</param>
            <param name="compilationUnit">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ResolveToArrayOrIndexer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns the appropriate array or indexer access for the specified item.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="itemIndex">The item index.</param>
            <param name="allowArray">Whether to look for an array access.</param>
            <param name="allowDefaultProperty">Whether to allow searching for a default indexer property.</param>
            <returns>The appropriate array or indexer access for the specified item.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.IsStartOfRecursion">
            <summary>
            Returns whether the context is the start of an infinite recursion.
            </summary>
            <returns>
            <c>true</c> if the context is the start of an infinite recursion; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method looks up the parent context chain to see if a matching context is already an ancestor.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ToKeyString">
            <summary>
            Converts the object to a <c>String</c> that can be used to identify the context.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.AdditionalBindingFlags">
            <summary>
            Gets additional <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> that should be used when doing reflection with this context.
            </summary>
            <value>Additional <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> that should be used when doing reflection with this context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.StartsWithDot">
            <summary>
            Gets or sets whether the context starts with a dot.
            </summary>
            <value>
            <c>true</c> if the context starts with a dot; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.CompilationUnit">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.CompilationUnit"/> for the context.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.CompilationUnit"/> for the context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ContainingNode">
            <summary>
            Gets or sets the AST node that contains the context, if any.
            </summary>
            <value>The AST node that contains the context, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.DocumentationComment">
            <summary>
            Gets or sets the documentation comment related to the context.
            </summary>
            <value>The documentation comment related to the context.</value>
            <remarks>
            This property is only filled in when the context is for a documentation comment.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ImportedNamespaces">
            <summary>
            Gets or sets the array of imported namespaces for the context.
            </summary>
            <value>The array of imported namespaces for the context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.InitializationTextRange">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> with which the context was initialized.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> with which the context was initialized.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.IsLanguageCaseSensitive">
            <summary>
            Gets whether the language is case sensitive.
            </summary>
            <value>
            <c>true</c> if the language is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.Items">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> objects the describe the current context.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> objects the describe the current context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.Language">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.MemberDeclarationNode">
            <summary>
            Gets or sets the member AST node that contains the context, if any.
            </summary>
            <value>The member AST node that contains the context, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ParameterTextRange">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> that contains the parameters.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> that contains the parameters.</value>
            <remarks>
            This property is only filled in for certain situations.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ProjectResolver">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ProjectResolver"/> for the context.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.ProjectResolver"/> for the context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.TargetItem">
            <summary>
            Gets the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/>, which is the last item in the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.Items"/> collection.
            </summary>
            <value>The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/>, which is the last item in the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.Items"/> collection.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.TargetOffset">
            <summary>
            Gets the target offset of the context.
            </summary>
            <value>The target offset of the context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.Type">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType"/> that describes the type of context.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType"/> that describes the type of context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext.TypeDeclarationNode">
            <summary>
            Gets or sets the type AST node that contains the context, if any.
            </summary>
            <value>The type AST node that contains the context, if any.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.SyntaxLanguage,System.Int32)">
            <summary>
            Initializes a new instance of the <c>VBContext</c> class.
            </summary>
            <param name="parentContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if any, that created this context.</param>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.SyntaxLanguage,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <c>VBContext</c> class.
            </summary>
            <param name="parentContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if any, that created this context.</param>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType"/> that describes the type of context.</param>
            <param name="items">The <see cref="T:System.Collections.ArrayList"/> of context items.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetContextForCode(ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetContextForDocumentationComment(ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetGenericTypeArguments(ActiproSoftware.SyntaxEditor.TextStream,System.Int32)">
            <summary>
            Returns the generic type arguments that are scanned within the current stream offset and the specified end offset.
            </summary>
            <param name="stream">A <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> used to scan text.</param>
            <param name="endOffset">The end offset.</param>
            <returns>The array of generic type arguments.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetMemberInStandardModule(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,System.String)">
            <summary>
            Returns an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> with the specified name, if one is found in a standard module.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <param name="namespaceName">The name of the namespace.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> with the specified name, if one is found in a standard module.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.IsDocumentationComment(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Gets whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is part of a documentation comment.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is part of a documentation comment; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.ResolveArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Resolves the arguments in the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ArgumentsText"/>.
            </summary>
            <param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> to examine.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.ResolveForCode(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> being parsed.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetContextAtOffset(ActiproSoftware.SyntaxEditor.Document,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.GetContextBeforeOffset(ActiproSoftware.SyntaxEditor.Document,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,System.Boolean)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context before the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <param name="forParameterInfo">Whether the context if for parameter info.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBContext.IsLanguageCaseSensitive">
            <summary>
            Gets whether the language is case sensitive.
            </summary>
            <value>
            <c>true</c> if the language is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember">
            <summary>
            Represents the base requirements for a .NET type member.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.IsEditorBrowsableNever">
            <summary>
            Gets whether the member has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the member has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.IsExtension">
            <summary>
            Gets whether the member is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the member is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.Modifiers">
            <summary>
            Gets the modifiers for the member.
            </summary>
            <value>The modifiers for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember.ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextLocator">
            <summary>
            Provides a class that locates the closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor">
            <summary>
            Provides the base class for an AST node visitor.
            </summary>
            <remarks>
            <para>
            This class supports the visitor pattern.
            </para>
            <para>
            Each visitor implements a <c>OnVisiting</c> and an <c>OnVisited</c> method for each AST node type.
            By default the <c>OnVisiting</c> method returns <c>true</c>, while the <c>OnVisited</c> method does nothing.
            </para>
            <para>
            The <c>OnVisiting</c> method should return <c>true</c> if its child nodes should be visited.
            If <c>true</c> is returned, the child nodes are visiting in order.
            After the child nodes are visited, the <c>OnVisited</c> method is called.
            If <c>OnVisiting</c> returns <c>false</c>, child node visits are not made and <c>OnVisited</c> is called directly.
            </para>
            <para>
            Additionally, the generic <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnPreVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)"/> method is called before any type-specific <c>OnVisiting</c> method is executed
            and the generic <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnPostVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)"/> method is called after any type-specific <c>OnVisited</c> method is executed.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnPostVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Visits the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> after the type-specific <c>OnVisited</c> method is executed.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnPreVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Visits the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> before the type-specific <c>OnVisiting</c> method is executed.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node and its children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement)">
            <summary>
            Visits the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node's children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.OnVisited(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement)">
            <summary>
            Ends the visit of the specified type of <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>.
            </summary>
            <param name="node">The node to visit.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor.Level">
            <summary>
            Gets the level through which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor"/> should visit children, by default.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel"/> indicating the level through which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor"/> should visit children.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextLocator.FindClosestTypeOrMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,System.Int32)">
            <summary>
            Returns the closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.
            </summary>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="searchOffset">The offset whose context is requested.</param>
            <returns>The closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextLocator.OnPreVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Visits the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> before the type-specific <c>OnVisiting</c> method is executed.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node and its children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextLocator.Level">
            <summary>
            Gets the level through which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor"/> should visit children, by default.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel"/> indicating the level through which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor"/> should visit children.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement">
            <summary>
            Represents a checked statement.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement">
            <summary>
            Provides the base class for a statement that has a single child statement.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement">
            <summary>
            Provides the base class for a statement.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode">
            <summary>
            Provides the base class for an AST node.
            </summary>
            <remarks>
            <para>
            Each AST node has a single parent and optional children.
            The nodes may be navigated by parent to child or child to parent.
            When a node is created, it initially has no parent node.
            </para>
            <para>
            AST nodes implement the visitor pattern.
            </para>
            </remarks>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AstNodeContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.#ctor">
            <summary>
            Initializes a new instance of the <c>AstNode</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>AstNode</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AppendGenericTypeArgumentsToDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel,System.Text.StringBuilder,ActiproSoftware.SyntaxEditor.IAstNodeList)">
            <summary>
            Appends generic type arguments to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <param name="text">The <see cref="T:System.Text.StringBuilder"/> to modify.</param>
            <param name="genericTypeArguments">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> of generic type arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AppendParametersToDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel,System.Text.StringBuilder,ActiproSoftware.SyntaxEditor.IAstNodeList)">
            <summary>
            Appends parameters to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <param name="text">The <see cref="T:System.Text.StringBuilder"/> to modify.</param>
            <param name="parameters">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> of parameters.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.GetTypeFullName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration)">
            <summary>
            Returns the full name of a type declaration node.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration"/> to examine.</param>
            <returns>The full name of a type declaration node.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.GetTypeReferenceName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Returns the full name of the specified type reference.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>The full name of the specified type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.IsAccessSpecified(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Returns whether an access modifier specified.
            </summary>
            <param name="modifiers">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> to examine.</param>
            <returns>
            <c>true</c> if an access modifier is specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.Accept(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AcceptChild(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Accepts the specified visitor for visiting a child node of this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="childNode">The child node to visit.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AcceptChildren(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor,ActiproSoftware.SyntaxEditor.IAstNodeList)">
            <summary>
            Accepts the specified visitor for visiting the child nodes of this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="nodeList">The list of child nodes to visit.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>
            This method must be implemented by each AST node.  It will look like the following:
            <code>
            if (visitor.OnVisiting(this)) {
            	// Visit children
            	if (this.ChildNodeCount > 0)
            		this.AcceptChildren(visitor, this.ChildNodes);
            }
            visitor.OnVisited(this);
            </code>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.ContextID">
            <summary>
            Gets or sets a context value identifying the context of the AST node within its parent node.
            </summary>
            <value>A context value identifying the context of the AST node within its parent node.</value>
            <remarks>
            The context ID value is typically defined on the parent AST node as a constant.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.DisplayText">
            <summary>
            Gets text representing the node that can be used for display, such as in a document outline.
            </summary>
            <value>Text representing the node that can be used for display, such as in a document outline.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode.ParentTypeDeclaration">
            <summary>
            Gets the parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration"/> that defines this type or member.
            </summary>
            <value>The parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration"/> that defines this type or member.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.StatementContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.#ctor">
            <summary>
            Initializes a new instance of the <c>Statement</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>Statement</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.Comments">
            <summary>
            Gets the collection of comments that appear before the node.
            </summary>
            <value>The collection of comments that appear before the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.ChildStatementStatementContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>ChildStatementStatement</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)">
            <summary>
            Initializes a new instance of the <c>ChildStatementStatement</c> class. 
            </summary>
            <param name="statement">The child <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.Statement"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ChildStatementStatement</c> class. 
            </summary>
            <param name="statement">The child <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.Statement">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.Statement"/> affected by the unary operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildStatementStatement.Statement"/> affected by the unary operator.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>CheckedStatement</c> class. 
            </summary>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause">
            <summary>
            Represents a catch clause.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.VariableDeclaratorContextID">
            <summary>
            Gets the context ID for a variable declarator AST node.
            </summary>
            <value>The context ID for a variable declarator AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.BlockStatementContextID">
            <summary>
            Gets the context ID for a block statement name AST node.
            </summary>
            <value>The context ID for a block statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.EvaluationExpressionContextID">
            <summary>
            Gets the context ID for an evaluation expression name AST node.
            </summary>
            <value>The context ID for an evaluation expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>CatchClause</c> class. 
            </summary>
            <param name="variableDeclarator">The variable declarator.</param>
            <param name="blockStatement">The catch <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.BlockStatement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.BlockStatement">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.BlockStatement"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.BlockStatement"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.EvaluationExpression">
            <summary>
            Gets or sets the evaluation <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The evaluation <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
            <remarks>
            Used in Visual Basic only.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause.VariableDeclarator">
            <summary>
            Gets or sets the variable declarator.
            </summary>
            <value>The variable declarator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement">
            <summary>
            Represents a block of statements.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration">
            <summary>
            Represents a type member declaration, such as a field, method, property, constructor, or event.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.AttributeSectionContextID">
            <summary>
            Gets the context ID for an attribute section AST node.
            </summary>
            <value>The context ID for an attribute section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.NameContextID">
            <summary>
            Gets the context ID for a name AST node.
            </summary>
            <value>The context ID for a name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.TypeMemberDeclarationContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>TypeMemberDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.AttributeSections">
            <summary>
            Gets the collection of attribute sections.
            </summary>
            <value>The collection of attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Comments">
            <summary>
            Gets the collection of comments that appear at the end of the node.
            </summary>
            <value>The collection of comments that appear at the end of the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Documentation">
            <summary>
            Gets or sets the documentation.
            </summary>
            <value>The documentation.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.Name">
            <summary>
            Gets or sets the name of the namespace.
            </summary>
            <value>The name of the namespace.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.NavigationOffset">
            <summary>
            Gets the character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.
            </summary>
            <value>The character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeMemberDeclaration.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration">
            <summary>
            Represents a property or indexer declaration.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IBlockAstNode">
            <summary>
            Provides the base requirements of an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> that is a block.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IBlockAstNode.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IBlockAstNode.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ImplementedMemberContextID">
            <summary>
            Gets the context ID for an implemented member AST node.
            </summary>
            <value>The context ID for an implemented member type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.GetAccessorContextID">
            <summary>
            Gets the context ID for a get accessor AST node.
            </summary>
            <value>The context ID for a get accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.SetAccessorContextID">
            <summary>
            Gets the context ID for a set accessor AST node.
            </summary>
            <value>The context ID for a set accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>PropertyDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.GetAccessor">
            <summary>
            Gets or sets the get <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.
            </summary>
            <value>The get <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ImplementedMembers">
            <summary>
            Gets the collection of implemented members.
            </summary>
            <value>The collection of implemented members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.Initializer">
            <summary>
            Gets or sets the initializer.
            </summary>
            <value>The initializer.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.IsIndexer">
            <summary>
            Gets whether this property is an indexer.
            </summary>
            <value>
            <c>true</c> if this property is an indexer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PropertyDeclaration.SetAccessor">
            <summary>
            Gets or sets the set <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.
            </summary>
            <value>The set <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration">
            <summary>
            Represents an interface method declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.GenericTypeArgumentContextID">
            <summary>
            Gets the context ID for a generic type argument AST node.
            </summary>
            <value>The context ID for a generic type argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>InterfaceMethodDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.GenericTypeArguments">
            <summary>
            Gets the collection of generic type arguments.
            </summary>
            <value>The collection of generic type arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceMethodDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess">
            <summary>
            Represents a base access expression.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression">
            <summary>
            Provides the base class for an expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.GenericTypeArgumentContextID">
            <summary>
            Gets the context ID for a generic type argument AST node.
            </summary>
            <value>The context ID for a generic type argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.ExpressionContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.#ctor">
            <summary>
            Initializes a new instance of the <c>Expression</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>Expression</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.GenericTypeArguments">
            <summary>
            Gets the collection of generic type arguments.
            </summary>
            <value>The collection of generic type arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>BaseAccess</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BaseAccess.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel">
            <summary>
            Specifies the level through which an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor"/> should visit children.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel.TypeMembers">
            <summary>
            Only namespaces, types, and type members should be visited.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitorLevel.All">
            <summary>
            All nodes should be visited.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement">
            <summary>
            Represents an unstructured error error statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UnstructuredErrorErrorStatement</c> class. 
            </summary>
            <param name="expression">An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.Expression"/> indicating the expression.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.Expression">
            <summary>
            Gets or sets an <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.Expression"/> indicating the expression.
            </summary>
            <value>An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.Expression"/> indicating the expression.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorErrorStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator">
            <summary>
            Represents a query expression order-by operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator.OrderingContextID">
            <summary>
            Gets the context ID for an ordering AST node.
            </summary>
            <value>The context ID for an ordering AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>OrderByQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator.Orderings">
            <summary>
            Gets the collection of orderings.
            </summary>
            <value>The collection of orderings.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderByQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator">
            <summary>
            Represents a query expression join operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.CollectionRangeVariableDeclarationContextID">
            <summary>
            Gets the context ID for the collection range variable declaration AST node.
            </summary>
            <value>The context ID for the collection range variable declaration AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.ConditionContextID">
            <summary>
            Gets the context ID for the condition AST node.
            </summary>
            <value>The context ID for the condition AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.ChildJoinContextID">
            <summary>
            Gets the context ID for a child join AST node.
            </summary>
            <value>The context ID for a child join AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.TargetExpressionContextID">
            <summary>
            Gets the context ID for a target expression AST node.
            </summary>
            <value>The context ID for a target expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>JoinQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.ChildJoin">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator"/> that represents a child join for the join operator.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator"/> that represents a child join for the join operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.CollectionRangeVariableDeclaration">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.CollectionRangeVariableDeclaration"/> that declares the collection range variable declaration for the join operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.CollectionRangeVariableDeclaration"/> that declares the collection range variable declaration for the join operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.Conditions">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition"/> nodes for the join operator.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition"/> nodes for the join operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinQueryOperator.TargetExpressions">
            <summary>
            Gets the collection of target expression nodes for the join operator.
            </summary>
            <value>The collection of target expression nodes for the join operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType">
            <summary>
            Represents a .NET type that is defined in an assembly.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase">
            <summary>
            Represents the abstract base class of a .NET type or type reference that is defined in an assembly.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference">
            <summary>
            Represents the base requirements for a .NET type reference.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.AccessModifiers">
            <summary>
            Gets the access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomTypeBase</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that contains the type reference.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[],System.Type)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomTypeBase</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that contains the type reference.</param>
            <param name="callingGenericTypes">The calling generic type array, used to prevent infinite recursion with generic constraints on a generic.</param>
            <param name="type">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Type"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.HasTypeFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> flag is set.
            </summary>
            <param name="typeFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> value to examine.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> to check for.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.SetGenericTypeArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.GenericTypeArguments"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.SetModifiers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.SetName(System.String)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Name"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.SetNamespace(System.String)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Namespace"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.SetTypeFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags,System.Boolean)">
            <summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> flag.
            </summary>
            <param name="typeFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> value to update.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> to set or clear.</param>
            <param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param>
            <returns>The updated <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> value.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.GetFullName(System.Boolean)">
            <summary>
            Returns the full name of the type reference.
            </summary>
            <param name="includeArrayPointerInfo">Whether to include array and pointer info.</param>
            <returns>The full name of the type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.GetReflectionImageIndex(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Returns the reflection image index for the specified type.
            </summary>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> indicating the type of type.</param>
            <param name="accessModifiers">A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> indicating the access modifiers.</param>
            <returns>The reflection image index for the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.AssemblyIndex">
            <summary>
            Gets or sets the index of the referenced assembly within the project content that defines the type.
            </summary>
            <value>The index of the referenced assembly within the project content that defines the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.DefaultMemberName">
            <summary>
            Gets the default member name.
            </summary>
            <value>The default member name.</value>
            <remarks>
            Only used when first loading.  Caching marks the actual members instead.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ProjectContentInternal">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that contains the type reference.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that contains the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.TypeFlags">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> for the type reference.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags"/> for the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.AccessModifiers">
            <summary>
            Gets the access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> for the type.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Modifiers"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType">
            <summary>
            Represents the base requirements for a .NET type.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.Modifiers">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.Modifiers"/> for the type.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.Modifiers"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
            <remarks>
            Types defined in source code will return <see langword="null"/> for this property since
            they will be contained in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent"/> for the 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> in use.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomType</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the type.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,System.Type)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomType</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the type.</param>
            <param name="type">The <see cref="T:System.Type"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.IsMatch(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> matches with the desired name and <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/>.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="declaringType">The declaring <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the member.</param>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <param name="name">The name to match.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> matches with the desired name and <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetMembersCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags,System.Boolean)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <param name="returnFirst">Whether to return the first result only.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.SetBaseType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.BaseType"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.SetDeclaringType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.DeclaringType"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.SetInterfaceTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])">
            <summary>
            Sets the return value of the <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetInterfaces"/> method.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.SetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember[])">
            <summary>
            Sets the value of the members array.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetFullName(System.Boolean)">
            <summary>
            Returns the full name of the type reference.
            </summary>
            <param name="includeArrayPointerInfo">Whether to include array and pointer info.</param>
            <returns>The full name of the type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType.ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression">
            <summary>
            Represents a default value expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>DefaultValueExpression</c> class. 
            </summary>
            <param name="returnType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the return type.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DefaultValueExpression.ReturnType">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the return type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the return type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression">
            <summary>
            Provides the base class for an expression that has a single child expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.ChildExpressionExpressionContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Initializes a new instance of the <c>ChildExpressionExpression</c> class. 
            </summary>
            <param name="expression">The child <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.Expression"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ChildExpressionExpression</c> class. 
            </summary>
            <param name="expression">The child <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.Expression"/> affected by the unary operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ChildExpressionExpression.Expression"/> affected by the unary operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel">
            <summary>
            Specifies the detail level for display text.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel.Simple">
            <summary>
            Returns a simple representation of the AST node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel.SimpleFullyQualified">
            <summary>
            Returns a simple representation of the AST node that fully qualifies type references.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration">
            <summary>
            Represents a query expression collection range variable declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.VariableDeclaratorContextID">
            <summary>
            Gets the context ID for the variable declarator AST node.
            </summary>
            <value>The context ID for the variable declarator AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.SourceContextID">
            <summary>
            Gets the context ID for a source AST node.
            </summary>
            <value>The context ID for a source AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <c>CollectionRangeVariableDeclaration</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.Source">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that provides the source for the from clause.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that provides the source for the from clause.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.VariableDeclarator">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.VariableDeclarator"/> that declares the variable for the from clause.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration.VariableDeclarator"/> that declares the variable for the from clause.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics">
            <summary>
            Provides numerous statistics for some <c>Visual Basic</c> code.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics">
            <summary>
            Provides an abstract base class with numerous statistics for .NET code.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.#ctor">
            <summary>
            Initializes a new instance of the <c>DotNetTextStatistics</c> class. 
            </summary>
            <remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.TextStatistics.CalculateStatistics(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"/> method should be called manually to populate the statistics data.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DotNetTextStatistics</c> class. 
            </summary>
            <param name="text">The text to examine and create statistics data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.AddStatisticsToListView(System.Windows.Forms.ListView)">
            <summary>
            Adds the appropriate statistics to the specified <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> of which to add the statistics.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.CodeLines">
            <summary>
            Gets the number of lines in the text that contain code.
            </summary>
            <value>The number of lines in the text that contain code.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.CommentLineCoveragePercentage">
            <summary>
            Gets the average number of letters per word.
            </summary>
            <value>The average number of letters per word.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.CommentLines">
            <summary>
            Gets the number of lines in the text that contain comments.
            </summary>
            <value>The number of lines in the text that contain comments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetTextStatistics.PureCommentLines">
            <summary>
            Gets the number of lines in the text that are purely comments.
            </summary>
            <value>The number of lines in the text that are purely comments.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.#ctor">
            <summary>
            Initializes a new instance of the <c>VBTextStatistics</c> class. 
            </summary>
            <remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.CalculateStatistics(System.String)"/> method should be called manually to populate the statistics data.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>VBTextStatistics</c> class. 
            </summary>
            <param name="text">The text to examine and create statistics data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.CalculateStatistics(System.String)">
            <summary>
            Calculates statistics for the specified text.
            </summary>
            <param name="text">The text to score.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.CommentLines">
            <summary>
            Gets the number of lines in the text that contain comments.
            </summary>
            <value>The number of lines in the text that contain comments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBTextStatistics.PureCommentLines">
            <summary>
            Gets the number of lines in the text that are purely comments.
            </summary>
            <value>The number of lines in the text that are purely comments.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler">
            <summary>
            Represents the method that will handle <see cref="T:System.AppDomain"/> events.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs"/> containing event data.</param>
            <remarks>
            When you create a <c>AppDomainEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks>
            <seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs"/>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement">
            <summary>
            Represents an unsafe statement.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UnsafeStatement</c> class. 
            </summary>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnsafeStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement">
            <summary>
            Represents a fixed statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement.DeclaratorContextID">
            <summary>
            Gets the context ID for a declarator AST node.
            </summary>
            <value>The context ID for a declarator AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>FixedStatement</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement.Declarators">
            <summary>
            Gets the collection of declarators.
            </summary>
            <value>The collection of declarators.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration">
            <summary>
            Represents a fixed size buffer declaration.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IVariableDeclarationSection">
            <summary>
            Provides the base requirements of an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> that is a member declaration section.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IVariableDeclarationSection.Variables">
            <summary>
            Gets the collection of variables that are declared.
            </summary>
            <value>The collection of variables that are declared.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.VariableContextID">
            <summary>
            Gets the context ID for a variable AST node.
            </summary>
            <value>The context ID for a variable AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Initializes a new instance of the <c>FixedSizeBufferDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration.Variables">
            <summary>
            Gets the collection of variables that are declared.
            </summary>
            <value>The collection of variables that are declared.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective">
            <summary>
            Represents a region pre-processor directive.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>RegionPreProcessorDirective</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.Key">
            <summary>
            Gets the string-based key that uniquely identifies the AST node.
            </summary>
            <value>The string-based key that uniquely identifies the AST node.</value>
            <remarks>
            The default implementation of this property returns the full type name of the AST node.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RegionPreProcessorDirective.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument">
            <summary>
            Represents an attribute argument.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.#ctor(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>Attribute</c> class. 
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="expression">The argument <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.Expression">
            <summary>
            Gets or sets the argument <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.Expression"/>.
            </summary>
            <value>The argument <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.Name">
            <summary>
            Gets or sets the name of the attribute argument.
            </summary>
            <value>The name of the attribute argument.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeArgument.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers">
            <summary>
            Specifies the modifiers for a type or member.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.None">
            <summary>
            No modifier.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Private">
            <summary>
            Private access.
            Code within the type that declares a private element, including code within contained types, can access the element.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Assembly">
            <summary>
            Internal (also known as Internal or Friend) access.
            Code within the assembly that declares an assembly element can access it.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Family">
            <summary>
            Protected access.  
            Code within the class that declares a family (also known as Protected) element, or a class derived from it, can access the element.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Public">
            <summary>
            Public access. 
            Any code that can see a public element can access it.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.FamilyOrAssembly">
            <summary>
            Family or Assembly access.  This is a union of <c>Family</c> and <c>Assembly</c> access.
            Code within the same class or the same assembly as the element, 
            or within any class derived from the element's class, can access it.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.AccessMask">
            <summary>
            The bitmask for access modifiers.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Abstract">
            <summary>
            Defines a class or member that must be inherited.
            Represents <c>MustOverride</c> and <c>MustInherit</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Const">
            <summary>
            Defines a constant member.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Default">
            <summary>
            Identifies a property as the default property of its class, structure, or interface.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Dim">
            <summary>
            Declares a variable.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Extern">
            <summary>
            Defines a method that is implemented externally.
            Used in C# only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Final">
            <summary>
            Defines a class or member that cannot be overridden.
            Represents <c>NotInheritable</c> and <c>NotOverridable</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Narrowing">
            <summary>
            Indicates that a conversion operator (CType) converts a class or structure to a type that might not be able to hold some of the possible values of the original class or structure.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.New">
            <summary>
            Hides a defined member in a base class.
            Represents <c>Shadows</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Partial">
            <summary>
            Defines the type as a partial type which is defined in multiple parts.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Overloads">
            <summary>
            Specifies that a property or procedure redeclares one or more existing properties or procedures with the same name.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Override">
            <summary>
            Defines a member that overrides a base abstract or virtual implementation.
            Represents <c>Overrides</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.ReadOnly">
            <summary>
            Defines a read-only member.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Static">
            <summary>
            Defines a static member.
            Represents <c>Shared</c> and <c>Static</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Unsafe">
            <summary>
            Defines an unsafe context.
            Used in C# only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Virtual">
            <summary>
            Defines a member that can be overridden.
            Represents <c>Overridable</c> in Visual Basic.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Volatile">
            <summary>
            Defines a field that can be modified by multiple concurrently executing threads.
            Used in C# only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.Widening">
            <summary>
            Indicates that a conversion operator (CType) converts a class or structure to a type that can hold all possible values of the original class or structure.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.WithEvents">
            <summary>
            Specifies that one or more declared member variables refer to an instance of a class that can raise events.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers.WriteOnly">
            <summary>
            Specifies that a property can be written but not read.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder">
            <summary>
            Used as an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to reference an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> defined in the same assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomTypePlaceHolder</c> class.
            </summary>
            <param name="type">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.Type"/> for which the placeholder is created, if loading from a live assembly.</param>
            <param name="typeTableIndex">The type table index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that is wrapped by this class.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.TypeTableIndex">
            <summary>
            Gets or sets the type table index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that is wrapped by this class.
            </summary>
            <value>The type table index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that is wrapped by this class.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.AccessModifiers">
            <summary>
            Gets the access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator">
            <summary>
            Represents a query expression skip while operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>SkipWhileQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.Expression"/> for the skip while operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.Expression"/> for the skip while operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipWhileQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator">
            <summary>
            Represents a query expression take while operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>TakeWhileQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.Expression"/> for the take while operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.Expression"/> for the take while operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeWhileQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier">
            <summary>
            Represents a member specifier.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.TypeReferenceContextID">
            <summary>
            Gets the context ID for the type reference AST node.
            </summary>
            <value>The context ID for the type reference AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.MemberNameContextID">
            <summary>
            Gets the context ID for a member name AST node.
            </summary>
            <value>The context ID for a member name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>MemberSpecifier</c> class. 
            </summary>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.TypeReference"/> to the type that contains the member.</param>
            <param name="memberName">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.MemberName">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.TypeReference"/> to the type that contains the member.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier.TypeReference"/> to the type that contains the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression">
            <summary>
            Represents a lambda expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.#ctor">
            <summary>
            Initializes a new instance of the <c>LambdaExpression</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>LambdaExpression</c> class. 
            </summary>
            <param name="statement">The child <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.Statement">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.Statement"/> contained by the lambda expression.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression.Statement"/> contained by the lambda expression.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration">
            <summary>
            Represents a structure declaration block.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration">
            <summary>
            Represents a type declaration for a class, structure, interface, or enumeration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.GenericTypeArgumentContextID">
            <summary>
            Gets the context ID for a generic type argument AST node.
            </summary>
            <value>The context ID for a generic type argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.BaseTypeContextID">
            <summary>
            Gets the context ID for a base type AST node.
            </summary>
            <value>The context ID for a base type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.MemberContextID">
            <summary>
            Gets the context ID for a member AST node.
            </summary>
            <value>The context ID for a member AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.TypeDeclarationContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>TypeDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.GetMembersCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags,System.Boolean,System.Boolean)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <param name="returnFirst">Whether to return the first result only.</param>
            <param name="returnAll">Whether to return everything.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.BaseTypes">
            <summary>
            Gets the collection of base types.
            </summary>
            <value>The collection of base types.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.GenericTypeArguments">
            <summary>
            Gets the collection of generic type arguments.
            </summary>
            <value>The collection of generic type arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.Members">
            <summary>
            Gets the collection of type members.
            </summary>
            <value>The collection of type members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>StructDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StructureDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement">
            <summary>
            Represents a throw statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ThrowStatement</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.Expression"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThrowStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement">
            <summary>
            Represents a return statement.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement">
            <summary>
            Represents a branch statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement.BranchStatementContextIDBase">
            <summary>
            Gets the minimum context ID that should be used in your code for AST nodes inheriting this class.
            </summary>
            <value>The minimum context ID that should be used in your code for AST nodes inheriting this class.</value>
            <remarks>
            Base all your context ID constants off of this value.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>BranchStatement</c> class. 
            </summary>
            <param name="branchType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType"/> specifying the branch statement type.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement.BranchType">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType"/> specifying the branch statement type.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType"/> specifying the branch statement type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ReturnStatement</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.Expression"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement">
            <summary>
            Represents a goto statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.IdentifierContextID">
            <summary>
            Gets the context ID for an identifier AST node.
            </summary>
            <value>The context ID for an identifier AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>GotoStatement</c> class. 
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.Expression"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.Identifier">
            <summary>
            Gets or sets the identifer.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement">
            <summary>
            Represents an empty statement.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>EmptyStatement</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EmptyStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement">
            <summary>
            Represents a do statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>DoStatement</c> class. 
            </summary>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="expression">The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.Expression">
            <summary>
            Gets or sets the condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.Expression"/>.
            </summary>
            <value>The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DoStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement">
            <summary>
            Represents a continue statement.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ContinueStatement</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration">
            <summary>
            Represents an event declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.EventTypeContextID">
            <summary>
            Gets the context ID for an event type AST node.
            </summary>
            <value>The context ID for an event type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ImplementedMemberContextID">
            <summary>
            Gets the context ID for an implemented member AST node.
            </summary>
            <value>The context ID for an implemented member type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.AddAccessorContextID">
            <summary>
            Gets the context ID for an add accessor AST node.
            </summary>
            <value>The context ID for an add accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.RemoveAccessorContextID">
            <summary>
            Gets the context ID for a remove accessor AST node.
            </summary>
            <value>The context ID for a remove accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.RaiseEventAccessorContextID">
            <summary>
            Gets the context ID for a raise event accessor AST node.
            </summary>
            <value>The context ID for a raise event accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>EventDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.AddAccessor">
            <summary>
            Gets or sets the add <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.
            </summary>
            <value>The add <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>The event type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.ImplementedMembers">
            <summary>
            Gets the collection of implemented members.
            </summary>
            <value>The collection of implemented members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
            <remarks>
            Used in Visual Basic only.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.RaiseEventAccessor">
            <summary>
            Gets or sets the raise event <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.
            </summary>
            <value>The raise event <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventDeclaration.RemoveAccessor">
            <summary>
            Gets or sets the remove <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.
            </summary>
            <value>The remove <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration">
            <summary>
            Represents a constructor declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.InitializerArgumentContextID">
            <summary>
            Gets the context ID for an initializer argument AST node.
            </summary>
            <value>The context ID for an initializer argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>ConstructorDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.InitializerArguments">
            <summary>
            Gets the collection of intializer arguments.
            </summary>
            <value>The collection of intializer arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.InitializerType">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType"/> that indicates the type of initializer.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType"/> that indicates the type of intializer.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorDeclaration.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference">
            <summary>
            Represents a type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.AnonymousTypeName">
            <summary>
            Gets the type name that is used to denote an anonymous type.
            </summary>
            <value>The type name that is used to denote an anonymous type.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.AttributeSectionContextID">
            <summary>
            Gets the context ID for an attribute section AST node.
            </summary>
            <value>The context ID for an attribute section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.GenericTypeArgumentContextID">
            <summary>
            Gets the context ID for a generic type argument AST node.
            </summary>
            <value>The context ID for a generic type argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.GenericTypeParameterConstraintContextID">
            <summary>
            Gets the context ID for a generic type parameter contraint AST node.
            </summary>
            <value>The context ID for a generic type parameter contraint AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.#ctor(System.String,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>TypeReference</c> class. 
            </summary>
            <param name="name">The name of the type reference.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TypeReference</c> class. 
            </summary>
            <param name="name">The name of the type reference.</param>
            <param name="isGenericParameter">Whether the type reference is for a generic parameter.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.Clone">
            <summary>
            Clones the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.GetFullName(System.Boolean)">
            <summary>
            Returns the full name of the type reference.
            </summary>
            <param name="includeArrayPointerInfo">Whether to include array and pointer info.</param>
            <returns>The full name of the type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AccessModifiers">
            <summary>
            Gets the access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ArrayRanks">
            <summary>
            Gets or sets the array ranks.
            </summary>
            <value>The array ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.AttributeSections">
            <summary>
            Gets the collection of attribute sections.
            </summary>
            <value>The collection of attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.GenericTypeArguments">
            <summary>
            Gets the collection of generic type arguments.
            </summary>
            <value>The collection of generic type arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets or sets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets or sets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets or sets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.IsGenericParameter">
            <summary>
            Gets or sets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference.PointerLevel">
            <summary>
            Gets or sets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType">
            <summary>
            Specifies the type of a comment.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType.SingleLine">
            <summary>
            A single-line comment.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType.MultiLine">
            <summary>
            A multi-line comment.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType.Documentation">
            <summary>
            A documentation comment.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer">
            <summary>
            Provides a class that compares <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> instances and uses caching when there are a lot of repeated comparisons.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer.GetGenericParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> generic type parameter for the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> that has the same
            name as the supplied <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> for which to search.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> generic type parameter that was found, if any.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer.GetTypeInheritanceHierarchyAndImplementedInterfaces(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns an array containing the inheritance hierarchy of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> and its implemented interfaces and caches the result.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for type resolution.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <returns>An array containing the inheritance hierarchy of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> and its implemented interfaces.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer.IsTypeInstanceOf(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns whether a source type is an instance of a target type.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for type resolution.</param>
            <param name="contextMember">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            
            <param name="sourceTypeReference">The source <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.</param>
            <param name="targetType">The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</param>
            <returns>
            <c>true</c> if the source type is an instance of the target type.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer.IsTypeParameterInstanceOf(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Returns whether a source type parameter is an instance of a target type.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for type resolution.</param>
            <param name="contextMember">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <param name="sourceParameterReference">The source <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> type parameter.</param>
            <param name="targetParameterReference">The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> type parameter.</param>
            <returns>
            <c>true</c> if the source type parameter is an instance of the target type.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeComparer.ResolveType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Resolves the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> and caches the result.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for type resolution.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to resolve.</param>
            <returns>The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection">
            <summary>
            Specifies a sort order for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OrderingDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousTypePropertyDeclaration">
            <summary>
            Represents a property or indexer declaration for an anonymous type.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousTypePropertyDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Initializes a new instance of the <c>AnonymousTypePropertyDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
            <param name="returnType">The resolved return type.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousTypePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType">
            <summary>
            Specifies the type of a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType.Add">
            <summary>
            Adds an event handler.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType.Remove">
            <summary>
            Removes an event handler.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics">
            <summary>
            Provides numerous statistics for some <c>C#</c> code.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.#ctor">
            <summary>
            Initializes a new instance of the <c>CSharpTextStatistics</c> class. 
            </summary>
            <remarks>
            The <see cref="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.CalculateStatistics(System.String)"/> method should be called manually to populate the statistics data.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>CSharpTextStatistics</c> class. 
            </summary>
            <param name="text">The text to examine and create statistics data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.CalculateStatistics(System.String)">
            <summary>
            Calculates statistics for the specified text.
            </summary>
            <param name="text">The text to score.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.CommentLines">
            <summary>
            Gets the number of lines in the text that contain comments.
            </summary>
            <value>The number of lines in the text that contain comments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTextStatistics.PureCommentLines">
            <summary>
            Gets the number of lines in the text that are purely comments.
            </summary>
            <value>The number of lines in the text that are purely comments.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags">
            <summary>
            Represents .NET parameter flags.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags.Ref">
            <summary>
            The type is a structure type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags.Out">
            <summary>
            The type is an interface type.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags">
            <summary>
            Represents .NET member flags.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Custom">
            <summary>
            The member is a custom member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Constant">
            <summary>
            The member is a constant member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Constructor">
            <summary>
            The member is a constructor member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Event">
            <summary>
            The member is an event member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Field">
            <summary>
            The member is a field member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Method">
            <summary>
            The member is a method member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.Property">
            <summary>
            The member is a property member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.MemberTypesMask">
            <summary>
            The mask for the member type values.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.GenericMethod">
            <summary>
            The member is a generic method, constructed from a generic method definition.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.GenericMethodDefinition">
            <summary>
            The member is a generic method definition, from which other generic method can be constructed. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.IsExtension">
            <summary>
            The member is marked with an <c>ExtensionAttribute</c>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags.IsEditorBrowsableNever">
            <summary>
            The member has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetExactContextLocator">
            <summary>
            Provides a class that locates the containing <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> of the specified offset.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetExactContextLocator.FindContainingNode(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,System.Int32)">
            <summary>
            Returns the lowest level <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that contains the specified offset.
            </summary>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="searchOffset">The offset whose context is requested.</param>
            <returns>The closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetExactContextLocator.OnPreVisiting(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Visits the <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> before the type-specific <c>OnVisiting</c> method is executed.
            </summary>
            <param name="node">The node to visit.</param>
            <returns>
            <c>true</c> if the node and its children should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement">
            <summary>
            Represents a lock statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>LockStatement</c> class. 
            </summary>
            <param name="expression">The lock <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.Expression"/>.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the statement.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.Expression">
            <summary>
            Gets or sets the lock <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.Expression"/>.
            </summary>
            <value>The lock <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LockStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration">
            <summary>
            Represents an operator declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType)">
            <summary>
            Initializes a new instance of the <c>OperatorDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="operatorType">The operator type.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.GetOperatorTypeName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage)">
            <summary>
            Gets the full type name, or a language shortcut keyword specifying the type if possible.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> for which to return a shortcut keyword if possible.</param>
            <returns>The full type name, or a language shortcut keyword specifying the type if possible.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.OperatorType">
            <summary>
            Gets or sets the operator type.
            </summary>
            <value>The operator type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorDeclaration.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator">
            <summary>
            Represents a variable declarator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.NameContextID">
            <summary>
            Gets the context ID for a name AST node.
            </summary>
            <value>The context ID for a name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>VariableDeclarator</c> class. 
            </summary>
            <param name="returnType">The return type.</param>
            <param name="name">The name.</param>
            <param name="isConstant">Whether the declarator is for a constant variable.</param>
            <param name="isLocal">Whether the declarator is for a local variable.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Initializer">
            <summary>
            Gets or sets the initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.IsConstant">
            <summary>
            Gets or sets whether the declarator is for a constant variable.
            </summary>
            <value>
            <c>true</c> if the declarator is for a constant variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.IsImplicitlyTyped">
            <summary>
            Gets or sets whether the declarator is implicitly typed.
            </summary>
            <value>
            <c>true</c> if the declarator is implicitly typed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.IsLocal">
            <summary>
            Gets or sets whether the declarator is for a local variable.
            </summary>
            <value>
            <c>true</c> if the declarator is for a local variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Modifiers">
            <summary>
            Gets the modifiers for the member.
            </summary>
            <value>The modifiers for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.Name">
            <summary>
            Gets or sets the name of the namespace.
            </summary>
            <value>The name of the namespace.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment">
            <summary>
            Represents a comment.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType,ActiproSoftware.SyntaxEditor.TextRange,System.String)">
            <summary>
            Initializes a new instance of the <c>Comment</c> class. 
            </summary>
            <param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CommentType"/> indicating the type of comment.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
            <param name="text">The comment text.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.Text">
            <summary>
            Gets the comment text.
            </summary>
            <value>The comment text.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Comment.Type">
            <summary>
            Gets the type of comment.
            </summary>
            <value>The type of comment.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess">
            <summary>
            Represents a pointer member access expression.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess">
            <summary>
            Represents a member access expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.MemberNameContextID">
            <summary>
            Gets the context ID for a member name AST node.
            </summary>
            <value>The context ID for a member name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>MemberAccess</c> class. 
            </summary>
            <param name="target">The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="memberName">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the member name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.MemberAccessType">
            <summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.MemberAccessType"/> indicating the type of member access.
            </summary>
            <value>A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.MemberAccessType"/> indicating the type of member access.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.MemberName">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the member name.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the member name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccess.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>PointerMemberAccess</c> class. 
            </summary>
            <param name="target">The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="memberName">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the member name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.PointerMemberAccess.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression">
            <summary>
            Represents a conditional expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.TestExpressionContextID">
            <summary>
            Gets the context ID for a test expression AST node.
            </summary>
            <value>The context ID for a test expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.TrueStatementContextID">
            <summary>
            Gets the context ID for a true expression AST node.
            </summary>
            <value>The context ID for a true expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.FalseStatementContextID">
            <summary>
            Gets the context ID for a false expression AST node.
            </summary>
            <value>The context ID for a false expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ConditionalExpression</c> class. 
            </summary>
            <param name="testExpression">The test <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="trueExpression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a true test.</param>
            <param name="falseExpression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a false test.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.FalseExpression">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a false test.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a false test.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.TestExpression">
            <summary>
            Gets or sets the test <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The test <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConditionalExpression.TrueExpression">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a true test.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> returned for a true test.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression">
            <summary>
            Represents an argument expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.NameContextID">
            <summary>
            Gets the context ID for a name AST node.
            </summary>
            <value>The context ID for a name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ArgumentExpression</c> class. 
            </summary>
            <param name="modifiers">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers"/> indicating the argument modifier.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the argument modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ArgumentExpression</c> class. 
            </summary>
            <param name="modifiers">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers"/> indicating the argument modifier.</param>
            <param name="name">The name of the argument.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the argument modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.Modifiers">
            <summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers"/> indicating the argument modifiers.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers"/> indicating the argument modifiers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.Name">
            <summary>
            Gets or sets the name of the argument.
            </summary>
            <value>The name of the argument.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArgumentExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator">
            <summary>
            Represents a query expression where operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator.ConditionContextID">
            <summary>
            Gets the context ID for the condition AST node.
            </summary>
            <value>The context ID for the condition AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>WhereQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator.Condition">
            <summary>
            Gets or sets the condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the where operator.
            </summary>
            <value>The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the where operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhereQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser">
            <summary>
            Represents a <c>C#</c> recursive descent lexical parser implementation.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage,ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)">
            <summary>
            Initializes a new instance of the <c>CSharpRecursiveDescentLexicalParser</c> class.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage"/> to use.</param>
            <param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/> to use for coordinating merged languages.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.CloseDocumentationComment">
            <summary>
            Closes the current documentation comment.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.GetNextTokenCore">
            <summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> and seeks past it.
            </summary>
            <returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.ReapComments(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Reaps the comments that have been collected since the last reaping.
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> before which the comments must start.</param>
            <returns>The comments that have been collection since the last reaping.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.ReapDocumentationComments">
            <summary>
            Reaps the documentation comments that have been collected since the last reaping.
            </summary>
            <returns>The documentation comments that have been collection since the last reaping.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.DocumentationCommentTextRanges">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.</value>
            <remarks>
            Do not access this property until parsing is complete.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.MultiLineCommentTextRanges">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each multi-line comment in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each multi-line comment in the compilation unit.</value>
            <remarks>
            Do not access this property until parsing is complete.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpRecursiveDescentLexicalParser.RegionTextRanges">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.</value>
            <remarks>
            Do not access this property until parsing is complete.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource">
            <summary>
            Specifies the type of icon resource that may be retrieved.
            </summary>
        </member>
        <member name="F:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource.LicenseFormProductLogo">
            <summary>
            The product logo to display on the license form.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent">
            <summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> implementation for a source code project.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent">
            <summary>
            Provides the base requirements for project content, which might represent an assembly or the contents of an open project.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetChildNamespaceNames(System.String)">
            <summary>
            Gets the collection of child namespace names for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>The collection of child namespace names for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetExtensionMethods(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of available extension methods that target the specified type.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> used to resolve type references.</param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="targetTypes">
            The array of the inheritance hierarchy of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of available extension methods that target the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetNestedTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of nested types within the specified type.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of nested types within the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetStandardModules(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of standard modules within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of standard modules within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.GetTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of types within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of types within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.HasNamespace(System.String)">
            <summary>
            Returns whether the project content defines any types with the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>
            <c>true</c> if the project content defines any types with the specified namespace name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.AssemblyFullName">
            <summary>
            Gets the full name of the assembly that defined this project content, if any.
            </summary>
            <value>The full name of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.AssemblyLocation">
            <summary>
            Gets the location of the assembly that defined this project content, if any.
            </summary>
            <value>The location of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent.NamespaceNames">
            <summary>
            Gets the collection of namespace names in the project content.
            </summary>
            <value>The collection of namespace names in the project content.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.#ctor">
            <summary>
            Initializes a new instance of the <c>SourceProjectContent</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.ActiproSoftware#SyntaxEditor#ISemanticParseDataTarget#NotifySemanticParseComplete(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)">
            <summary>
            Occurs when a semantic parse request is completed.
            </summary>
            <param name="request">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest"/> that contains the semantic parse request information and the parse data result.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.AddCore(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Boolean)">
            <summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to the project content.
            </summary>
            <param name="sourceKey">The string-based key that identifies the source of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>, typically a filename.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to add.</param>
            <param name="forcePartial">Whether to force a parial keyword (for VB).</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.ClearCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo,System.String)">
            <summary>
            Removes all data that is related to the specified source key.
            </summary>
            <param name="parentNamespaceInfo">The parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/>.</param>
            <param name="sourceKey">The source key of data to remove.</param>
            <remarks>
            <c>true</c> if the namespace info is empty after the method call; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetChildNamespaceInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo,System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> object for the specified child namespace name and creates one if necessary.
            </summary>
            <param name="parentNamespaceInfo">The parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/>.</param>
            <param name="childNamespaceName">The child namespace name.</param>
            <param name="createIfNecessary">Whether to create a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> if none is found.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> object for the specified child namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetNamespaceInfo(System.String)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> object for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> object for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetTypeInfo(System.String)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.TypeInfo"/> object for the specified type name.
            </summary>
            <param name="typeFullName">The type name for which to search.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.TypeInfo"/> object for the specified type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetTypesForSourceKeyCore(System.Collections.IList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo,System.String,System.Boolean)">
            <summary>
            Populates a list of types defined within the specified source.
            </summary>
            <param name="types">The <see cref="T:System.Collections.IList"/> to append the types to.</param>
            <param name="parentNamespaceInfo">The parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/>.</param>
            <param name="sourceKey">The string-based key that identifies the source of the code, typically a filename.</param>
            <param name="returnMergedPartialClasses">Indicates whether to return the merged version of any partial types or only that portion of partial types that are defined in the source.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.LoadNamespaceNames(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo,System.String)">
            <summary>
            Recursively loads the namespace names.
            </summary>
            <param name="namespaceInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo"/> to examine.</param>
            <param name="namespaceBase">The base namespace name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.UpdateNamespaceNames">
            <summary>
            Updates the namespace names.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.Add(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to the project content.
            </summary>
            <param name="sourceKey">The string-based key that identifies the source of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>, typically a filename.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to add.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.AddRange(System.String,System.Collections.ICollection)">
            <summary>
            Adds a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> objects to the project content.
            </summary>
            <param name="sourceKey">The string-based key that identifies the source of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> objects, typically a filename.</param>
            <param name="types">The <see cref="T:System.Collections.ICollection"/> of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> objects to add.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.Clear">
            <summary>
            Clears all data in the project content.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.Clear(System.String)">
            <summary>
            Removes all data that is related to the specified source key.
            </summary>
            <param name="sourceKey">The source key of data to remove.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetChildNamespaceNames(System.String)">
            <summary>
            Gets the collection of child namespace names for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>The collection of child namespace names for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetCompilationUnits">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.ICompilationUnit"/> objects that are currently loaded in the source project content.
            </summary>
            <returns>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.ICompilationUnit"/> objects that are currently loaded in the source project content.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetExtensionMethods(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of available extension methods that target the specified type.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> used to resolve type references.</param>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="targetTypes">
            The array of the inheritance hierarchy of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of available extension methods that target the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetNestedTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of nested types within the specified type.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of nested types within the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetSourceKeys">
            <summary>
            Gets the collection of source keys (generally filenames) that are currently loaded in the source project content.
            </summary>
            <returns>The collection of source keys (generally filenames) that are currently loaded in the source project content.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetStandardModules(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of standard modules within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of standard modules within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of types within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of types within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.GetTypesForSourceKey(System.String,System.Boolean)">
            <summary>
            Gets the collection of types defined within the specified source.
            </summary>
            <param name="sourceKey">The string-based key that identifies the source of the code, typically a filename.</param>
            <param name="returnMergedPartialClasses">Indicates whether to return the merged version of any partial types or only that portion of partial types that are defined in the source.</param>
            <returns>The collection of types defined within within specified source.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.HasNamespace(System.String)">
            <summary>
            Returns whether the project content defines any types with the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>
            <c>true</c> if the project content defines any types with the specified namespace name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.LoadForCode(ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor,System.String,System.String)">
            <summary>
            Loads the type reflection data into the project content for the specified code.
            </summary>
            <param name="language">The .NET Languages Add-on language to use for parsing the code.</param>
            <param name="sourceKey">The string-based key that identifies the source of the code, typically a filename.</param>
            <param name="code">The code to load.</param>
            <returns>
            The parse hash key identifying the request that was sent to the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserService"/>.
            </returns>
            <remarks>
            The ideal time to use this method is when loading a "project" into an IDE application.
            Call it once for each code file in the project whose reflection data should be placed in the project content.
            <para>
            The results of the parse will be merged into the source project content using the specified source key.
            Any existing project content data with a matching source key will be replaced.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.LoadForFile(ActiproSoftware.SyntaxEditor.ISemanticParserServiceProcessor,System.String)">
            <summary>
            Loads the type reflection data into the project content for the specified code file.
            </summary>
            <param name="language">The .NET Languages Add-on language to use for parsing the code.</param>
            <param name="filename">The path to the .NET code file to load.</param>
            <returns>
            The parse hash key identifying the request that was sent to the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserService"/>.
            </returns>
            <remarks>
            The ideal time to use this method is when loading a "project" into an IDE application.
            Call it once for each code file in the project whose reflection data should be placed in the project content.
            <para>
            The results of the parse will be merged into the source project content using the filename as the source key.
            Any existing project content data with a source key that is the same as the filename will be replaced.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.OnSemanticParseComplete(ActiproSoftware.SyntaxEditor.SemanticParseEventArgs)">
            <summary>
            Raises the <c>SemanticParseComplete</c> event.
            </summary>
            <param name="e">A <c>SemanticParseEventArgs</c> that contains the event data.</param>
            <remarks>
            The <c>OnSemanticParseComplete</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnSemanticParseComplete</c> in a derived class, be sure to call the base class's 
            <c>OnSemanticParseComplete</c> method so that registered delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="E:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.SemanticParseComplete">
            <summary>
            Occurs after semantic parsing has completed for a source code parse request.
            </summary>
            <eventdata>
            The event handler receives an argument of type <c>SemanticParseEventArgs</c> containing data related to this event.
            </eventdata>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.ActiproSoftware#SyntaxEditor#ISemanticParseDataTarget#Guid">
            <summary>
            Gets a unique GUID that identifies the object.
            </summary>
            <value>A unique GUID that identifies the object.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.AssemblyFullName">
            <summary>
            Gets or sets the full name of the assembly that defined this project content, if any.
            </summary>
            <value>The full name of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.AssemblyLocation">
            <summary>
            Gets the location of the assembly that defined this project content, if any.
            </summary>
            <value>The location of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceNames">
            <summary>
            Gets the collection of namespace names in the project content.
            </summary>
            <value>The collection of namespace names in the project content.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.NamespaceInfo">
            <summary>
            Stores data about a namespace node.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent.TypeInfo">
            <summary>
            Stores data about a type node.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter">
            <summary>
            Represents a .NET parameter that is defined in an assembly.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter">
            <summary>
            Represents the base requirements for a .NET parameter.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.CloneForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Close the parameter but assigns it the specified alternate <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="parameterType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> indicating the type.</param>
            <returns>The cloned parameter.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.IsByReference">
            <summary>
            Gets whether the parameter is a by-reference parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is a by-reference parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.IsOutput">
            <summary>
            Gets whether the parameter is an output parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is an output parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter.ParameterType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.#ctor(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomParameter</c> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="parameterFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> for the parameter.</param>
            <param name="parameterType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomParameter</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the parameter.</param>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomParameter#CloneForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Close the parameter but assigns it the specified alternate <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="parameterType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> indicating the type.</param>
            <returns>The cloned parameter.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.HasParameterFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> flag is set.
            </summary>
            <param name="parameterFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> value to examine.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> to check for.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.SetParameterFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags,System.Boolean)">
            <summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> flag.
            </summary>
            <param name="parameterFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> value to update.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> to set or clear.</param>
            <param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param>
            <returns>The updated <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> value.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.ParameterFlags">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> for the parameter.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomParameterFlags"/> for the parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.IsByReference">
            <summary>
            Gets whether the parameter is a by-reference parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is a by-reference parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.IsOutput">
            <summary>
            Gets whether the parameter is an output parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is an output parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter.ParameterType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType">
            <summary>
            Specifies the type of a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Unknown">
            <summary>
            The type is unknown.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Namespace">
            <summary>
            A namespace reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.NamespaceAlias">
            <summary>
            A namespace reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Number">
            <summary>
            A number.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Type">
            <summary>
            A type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.This">
            <summary>
            A "this" object reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Base">
            <summary>
            A "base" object reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Member">
            <summary>
            A member reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Variable">
            <summary>
            A variable reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Constant">
            <summary>
            A constant reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.Parameter">
            <summary>
            A parameter reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.DocumentationCommentParentTag">
            <summary>
            A documentation comment parent tag.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.StringLiteral">
            <summary>
            A string literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType.ArrayItem">
            <summary>
            An array item.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem">
            <summary>
            Represents an item within a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>DotNetContextItem</c> class.
            </summary>
            <param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType"/> indicating the type of context item.</param>
            <param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange"/> of the item.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.#ctor(ActiproSoftware.SyntaxEditor.TextRange,System.String)">
            <summary>
            Initializes a new instance of the <c>DotNetContextItem</c> class.
            </summary>
            <param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange"/> of the item.</param>
            <param name="text">The text of the item.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType,ActiproSoftware.SyntaxEditor.TextRange,System.String)">
            <summary>
            Initializes a new instance of the <c>DotNetContextItem</c> class.
            </summary>
            <param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType"/> indicating the type of context item.</param>
            <param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange"/> of the item.</param>
            <param name="text">The text of the item.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.AppendIndexerParameterCountLevel(System.Int32[]@,System.Int32)">
            <summary>
            Appends a level to the indexer parameter count array.
            </summary>
            <param name="indexerParameterCounts">The indexer parameter count array to update.</param>
            <param name="parameterCount">The parameter count for the new level.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ArgumentsText">
            <summary>
            Gets or sets the text string of arguments that were specified to a member.
            </summary>
            <value>The text string of arguments that were specified to a member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.GenericTypeArguments">
            <summary>
            Gets the array of generic type argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> objects of this item.
            </summary>
            <value>The array of generic type argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> objects of this item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ResolvedArguments">
            <summary>
            Gets the array of resolved argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> objects of this item.
            </summary>
            <value>The array of resolved argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> objects of this item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.UnresolvedArguments">
            <summary>
            Gets the array of unresolved argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> objects of this item.
            </summary>
            <value>The array of unresolved argument <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> objects of this item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.IndexerParameterCounts">
            <summary>
            Gets or sets the array indexer parameter counts.
            </summary>
            <value>The array indexer parameter counts.</value>
            <remarks>
            <c>this</c> is <see langword="null"/>.
            <c>this[0]</c> is <c>{ 1 }</c>.
            <c>this[0, 1]</c> is <c>{ 2 }</c>.
            <c>this[0][1]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ResolvedInfo">
            <summary>
            Gets or sets an object that contains resolved information about the context item.
            </summary>
            <value>An object that contains resolved information about the context item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <value>The text of the item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange"/> of the item.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.TextRange"/> of the item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.Type">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType"/> indicating the type of context item.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItemType"/> indicating the type of context item.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration">
            <summary>
            Represents a enumeration declaration block.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>EnumDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement">
            <summary>
            Represents a labeled statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement.LabelContextID">
            <summary>
            Gets the context ID for a label AST node.
            </summary>
            <value>The context ID for a label AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>LabeledStatement</c> class. 
            </summary>
            <param name="label">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement.Label">
            <summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LabeledStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration">
            <summary>
            Represents a enumeration member declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>EnumMemberDeclaration</c> class. 
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.Initializer">
            <summary>
            Gets or sets the initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EnumerationMemberDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier">
            <summary>
            Represents a qualified identifier.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Identifier</c> class. 
            </summary>
            <param name="text">The text of the qualified identifier.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.#ctor(System.String,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>Identifier</c> class. 
            </summary>
            <param name="text">The text of the qualified identifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier.Text">
            <summary>
            Gets or sets the text of the qualified identifier.
            </summary>
            <value>The text of the qualified identifier.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression">
            <summary>
            Represents a try cast expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>TryCastExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <param name="returnType">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> indicating the return type.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryCastExpression.ReturnType">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the return type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the return type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo">
            <summary>
            Stores array and pointer information for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>DomArrayPointerInfo</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <c>DomArrayPointerInfo</c> class.
            </summary>
            <param name="arrayRanks">The array ranks.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>DomArrayPointerInfo</c> class.
            </summary>
            <param name="pointerLevel">The pointer level.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.#ctor(System.Int32[],System.Int32)">
            <summary>
            Initializes a new instance of the <c>DomArrayPointerInfo</c> class.
            </summary>
            <param name="arrayRanks">The array ranks.</param>
            <param name="pointerLevel">The pointer level.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.ArrayRanks">
            <summary>
            Gets or sets the array ranks.
            </summary>
            <value>The array ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo.PointerLevel">
            <summary>
            Gets or sets the pointer level.
            </summary>
            <value>The pointer level.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement">
            <summary>
            Represents an exit statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ExitStatement</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement">
            <summary>
            Represents an array erase statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>ArrayEraseStatement</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement.Expressions">
            <summary>
            Gets the collection of expressions.
            </summary>
            <value>The collection of expressions.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayEraseStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause">
            <summary>
            Represents an array redim clause.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,System.Int32[],ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ArrayRedimClause</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.Expression"/>.</param>
            <param name="arrayRanks">The array ranks.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.ArrayRanks">
            <summary>
            Gets or sets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.Expression"/> that represents the expression.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.Expression"/> that represents the expression.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression">
            <summary>
            Represents a object or collection initializer expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <c>ObjectCollectionInitializerExpression</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ObjectCollectionInitializerExpression</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.Initializers">
            <summary>
            Gets the collection of initializers.
            </summary>
            <value>The collection of initializers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression">
            <summary>
            Represents a get XML namespace expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>GetXmlNamespaceExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the checked modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the expression.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GetXmlNamespaceExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken">
            <summary>
            Represents a <c>C#</c> <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.#ctor(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)">
            <summary>
            Initializes a new instance of the <c>CSharpToken</c> class.
            </summary>
            <param name="startOffset">The start offset of the token.</param>
            <param name="length">The length of the token.</param>
            <param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"/> for the token.</param>
            <param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"/> property.</param>
            <param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that contains lexical parse information about the token.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.Clone(System.Int32,System.Int32)">
            <summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset"/> of the cloned object.</param>
            <param name="length">The length of the cloned object.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that was created.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsNativeType(System.Int32)">
            <summary>
            Returns whether the specified token ID is a native type.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a native type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.ToString">
            <summary>
            Creates and returns a string representation of the current object.
            </summary>
            <returns>A string representation of the current object.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsComment">
            <summary>
            Gets whether the token represents a comment.
            </summary>
            <value>
            <c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsDocumentEnd">
            <summary>
            Gets whether the token marks the end of the document.
            </summary>
            <value>
            <c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsInvalid">
            <summary>
            Gets whether the token marks an invalid range of text.
            </summary>
            <value>
            <c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsPairedEnd">
            <summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair; otherwise, <c>false</c>.
            </value>
            <remarks>
            A token pair is generally a pair of brackets.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsPairedStart">
            <summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair; otherwise, <c>false</c>.
            </value>
            <remarks>
            A token pair is generally a pair of brackets.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.IsWhitespace">
            <summary>
            Gets whether the token represents whitespace.
            </summary>
            <value>
            <c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.Key">
            <summary>
            Gets the key assigned to the token.
            </summary>
            <value>The key assigned to the token.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpToken.MatchingTokenID">
            <summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> if this token is paired.
            </summary>
            <value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> if this token is paired.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser">
            <summary>
            Represents a <c>Visual Basic</c> recursive descent lexical parser implementation.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.#ctor(ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage,ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)">
            <summary>
            Initializes a new instance of the <c>VBRecursiveDescentLexicalParser</c> class.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage"/> to use.</param>
            <param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/> to use for coordinating merged languages.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.CloseDocumentationComment">
            <summary>
            Closes the current documentation comment.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.ConsumeImplicitLineContinuationAfter">
            <summary>
            Consumes any implicit line continuation after the current token.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.IsImplicitLineContinuationBefore">
            <summary>
            Returns whether the line terminator is an implicit line continuation before another token.
            </summary>
            <returns>
            <c>true</c> if the line terminator is an implicit line continuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.GetNextTokenCore">
            <summary>
            Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> and seeks past it.
            </summary>
            <returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.ReapComments(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Reaps the comments that have been collected since the last reaping.
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> before which the comments must start.</param>
            <returns>The comments that have been collection since the last reaping.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.ReapDocumentationComments">
            <summary>
            Reaps the documentation comments that have been collected since the last reaping.
            </summary>
            <returns>The documentation comments that have been collection since the last reaping.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.DocumentationCommentTextRanges">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.</value>
            <remarks>
            Do not access this property until parsing is complete.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBRecursiveDescentLexicalParser.RegionTextRanges">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.</value>
            <remarks>
            Do not access this property until parsing is complete.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser">
            <summary>
            Represents a <c>Visual Basic</c> lexical parser implementation.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.#ctor">
            <summary>
            Initializes a new instance of the <c>VBLexicalParser</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ConsumeXmlCommentOrCData(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Consumes the XML comment or CDATA section.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ConsumeXmlEmbeddedExpression(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Consumes the XML embedded expression.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ConsumeXmlProcessingInstruction(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Consumes the XML processing instruction.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>
            <c>true</c> if the PI is an XML declaration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ConsumeXmlTag(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Consumes the XML tag.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>
            <c>true</c> if the XML tag is a block start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsNextText(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.String,System.Boolean)">
            <summary>
            Looks forward (skipping whitespace) to see if the next text matches the specified text.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="nextText">The next text to match.</param>
            <param name="allowWhitespaceAndLineContinuations">Whether to allow whitespace and line continuations.</param>
            <returns>
            <c>true</c> if the next text matches the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsXmlLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.Boolean)">
            <summary>
            Returns whether the current "&lt;" character starts an XML literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="checkNextCharacter">Whether to check the next character for a valid XML literal start.</param>
            <returns>
            <c>true</c> if the current "&lt;" character starts an XML literal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.GetLexicalStateDefaultTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Returns a single-character <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> representing the lexical parse data for the
            default token in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> and seeks forward one position in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/>
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that specifies the current context.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> for default text in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.GetNextTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Performs a lexical parse to return the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> 
            from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> and seeks past it if there is a match.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that specifies the current context.</param>
            <param name="lexicalParseData">Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/>.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsDocumentationCommentStateScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsDocumentationCommentStateScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsPreProcessorDirectiveStateScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.IsPreProcessorDirectiveStateScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseDateLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a date literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseIdentifier(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.Char,System.Boolean,System.Boolean@)">
            <summary>
            Parses an identifier.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="ch">The first character of the identifier.</param>
            <param name="isEscaped">Whether the identifier is escaped.</param>
            <param name="isLooseMatch">Whether the match is a loose match.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseNumber(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Parses a number.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="ch">The first character of the number.</param>
            <param name="isHex">Whether the number is a hexadecimal number.</param>
            <param name="isOctal">Whether the number is an octal number.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseSingleLineComment(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a single line comment.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseStringLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a string literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseXmlAttribute(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses an XML attribute.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalParser.ParseXmlLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses an XML literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType">
            <summary>
            Represents a .NET type type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.Class">
            <summary>
            A class type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.Structure">
            <summary>
            A structure type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.Interface">
            <summary>
            An interface type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.Enumeration">
            <summary>
            An enumeration type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.Delegate">
            <summary>
            A delegate type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType.StandardModule">
            <summary>
            A standard module type.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent">
            <summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> implementation for a .NET assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.#ctor(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>AssemblyProjectContent</c> class.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that has the project content.</param>
            <param name="cachePath">The path to the cache folder.</param>
            <param name="documentationEnabled">Whether documentation loading is enabled.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>AssemblyProjectContent</c> class.
            </summary>
            <param name="assemblyFullName">The full name of the assembly.</param>
            <param name="assemblyLocation">The location of the assembly.</param>
            <param name="cachePath">The path to the cache folder.</param>
            <param name="documentationEnabled">Whether documentation loading is enabled.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.#ctor(System.Reflection.Assembly,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>AssemblyProjectContent</c> class.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that has the project content, if known.</param>
            <param name="assemblyFullName">The full name of the assembly.</param>
            <param name="assemblyLocation">The location of the assembly.</param>
            <param name="cachePath">The path to the cache folder.</param>
            <param name="documentationEnabled">Whether documentation loading is enabled.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadNamespaceInfoNode(System.IO.BinaryReader)">
            <summary>
            Reader a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> node and its child nodes from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadMember(System.IO.BinaryReader,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType)">
            <summary>
            Reads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember"/> from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that declared the member.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadParameter(System.IO.BinaryReader)">
            <summary>
            Reads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter"/> from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadType(System.IO.BinaryReader)">
            <summary>
            Reads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadTypeBase(System.IO.BinaryReader,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase)">
            <summary>
            Reads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase"/> from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <param name="typeReference">The existing <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase"/> to fill.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadTypeInfoNode(System.IO.BinaryReader)">
            <summary>
            Reader a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> node and its child nodes from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ReadTypeReference(System.IO.BinaryReader)">
            <summary>
            Reads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> that was read.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteMember(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember)">
            <summary>
            Writes an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteNamespaceInfoNode(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo)">
            <summary>
            Writes a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> node and its child nodes to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="namespaceInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteParameter(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter)">
            <summary>
            Writes an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="parameter">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameter"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteType(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType)">
            <summary>
            Writes an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteTypeBase(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase)">
            <summary>
            Writes an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeBase"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteTypeInfoNode(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo)">
            <summary>
            Writes a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> node and its child nodes to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="typeInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.WriteTypeReference(System.IO.BinaryWriter,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Writes an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to use.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to write.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetChildNamespaceInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo,System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> object for the specified child namespace name and creates one if necessary.
            </summary>
            <param name="parentNamespaceInfo">The parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/>.</param>
            <param name="childNamespaceName">The child namespace name.</param>
            <param name="createIfNecessary">Whether to create a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> if none is found.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> object for the specified child namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetNamespaceInfo(System.String)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> object for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> object for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetReferencedAssembly(System.Int32)">
            <summary>
            Returns the referenced assembly with the specified index.
            </summary>
            <param name="index">The index of the referenced assembly to retrieve.</param>
            <returns>The referenced assembly with the specified index.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetReferencedAssemblyIndex(System.String)">
            <summary>
            Returns the index of the specified assembly within the referenced assemblies collection.
            </summary>
            <param name="assemblyName">The name of the assembly.</param>
            <returns>The index of the specified assembly within the referenced assemblies collection.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetTypeInfo(System.String)">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> object for the specified type name.
            </summary>
            <param name="typeFullName">The type name for which to search.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> object for the specified type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetTypeReference(System.Type)">
            <summary>
            Returns an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that needs a reference.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> for the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[],System.Type)">
            <summary>
            Returns an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="callingGenericTypes">The calling generic type array, used to prevent infinite recursion with generic constraints on a generic.</param>
            <param name="type">The <see cref="T:System.Type"/> that needs a reference.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> for the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetXmlDocumentationPath(System.Reflection.Assembly)">
            <summary>
            Returns the path for the XML documentation file, if one exists.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to obtain documentation.</param>
            <returns>The path for the XML documentation file, if one exists.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.IsMatch(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> matches with the desired <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/>.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> matches with the desired <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.LoadFromCache(System.DateTime,System.String)">
            <summary>
            Loads the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> from the specified path.
            </summary>
            <param name="dateTime">The last modification date/time of the assembly.</param>
            <param name="path">The path to the cached reflection file.</param>
            <returns>
            <c>true</c> if the file was loaded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.LoadHeaderFromCache(System.String)">
            <summary>
            Loads the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CacheHeader"/> from the specified cache file.
            </summary>
            <param name="path">The path to the cached reflection file.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CacheHeader"/> that was loaded.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.LoadNamespaceNames(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo,System.String)">
            <summary>
            Recursively loads the namespace names.
            </summary>
            <param name="namespaceInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> to examine.</param>
            <param name="namespaceBase">The base namespace name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ResolveAssemblyDomTypePlaceHolder(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder)">
            <summary>
            Resolves an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder"/> into a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/>.
            </summary>
            <param name="placeHolder">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypePlaceHolder"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomType"/> that was found.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ResolveTypePlaceHolders">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="namespaceInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo"/> to examine.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="typeInfo">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo"/> to examine.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.SaveToCache(System.DateTime,System.String)">
            <summary>
            Saves assembly project content to a cache file.
            </summary>
            <param name="dateTime">The last modification date/time of the assembly.</param>
            <param name="path">The path to the cached reflection file.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.UpdateNamespaceNames">
            <summary>
            Updates the namespace names.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetChildNamespaceNames(System.String)">
            <summary>
            Gets the collection of child namespace names for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>The collection of child namespace names for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetExtensionMethods(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of available extension methods that target the specified type.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> used to resolve type references.</param>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="targetTypes">
            The array of the inheritance hierarchy of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of available extension methods that target the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetNestedTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of nested types within the specified type.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of nested types within the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetStandardModules(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of standard modules within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of standard modules within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is defined in the project content with the specified type full name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.GetTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of types within the specified namespace name.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of types within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.HasNamespace(System.String)">
            <summary>
            Returns whether the project content defines any types with the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>
            <c>true</c> if the project content defines any types with the specified namespace name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CachedDocumentationFilename">
            <summary>
            Gets the filename for the documentation cache.
            </summary>
            <value>The filename for the documentation cache.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CachedReflectionFilename">
            <summary>
            Gets the filename for the reflection cache.
            </summary>
            <value>The filename for the reflection cache.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.Documentation">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation"/> if one exists.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation"/> if one exists.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.AssemblyFullName">
            <summary>
            Gets the full name of the assembly that defined this project content, if any.
            </summary>
            <value>The full name of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.AssemblyLocation">
            <summary>
            Gets the location of the assembly that defined this project content, if any.
            </summary>
            <value>The location of the assembly that defined this project content, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceNames">
            <summary>
            Gets the collection of namespace names in the project content.
            </summary>
            <value>The collection of namespace names in the project content.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CacheHeader">
            <summary>
            Stores data for the cache header.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.CacheHeader.IsValid">
            <summary>
            Returns whether the cache header is valid.
            </summary>
            <returns>
            <c>true</c> if the cache header is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.NamespaceInfo">
            <summary>
            Stores data about a namespace node.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent.TypeInfo">
            <summary>
            Stores data about a type node.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression">
            <summary>
            Represents a statement expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Initializes a new instance of the <c>StatementExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.Expression"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>StatementExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.Expression"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StatementExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement">
            <summary>
            Represents a for statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.ConditionContextID">
            <summary>
            Gets the context ID for a condition AST node.
            </summary>
            <value>The context ID for a condition AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.IteratorContextID">
            <summary>
            Gets the context ID for an iterator AST node.
            </summary>
            <value>The context ID for an iterator AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.Condition">
            <summary>
            Gets or sets the condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.Initializers">
            <summary>
            Gets the collection of declarators.
            </summary>
            <value>The collection of declarators.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.Iterators">
            <summary>
            Gets the collection of iterators.
            </summary>
            <value>The collection of iterators.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement">
            <summary>
            Represents a break statement.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>BreakStatement</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BreakStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess">
            <summary>
            Represents a this access expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ThisAccess</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ThisAccess.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression">
            <summary>
            Represents a sizeof expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.TypeReferenceContextID">
            <summary>
            Gets the context ID for a type reference AST node.
            </summary>
            <value>The context ID for a type reference AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>SizeOfExpression</c> class. 
            </summary>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.TypeReference"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.TypeReference"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SizeOfExpression.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression">
            <summary>
            Represents a binary expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.LeftExpressionContextID">
            <summary>
            Gets the context ID for a left expression AST node.
            </summary>
            <value>The context ID for a left expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.RightExpressionContextID">
            <summary>
            Gets the context ID for a right expression AST node.
            </summary>
            <value>The context ID for a right expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>BinaryExpression</c> class. 
            </summary>
            <param name="operatorType">An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.OperatorType"/> indicating the binary operator type.</param>
            <param name="leftExpression">The left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unary operator.</param>
            <param name="rightExpression">The right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unary operator.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the expression.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.LeftExpression">
            <summary>
            Gets or sets the left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.
            </summary>
            <value>The left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.OperatorType">
            <summary>
            Gets or sets an <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.OperatorType"/> indicating the binary operator type.
            </summary>
            <value>An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.OperatorType"/> indicating the binary operator type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BinaryExpression.RightExpression">
            <summary>
            Gets or sets the right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.
            </summary>
            <value>The right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference">
            <summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with resolved array rank and pointer information.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Int32[],System.Int32)">
            <summary>
            Initializes a new instance of the <c>DomResolvedTypeReference</c> class.
            </summary>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that this type reference is based on.</param>
            <param name="arrayRanks">The array ranks.</param>
            <param name="pointerLevel">The pointer level.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#Modifiers">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
            <remarks>
            Types defined in source code will return <see langword="null"/> for this property since
            they will be contained in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent"/> for the 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> in use.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AccessModifiers">
            <summary>
            Gets the access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomResolvedTypeReference.CoreType">
            <summary>
            Gets the core <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is wrapped by this class.
            </summary>
            <value>The core <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is wrapped by this class.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType">
            <summary>
            Specifies the type of a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType.ResetException">
            <summary>
            Resets the most recent exception to <c>null</c>/
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType.ResetExceptionHandlerLocation">
            <summary>
            Resets the most recent exception-handler location to <c>null</c>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType.EstablishHandlerLocation">
            <summary>
            Establishes the label as the most recent exception-handler location.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType.EstablishResumeNext">
            <summary>
            Establishes the Resume Next behavior as the most recent exception-handler location.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType">
            <summary>
            Specifies the type of a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatement"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.Goto">
            <summary>
            A goto statement, implemented by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GotoStatement"/> class.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.Exit">
            <summary>
            An exit statement, implemented by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExitStatement"/> class.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.Continue">
            <summary>
            A continue statement, implemented by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ContinueStatement"/> class.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.Stop">
            <summary>
            A stop statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.End">
            <summary>
            An end statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BranchStatementType.Return">
            <summary>
            A return statement, implemented by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ReturnStatement"/> class.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser">
            <summary>
            Represents a <c>C#</c> lexical parser implementation.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.#ctor">
            <summary>
            Initializes a new instance of the <c>CSharpLexicalParser</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.GetPreviousText(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Looks backward (skipping whitespace) to get the previous word.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The previous word.</returns>
            <remarks>
            This method only looks at letters for sequential runs and will not scan words longer than 10 characters.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.IsNextText(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.String)">
            <summary>
            Looks forward (skipping whitespace) to see if the next text matches the specified text.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="nextText">The next text to match.</param>
            <returns>
            <c>true</c> if the next text matches the specified text; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.GetLexicalStateDefaultTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Returns a single-character <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> representing the lexical parse data for the
            default token in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> and seeks forward one position in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/>
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that specifies the current context.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> for default text in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.GetNextTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Performs a lexical parse to return the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> 
            from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> and seeks past it if there is a match.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that specifies the current context.</param>
            <param name="lexicalParseData">Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/>.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.IsDocumentationCommentStateScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.IsDocumentationCommentStateScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.IsPreProcessorDirectiveStateScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.IsPreProcessorDirectiveStateScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalScope,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)">
            <summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> matching callbacks.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope"/> that specifies the lexical scope to check.</param>
            <param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that was parsed, if any.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType"/> indicating the type of match that was made.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseCharacterLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a character literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseIdentifier(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.Char)">
            <summary>
            Parses an identifier.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="ch">The first character of the identifier.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseMultiLineComment(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a multiple line comment.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseNumber(ActiproSoftware.SyntaxEditor.ITextBufferReader,System.Char)">
            <summary>
            Parses a number.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <param name="ch">The first character of the number.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseSingleLineComment(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a single line comment.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseStringLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a string literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalParser.ParseVerbatimStringLiteral(ActiproSoftware.SyntaxEditor.ITextBufferReader)">
            <summary>
            Parses a verbatim string literal.
            </summary>
            <param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"/> that is reading a text source.</param>
            <returns>The ID of the token that was matched.</returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormatter">
            <summary>
            Provides token-based formatting routines for the the <c>C#</c> language.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormatter.AutoIndent(ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions,ActiproSoftware.SyntaxEditor.Document,System.Int32,System.String)">
            <summary>
            Auto-indents line-starting text before the specified offset.
            </summary>
            <param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions"/> to use.</param>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset that the line-starting text ends at.</param>
            <param name="lineStartText">The line-starting text.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormatter.GetIndentationForOffset(ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions,ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Returns the desired line indentation of the specified offset.
            </summary>
            <param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions"/> to use.</param>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset that requires desired indentation information.</param>
            <returns>The desired line indentation of the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormatter.IsNamespaceOrTypeDeclarationHeader(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> is in the header of a namespace or type declaration.
            </summary>
            <param name="stream">The <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> is in the header of a namespace or type declaration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage">
            <summary>
            Represents a <c>Visual Basic</c> language definition.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage">
            <summary>
            Represents an abstract base class for a .NET language definition.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>CSharpSyntaxLanguage</c> class.
            </summary>
            <param name="key">The language key.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ActiproSoftware#SyntaxEditor#ISemanticParserServiceProcessor#Process(ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest)">
            <summary>
            Performs a semantic parsing operation using the data in the <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest"/>.
            </summary>
            <param name="request">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParserServiceRequest"/> containing data about what to parse.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CompleteDocumentationCommentTag(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32)">
            <summary>
            Completes the documentation tag at the specified offset.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="offset">The offset at which to base the context.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.GetQuickInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32@)">
            <summary>
            Returns the quick info for the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> at the specified offset.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="offset">The offset to examine.  The offset is updated to the start of the context.</param>
            <returns>The quick info for the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.GetQuickInfoForMemberListItem(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Returns the quick info for the current member list item in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.InsertDocumentationComment(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a documentation comment based on the current context of the caret.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="delimiterTokenID">The ID of the documentation comment token.</param>
            <param name="lineTerminatorTokenID">The ID of the line terminator token.</param>
            <param name="whitespaceTokenID">The ID of the whitespace token.</param>
            <remarks>
            This method should only be called in response to the last '/' character being typed to complete
            a documentation comment delimiter.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IsCurrentOffsetInDefaultState(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32)">
            <summary>
            Returns whether the caret is currently in a default state where IntelliPrompt can be displayed.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to check.</param>
            <param name="lineFeedTokenID">The line feed token ID.</param>
            <returns>
            <c>true</c> if the caret is currently in a default state; otherwise, <c>false</c>.
            </returns>
            <remarks>
            3/2/2010 - Added since IntelliPrompt was showing at the line terminator of single line comments (0D9-131FA7F3-281A)
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Boolean)">
            <summary>
            Added by GFH
            </summary>
            <param name="language"></param>
            <param name="syntaxEditor"></param>
            <param name="completeWord"></param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Boolean,ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Provides the core functionality to show an IntelliPrompt member list based on the current context in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt member list.</param>
            <param name="completeWord">Whether to complete the word.</param>
            <returns>
            <c>true</c> if an auto-complete occurred or if a IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns>
            MODIFIED BY GFH: added extra parameter
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowIntelliPromptParameterInfoCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Provides the core functionality to shows IntelliPrompt parameter info based on the current context in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt parameter info.</param>
            <param name="offset">The offset to examine.</param>
            <param name="forIndexer">Whether the parameter info is for an indexer.</param>
            <returns>
            <c>true</c> if IntelliPrompt parameter info is displayed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.UpdateParameterInfoSelectedText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Boolean)">
            <summary>
            Updates the parameter info's selected item's text.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="force">Whether to force the update.  Otherwise the update only occurs if the text is not yet initialized.</param>
            <returns>
            <c>true</c> if an update occurred; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.UpdateSourceProjectContent(ActiproSoftware.SyntaxEditor.Document,System.Boolean)">
            <summary>
            Updates the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceProjectContent"/> with data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.Document"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="addTypes">Whether to add types or simply clear data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.AddKeywordMemberListItems(System.Collections.Hashtable)">
            <summary>
            Add <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the language keywords to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ResetAutomaticOutliningBehavior">
            <summary>
            Resets the <see cref="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior"/> property to its default value.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShouldSerializeAutomaticOutliningBehavior">
            <summary>
            Indicates whether the <see cref="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior"/> property should be persisted.
            </summary>
            <returns>
            <c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Expands the code block selection level.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> whose selection will be modified.</param>
            <returns>
            <c>true</c> if the selection is modified; otherwise, <c>false</c>.
            </returns>
            <remarks>
            When executed, the selection will change to be over the offset range of the code block that contains the current selection.
            This method can be called multiple times to walk up the hierarchy of code blocks.
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CodeBlockSelectionSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ResetErrorDisplayEnabled">
            <summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled"/> property to its default value.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShouldSerializeErrorDisplayEnabled">
            <summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled"/> property should be persisted.
            </summary>
            <returns>
            <c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.GetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="offset">The offset at which to base the context.</param>
            <param name="beforeOffset">Whether to return the context before the offset.</param>
            <param name="forParameterInfo">Whether to return the context for parameter info.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnDocumentAutomaticOutliningComplete(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)">
            <summary>
            Occurs after automatic outlining is performed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that uses this language.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that is being modified.</param>
            <param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param>
            <remarks>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification"/> may or may not be passed in the event arguments, depending on if the outlining
            is performed in the main thread.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnDocumentFilenameChanged(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)">
            <summary>
            Occurs after the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename"/> property is changed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that uses this language.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that is being modified.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnDocumentFilenameChanging(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)">
            <summary>
            Occurs before the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename"/> property is changed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that uses this language.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that is being modified.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnDocumentSemanticParseDataChanged(ActiproSoftware.SyntaxEditor.Document,System.EventArgs)">
            <summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData"/> property has changed
            on a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that uses this language.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> that is being modified.</param>
            <param name="e">A <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListPreFilter(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.IntelliPromptMemberListPreFilterEventArgs)">
            <summary>
            Occurs before a member list is displayed for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>, allowing for the filtering (removal)
            or addition of member list items.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>IntelliPromptMemberListPreFilterEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnSyntaxEditorKeyTyped(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)">
            <summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>KeyTypedEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.OnSyntaxEditorKeyTyping(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypingEventArgs)">
            <summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyping"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>KeyTypingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.PerformAutomaticOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Performs automatic outlining over the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> indicating the offset range to parse.</param>
            <returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> containing the offset range that was modified by outlining.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SemanticParseFlags)">
            <summary>
            Semantically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> indicating the offset range to parse.</param>
            <param name="flags">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags"/> that indicates semantic parse flags.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowAboutForm">
            <summary>
            Displays the <c>About</c> form for the component.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowIntelliPromptInsertSnippetPopup(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)">
            <summary>
            Shows the IntelliPrompt code snippet <c>Insert Snippet</c> popup.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the popup.</param>
            <param name="labelText">The text of the label on the popup.</param>
            <param name="type">A <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes"/> indicating the type of code snippets to include.</param>
            <returns>
            <c>true</c> if the popup is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptCodeSnippetsSupported"/> property is set to <c>true</c>.
            The popup is not displayed if there is nothing that matches the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetTypes"/> filter.
            </remarks>
        </member>
        <member name="E:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.SyntaxEditorIntelliPromptMemberListPreFilter">
            <summary>
            Occurs before a member list is displayed for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>, allowing for the filtering (removal)
            or addition of member list items.
            </summary>
            <eventdata>
            The event handler receives an argument of type <c>IntelliPromptMemberListPreFilterEventArgs</c> containing data related to this event.
            </eventdata>
            <remarks>
            If you choose to perform any filtering, modify the <c>Items</c> property of the event arguments.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CodeBlockSelectionSupported">
            <summary>
            Gets whether code block selection features are supported by the language.
            </summary>
            <value>
            <c>true</c> if code block selection features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CodeBlockSelectionExpand(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionContract(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> methods may be used.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.CodeSnippetsEnabled">
            <summary>
            Gets or sets whether the automatic code snippet features are enabled.
            </summary>
            <value>
            <c>true</c> if the automatic code snippet features are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.DocumentationCommentAutoCompleteEnabled">
            <summary>
            Gets or sets whether documentation comments will be added when a <c>///</c> is typed.
            </summary>
            <value>
            <c>true</c> if documentation comments will be added when a <c>///</c> is typed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptCodeSnippetsSupported">
            <summary>
            Gets whether IntelliPrompt code snippet features are supported by the language.
            </summary>
            <value>
            <c>true</c> if IntelliPrompt code snippet features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ShowIntelliPromptInsertSnippetPopup(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.String,ActiproSoftware.SyntaxEditor.CodeSnippetTypes)"/> method may be used.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptMemberListEnabled">
            <summary>
            Gets or sets whether the automatic IntelliPrompt member list features are enabled.
            </summary>
            <value>
            <c>true</c> if the automatic IntelliPrompt member list features are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptMemberListSupported">
            <summary>
            Gets whether IntelliPrompt member list features are supported by the language.
            </summary>
            <value>
            <c>true</c> if IntelliPrompt member list features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> methods may be used.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptParameterInfoEnabled">
            <summary>
            Gets or sets whether the automatic IntelliPrompt parameter info features are enabled.
            </summary>
            <value>
            <c>true</c> if the automatic IntelliPrompt parameter info features are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptParameterInfoSupported">
            <summary>
            Gets whether IntelliPrompt parameter info features are supported by the language.
            </summary>
            <value>
            <c>true</c> if IntelliPrompt parameter info features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptParameterInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> method may be used.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptQuickInfoEnabled">
            <summary>
            Gets or sets whether the automatic IntelliPrompt quick info features are enabled.
            </summary>
            <value>
            <c>true</c> if the automatic IntelliPrompt quick info features are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.IntelliPromptQuickInfoSupported">
            <summary>
            Gets whether IntelliPrompt quick info features are supported by the language.
            </summary>
            <value>
            <c>true</c> if IntelliPrompt quick info features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShowIntelliPromptQuickInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)"/> method may be used.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.LanguageType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.SmartIndentSupported">
            <summary>
            Gets whether smart indent features are supported by the language.
            </summary>
            <value>
            <c>true</c> if smart indent features are supported by the language; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this property is <c>true</c>, then the language has implemented smart indent handler code in <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnSyntaxEditorSmartIndent(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)"/>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.SourceProjectContentUpdateEnabled">
            <summary>
            Gets or sets whether the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.SourceProjectContent"/> for the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/>
            is automatically updated when a document's semantic parse data is updated.
            </summary>
            <value>
            <c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.SourceProjectContent"/> for the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/>
            is automatically updated when a document's semantic parse data is updated; otherwise, <c>false</c>.
            </value>
            <remarks>
            Source project content is only updated if the <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> has a <see cref="P:ActiproSoftware.SyntaxEditor.Document.Filename"/> specified.
            In addition, a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> must be set to the <see cref="P:ActiproSoftware.SyntaxEditor.Document.LanguageData"/> property
            and the <see cref="P:ActiproSoftware.SyntaxEditor.Document.SemanticParseData"/> property must contain a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ParameterInfoContext">
            <summary>
            Represents the context of a parameter info.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ParameterInfoContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember[])">
            <summary>
            Initializes a new instance of the <c>ParameterInfoContext</c> class.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that contains information about the target context.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that contains the members.</param>
            <param name="members">The array of members that are included in the parameter info.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ParameterInfoContext.Context">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that contains information about the target context.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that contains information about the target context.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ParameterInfoContext.Members">
            <summary>
            Gets the array of members that are included in the parameter info.
            </summary>
            <value>The array of members that are included in the parameter info.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage.ParameterInfoContext.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that contains the members.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that contains the members.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.#ctor">
            <summary>
            Initializes a new instance of the <c>VBSyntaxLanguage</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is for designer use only and should never be called by your code.
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"></see> that represents the container for the component.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.AddKeywordMemberListItems(System.Collections.Hashtable)">
            <summary>
            Add <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the language keywords to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the end of a document.
            </summary>
            <param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that contains the token.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the end of a document.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents an invalid range of text.
            </summary>
            <param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that contains the token.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents an invalid range of text.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the range of text with the specified lexical parse data.
            </summary>
            <param name="startOffset">The start offset of the token.</param>
            <param name="length">The length of the token.</param>
            <param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"/> for the token.</param>
            <param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"/> property.</param>
            <param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that contains lexical parse information about the token.</param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.GetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="offset">The offset at which to base the context.</param>
            <param name="beforeOffset">Whether to return the context before the offset.</param>
            <param name="forParameterInfo">Whether to return the context for parameter info.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"/> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"/> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.GetTokenString(System.Int32)">
            <summary>
            Gets the token string representation for the specified token ID.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>The token string representation for the specified token ID.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Performs an auto-complete if the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> context with which the IntelliPrompt member list is initialized causes a single selection.
            Otherwise, displays a member list in the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt member list.</param>
            <returns>
            <c>true</c> if an auto-complete occurred or if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ResetLineCommentDelimiter">
            <summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"/> property to its default value.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ShouldSerializeLineCommentDelimiter">
            <summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"/> property should be persisted.
            </summary>
            <returns>
            <c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListItemDescriptionRequested(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs when a description tip is about to be displayed for the selected IntelliPrompt member list item,
            but the item has no description set.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoParameterIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs after the parameter index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoSelectedIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs after the selected index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorKeyTyped(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)">
            <summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>KeyTypedEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorSmartIndent(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)">
            <summary>
            Occurs when a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SmartIndent"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">A <c>SmartIndentEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.OnSyntaxEditorViewMouseHover(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)">
            <summary>
            Occurs when the mouse is hovered over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView"/>.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)">
            <summary>
            Semantically parses the text in the <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/>.
            </summary>
            <param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/> that is managing the mergable language and the text to parse.</param>
            <returns>An object that contains the results of the semantic parsing operation.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.SetOutliningNodeCollapsedText(ActiproSoftware.SyntaxEditor.OutliningNode)">
            <summary>
            Sets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText"/> property for the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode"/>
            prior to the node being collapsed.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode"/> that is requesting collapsed text.</param>
            <remarks>
            The default implementation of this method does nothing.  In that case, the node will use default collapsed text.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ShowAboutForm">
            <summary>
            Displays the <c>About</c> form for the component.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays an IntelliPrompt member list in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt member list.</param>
            <returns>
            <c>true</c> if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ShowIntelliPromptParameterInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays IntelliPrompt parameter info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt parameter info.</param>
            <returns>
            <c>true</c> if IntelliPrompt parameter info is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptParameterInfoSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.ShowIntelliPromptQuickInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays IntelliPrompt quick info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt quick info.</param>
            <returns>
            <c>true</c> if IntelliPrompt quick info is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptQuickInfoSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.LanguageType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.MergableLexicalParser">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"/> that can be used for lexical parsing of the language.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"/> that can be used for lexical parsing of the language.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.TextStatistics">
            <summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.TextStatistics"/> for the language that can be used to provide numerous statistics about text
            such as word, sentence, character counts as well as readability scores and possibly language-specific statistics.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.TextStatistics"/> for the language.</value>
            <remarks>
            To customize the statistics, override this method to return a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSyntaxLanguage.TextStatistics"/> object with customized code for the language.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember">
            <summary>
            Represents a .NET member which has parameters that is defined in an assembly.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember">
            <summary>
            Represents a .NET member that is defined in an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomMember</c> class.
            </summary>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> for the member.</param>
            <param name="name">The name of the member.</param>
            <param name="modifiers">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Modifiers"/> for the member.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomMember</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the member.</param>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.HasMemberFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> flag is set.
            </summary>
            <param name="memberFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> value to examine.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> to check for.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.SetReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.ReturnType"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.SetMemberFlag(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,System.Boolean)">
            <summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> flag.
            </summary>
            <param name="memberFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> value to update.</param>
            <param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> to set or clear.</param>
            <param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param>
            <returns>The updated <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> value.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.GetReflectionImageIndex(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,System.Boolean)">
            <summary>
            Returns the reflection image index for the specified member.
            </summary>
            <param name="memberType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> indicating the type of member.</param>
            <param name="accessModifiers">A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Modifiers"/> indicating the access modifiers.</param>
            <param name="isExtension">Whether the member is an extension.</param>
            <returns>The reflection image index for the specified member.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.MemberFlags">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Modifiers">
            <summary>
            Gets the modifiers for the member.
            </summary>
            <value>The modifiers for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomMember.ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomParameterizedMember</c> class.
            </summary>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> for the member.</param>
            <param name="name">The name of the member.</param>
            <param name="modifiers">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> for the member.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Reflection.MemberInfo,System.String)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomParameterizedMember</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the member.</param>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to wrap with this object.</param>
            <param name="defaultMemberName">The default member name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.SetParameters(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter[])">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.Parameters"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomParameterizedMember.Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement">
            <summary>
            Represents an if statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.ConditionContextID">
            <summary>
            Gets the context ID for a condition AST node.
            </summary>
            <value>The context ID for a condition AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.TrueStatementContextID">
            <summary>
            Gets the context ID for a true statement AST node.
            </summary>
            <value>The context ID for a true statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.FalseStatementContextID">
            <summary>
            Gets the context ID for a false statement name AST node.
            </summary>
            <value>The context ID for a false statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.ElseIfSectionContextID">
            <summary>
            Gets the context ID for an else-if statement section AST node.
            </summary>
            <value>The context ID for an else-if statement section AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement)">
            <summary>
            Initializes a new instance of the <c>IfStatement</c> class. 
            </summary>
            <param name="condition">The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="trueStatement">The true <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>IfStatement</c> class. 
            </summary>
            <param name="condition">The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="trueStatement">The true <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="falseStatement">The false <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.Condition">
            <summary>
            Gets or sets the condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.ElseIfSections">
            <summary>
            Gets the collection of else-if statement sections.
            Used in Visual Basic only.
            </summary>
            <value>The collection of else-if statement sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.FalseStatement">
            <summary>
            Gets or sets the false <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.
            </summary>
            <value>The false <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IfStatement.TrueStatement">
            <summary>
            Gets or sets the true <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.
            </summary>
            <value>The true <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration">
            <summary>
            Represents a destructor declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>DestructorDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DestructorDeclaration.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection">
            <summary>
            Represents an attribute section.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection.AttributeContextID">
            <summary>
            Gets the context ID for an attribute AST node.
            </summary>
            <value>The context ID for an attribute AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection.Attributes">
            <summary>
            Gets the collection of attributes.
            </summary>
            <value>The collection of attributes.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression">
            <summary>
            Represents an invocation expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.ArgumentContextID">
            <summary>
            Gets the context ID for an argument AST node.
            </summary>
            <value>The context ID for an argument AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Initializes a new instance of the <c>InvocationExpression</c> class. 
            </summary>
            <param name="target">The target <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.IsIndexerInvocation">
            <summary>
            Gets or sets whether the invocation is for an indexer (if known).
            </summary>
            <value>
            <c>true</c> if the invocation is for an indexer (if known); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.Arguments">
            <summary>
            Gets the collection of argument expressions.
            </summary>
            <value>The collection of argument expressions.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InvocationExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.Design.DotNetSyntaxLanguageDesigner">
            <summary>
            Extends design-time behavior for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.Design.DotNetSyntaxLanguageDesigner.verb_About(System.Object,System.EventArgs)">
            <summary>
            Occurs when the user selects the About verb.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.Design.DotNetSyntaxLanguageDesigner.InitializeVerbs">
            <summary>
            Implemented by inheritors to initialize the <see cref="P:ActiproSoftware.WinUICore.Design.ActiproControlDesignerBase.VerbsCore"/> property.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.Design.DotNetSyntaxLanguageDesigner.SyntaxLanguage">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage"/> that is being designed.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetSyntaxLanguage"/> that is being designed.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator">
            <summary>
            Represents a query expression group operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.GroupingExpressionContextID">
            <summary>
            Gets the context ID for a grouping expression AST node.
            </summary>
            <value>The context ID for a grouping expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.GroupByExpressionContextID">
            <summary>
            Gets the context ID for a group by expression AST node.
            </summary>
            <value>The context ID for a group by expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.TargetExpressionContextID">
            <summary>
            Gets the context ID for a target expression AST node.
            </summary>
            <value>The context ID for a target expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>GroupQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.GroupBys">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify by what to group.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify by what to group.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.Groupings">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the data being grouped.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the data being grouped.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.GroupQueryOperator.TargetExpressions">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the into portion of the group query operator.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the into portion of the group query operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator">
            <summary>
            Represents a query expression skip operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>SkipQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.Expression"/> for the skip operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.Expression"/> for the skip operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SkipQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext">
            <summary>
            Represents the <c>C#</c> language context for a specific offset.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.SyntaxLanguage,System.Int32)">
            <summary>
            Initializes a new instance of the <c>CSharpContext</c> class.
            </summary>
            <param name="parentContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if any, that created this context.</param>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.SyntaxLanguage,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <c>CSharpContext</c> class.
            </summary>
            <param name="parentContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if any, that created this context.</param>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"/> that created the context.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType"/> that describes the type of context.</param>
            <param name="items">The <see cref="T:System.Collections.ArrayList"/> of context items.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.GetContextForCode(ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.GetContextForDocumentationComment(ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.GetGenericTypeArguments(ActiproSoftware.SyntaxEditor.TextStream,System.Int32)">
            <summary>
            Returns the generic type arguments that are scanned within the current stream offset and the specified end offset.
            </summary>
            <param name="stream">A <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> used to scan text.</param>
            <param name="endOffset">The end offset.</param>
            <returns>The array of generic type arguments.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.IsDocumentationComment(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Gets whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is part of a documentation comment.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is part of a documentation comment; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.ResolveForCode(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> being parsed.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.ResolveArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Resolves the arguments in the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem.ArgumentsText"/>.
            </summary>
            <param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextItem"/> to examine.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.GetContextAtOffset(ActiproSoftware.SyntaxEditor.Document,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.GetContextBeforeOffset(ActiproSoftware.SyntaxEditor.Document,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,System.Boolean)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context before the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset to examine.</param>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <param name="forParameterInfo">Whether the context if for parameter info.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext"/> that describes the context at the specified offset.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpContext.IsLanguageCaseSensitive">
            <summary>
            Gets whether the language is case sensitive.
            </summary>
            <value>
            <c>true</c> if the language is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo">
            <summary>
            Provides a class for retrieving information about the <c>ActiproSoftware.SyntaxEditor.Addons.DotNet</c> assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>AssemblyInfo</c> class.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.Components">
            <summary>
            Gets an array containing the components that must be licensed to be used in production applications.
            </summary>
            <value>An array containing the components that must be licensed to be used in production applications.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.Instance">
            <summary>
            Gets the instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo"/> class for this assembly.
            </summary>
            <value>The instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo"/> class for this assembly.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.LicenseFormProductLogo">
            <summary>
            Gets the product logo <see cref="T:System.Drawing.Image"/> to display on the license form.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> resource that was retrieved.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.LicenseType">
            <summary>
            Gets the type of license that is available for the assembly.
            </summary>
            <value>A <see cref="T:ActiproSoftware.Products.AssemblyLicenseType"/> specifying the type of license that is available for the assembly.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.Platform">
            <summary>
            Gets the target platform for the assembly.
            </summary>
            <value>A <see cref="T:ActiproSoftware.Products.AssemblyPlatform"/> specifying the target platform for the assembly.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.ProductCode">
            <summary>
            Gets the product code of the assembly.
            </summary>
            <value>A three-letter product code of the assembly.</value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.RedistributableFiles">
            <summary>
            Gets an array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product.
            </summary>
            <value>
            An array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product
            </value>
        </member>
        <member name="P:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.AssemblyInfo.Resources">
            <summary>
            Gets a <see cref="T:ActiproSoftware.Products.SyntaxEditor.Resources"/> that provides access to the resources of the assembly.
            </summary>
            <value>
            A <see cref="T:ActiproSoftware.Products.SyntaxEditor.Resources"/> that provides access to the resources of the assembly.
            </value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter">
            <summary>
            Provides token-based formatting routines for the the <c>Visual Basic</c> language.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter.AutoIndent(ActiproSoftware.SyntaxEditor.Document,System.Int32,System.String)">
            <summary>
            Auto-indents line-starting text before the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset that the line-starting text ends at.</param>
            <param name="lineStartText">The line-starting text.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter.GetIndentationForOffset(ActiproSoftware.SyntaxEditor.Document,System.Int32)">
            <summary>
            Returns the desired line indentation of the specified offset.
            </summary>
            <param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> to examine.</param>
            <param name="offset">The offset that requires desired indentation information.</param>
            <returns>The desired line indentation of the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter.IsBlockEnd(System.Int32)">
            <summary>
            Returns whether the specified token ID is a block start.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a block start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter.IsBlockStart(System.Int32)">
            <summary>
            Returns whether the specified token ID is a block start.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a block start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBFormatter.ParseLine(ActiproSoftware.SyntaxEditor.TextStream,System.Int32,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Parses a range of text between statement terminators.
            </summary>
            <param name="stream">The <see cref="T:ActiproSoftware.SyntaxEditor.TextStream"/> to examine.</param>
            <param name="terminatorOffset">The offset at which to stop searching.</param>
            <param name="significantOffset">Returns the significant token's start offset.</param>
            <param name="outdentBefore">Returns whether to outdent before the line.</param>
            <param name="indentAfter">Returns whether to indent after the line.</param>
            <returns>
            <c>true</c> if data was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver">
            <summary>
            Represents a resolver for a .NET project's type/member information.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.#ctor">
            <summary>
            Initializes a new instance of the <c>DotNetProjectResolver</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.#ctor(System.ResolveEventHandler)">
            <summary>
            Initializes a new instance of the <c>DotNetProjectResolver</c> class.
            </summary>
            <param name="hostAppDomainResolver">The custom <see cref="T:System.ResolveEventHandler"/> to use when attempting to resolve assemblies loaded in the host <c>AppDomain</c> by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForComment(System.String)">
            <summary>
            Gets the markup for a comment.
            </summary>
            <param name="comment">The comment text.</param>
            <returns>The markup for a comment.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForKeyword(System.String)">
            <summary>
            Gets the markup for a keyword.
            </summary>
            <param name="keyword">The keyword text.</param>
            <returns>The markup for a keyword.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForOverloadCount(System.Int32)">
            <summary>
            Gets the markup for an overload count.
            </summary>
            <param name="overloadCount">The overload count.</param>
            <returns>The markup for an overload count.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.Boolean,System.Boolean)">
            <summary>
            Gets the markup for a type.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the markup.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <param name="nameOnly">Whether to only include the type name and strip any namespaces or declaring types.</param>
            <param name="bold">Whether to bold the type name.</param>
            <returns>The markup for a type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the markup for a type.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the markup.</param>
            <param name="fullTypeName">The full type name.</param>
            <param name="nameOnly">Whether to only include the type name and strip any namespaces or declaring types.</param>
            <param name="bold">Whether to bold the type name.</param>
            <returns>The markup for a type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMarkupForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String,System.Boolean,System.Boolean,System.Collections.ICollection)">
            <summary>
            Gets the markup for a type.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the markup.</param>
            <param name="fullTypeName">The full type name.</param>
            <param name="nameOnly">Whether to only include the type name and strip any namespaces or declaring types.</param>
            <param name="bold">Whether to bold the type name.</param>
            <param name="genericTypeArguments">The collection of generic type arguments.</param>
            <returns>The markup for a type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForCodeSnippet(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.CodeSnippet)">
            <summary>
            Gets the formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="codeSnippet">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet"/> to examine.</param>
            <returns>The formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippet"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForDecimalIntegerLiteral(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified decimal integer number.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="number">The number to examine.</param>
            <param name="isHex">Whether the number is a hexidecimal number.</param>
            <returns>The formatted text to display in quick info for the specified decimal integer number.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForKeyword(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String)">
            <summary>
            Gets the formatted text to display in quick info for the specified keyword.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="keyword">The keyword to examine.</param>
            <returns>The formatted text to display in quick info for the specified keyword.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForLocalVariable(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.String,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> that is from a local variable reference.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if known.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the variable.</param>
            <param name="variableName">The variable name.</param>
            <param name="reflectionIconsEnabled">Whether reflection icons are enabled.</param>
            <returns>The formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> that is from a local variable reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,System.Int32,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if known.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that references the member.</param>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <param name="selectedParameterIndex">The index of the selected parameter, or <c>-1</c> if none.</param>
            <param name="reflectionIconsEnabled">Whether reflection icons are enabled.</param>
            <returns>The formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForNamespace(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified namespace.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="namespaceName">The namespace to examine.</param>
            <param name="reflectionIconsEnabled">Whether reflection icons are enabled.</param>
            <returns>The formatted text to display in quick info for the specified namespace.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.String,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is from a parameter reference.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>, if known.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.</param>
            <param name="parameterName">The variable name.</param>
            <param name="reflectionIconsEnabled">Whether reflection icons are enabled.</param>
            <returns>The formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is from a parameter reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfoForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Boolean)">
            <summary>
            Gets the formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> requesting the quick info.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="reflectionIconsEnabled">Whether reflection icons are enabled.</param>
            <returns>The formatted text to display in quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForChildNamespaces(System.Collections.Hashtable,System.String)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the child namespaces of the specified namespace to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="namespaceName">The namespace name for which to search.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForCodeSnippets(System.Collections.Hashtable)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate code snippets to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForCodeSnippets(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.CodeSnippetFolder)">
            <summary>
            Recursively adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate code snippets to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="folder">The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolder"/> to examine.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForDeclaringTypeMembers(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the members of declaring types of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForDocumentationComments(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Boolean)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate documentation comments to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to examine.</param>
            <param name="addStartBrace">Whether to add a start brace.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForExtensionMethods(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the members of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForNestedTypes(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags,System.Boolean)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the nested types of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <param name="examineDeclaringTypes">Whether to examine declaring types too.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForMembers(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the members of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForNativeTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the native types to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for examining language native types.</param>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> in which to search.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForTypes(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags,System.Boolean)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the types of the specified namespace to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <param name="includeStandardModuleMembers">Whether to add standard module members.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddMemberListItemsForVariables(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)">
            <summary>
            Adds <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the in-scope variables to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> in which to search.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.CollectGenericParameters(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.String)">
            <summary>
            Examines the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> and returns a table of all the generic parameters that were found, 
            optionally with a certain name.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <param name="name">The optional name for which to search.  A <see langword="null"/> returns all located generic parameters.</param>
            <returns>
            The table of generic parameters that were found.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.CollectGenericParameters(System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.String,System.Collections.Stack)">
            <summary>
            Examines the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> and updates a table of all the generic parameters that were found, 
            optionally with a certain name.
            </summary>
            <param name="results">The table to update.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <param name="name">The optional name for which to search.  A <see langword="null"/> returns all located generic parameters.</param>
            <param name="typeReferenceStack">A <see cref="T:System.Collections.Stack"/> of type references traversed to prevent any possible infinite recursion.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructAndResolveFromSelf(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Constructs and resolves a type reference from itself.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>
            The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructAndResolveMemberReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Constructs a member return generic type reference if one is passed and resolves the type reference.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to examine.</param>
            <param name="itemIndex">The index of the item specifying a member.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <returns>
            The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructAndResolveContextItemMemberReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.Int32)">
            <summary>
            Constructs a generic member return type if one is passed and resolves the type reference.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to examine.</param>
            <param name="itemIndex">The index of the item.</param>
            <returns>
            The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructAndResolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Constructs a generic type reference if one is passed and resolves the type reference.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.  If it is not a generic type definition, it is directly returned.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <returns>
            The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructAndResolveFromTable(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,System.Collections.Hashtable,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Constructs a type based on the supplied generic parameter resolution table.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to resolve.</param>
            <param name="genericParametersTable">A table of generic parameters and their resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> values.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that was constructed.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructGenericType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Constructs a generic type if one is passed.
            </summary>
            <param name="genericTypeDefinition">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.  If it is not a generic type definition, it is directly returned.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information.</param>
            <returns>
            The resolved <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ConstructGenericMethod(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)">
            <summary>
            Attempts to construct a generic method.
            </summary>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <param name="extensionMethodTargetType">A optional <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is passed if the method is an extension method applied to a type.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to use.</param>
            <returns>The constructed <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetAssemblyFromAppDomain(System.String)">
            <summary>
            Returns an assembly from the current <see cref="T:System.AppDomain"/> that has the specified partial name, if one exists.
            </summary>
            <param name="partialAssemblyName">The partial assembly name to look for.</param>
            <returns>An assembly from the current <see cref="T:System.AppDomain"/> that has the specified partial name, if one exists.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetConstructedGenericParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,System.Collections.Stack,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns a constructed generic parameter, by searching through a member parameter type reference and comparing it with supplied arguments.
            </summary>
            <param name="parameterTypeReference">The parameter to examine for a match of <paramref name="name"/>.</param>
            <param name="argumentType">The argument that is passed to the parameter.</param>
            <param name="name">The name of the generic parameter that should be located.</param>
            <param name="typeReferenceStack">A <see cref="T:System.Collections.Stack"/> of type references traversed to prevent any possible infinite recursion.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that was constructed for the generic parameter; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetDependencySearchPaths">
            <summary>
            Returns a <see cref="T:System.Collections.Specialized.StringCollection"/> containing the dependency search paths.
            </summary>
            <returns>A <see cref="T:System.Collections.Specialized.StringCollection"/> containing the dependency search paths.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetGenericSpecification(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Gets the generic specification for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>The generic specification for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetIndexers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags,System.Int32)">
            <summary>
            Gets all the indexers in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that match the specified parameter counts, which includes inherited members.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <param name="indexerParameterCount">The indexer parameter count.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array including all the matching indexers in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetNamespaceName(System.String)">
            <summary>
            Gets the namespace name from the specified full type name.
            </summary>
            <param name="fullTypeName">The full type name to examine.</param>
            <returns>The namespace name from the specified full type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetParentType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,System.String,System.Boolean)">
            <summary>
            Walks up a parent type level and gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name using context information.
            </summary>
            <param name="typeDeclarationNode">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="namespaceName">The namespace name.</param>
            <param name="fullTypeName">The full type name.</param>
            <param name="ignoreCase">Whether to ignore case.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name using context information.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetType(System.String,System.String)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name within the assembly.
            </summary>
            <param name="assemblyHint">The assembly that contains the type.</param>
            <param name="typeFullName">The full type name.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name within the assembly.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeFullNameFromShortcut(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String)">
            <summary>
            Gets the full type name from a possible language shortcut type name.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for examining language shortcut type names.</param>
            <param name="name">The type name to examine.</param>
            <returns>The full type name from a possible language shortcut type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeFullNameForDisplay(System.String)">
            <summary>
            Converts a full type name so that it will appear properly for display in the user interface.
            </summary>
            <param name="fullTypeName">The full type name to examine.</param>
            <returns>The modified full type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeInheritanceHierarchy(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String)">
            <summary>
            Returns the inheritance hierarchy for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="targetTypeName">The target type name, which can be optionally provided to prevent circular recursion, like when resolving "Foo" in this example: "class MyClass : Foo {}" since Foo requires a context hierarchy.</param>
            <returns>The inheritance hierarchy for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeName(System.String)">
            <summary>
            Gets the type name from the specified full type name.
            </summary>
            <param name="fullTypeName">The full type name to examine.</param>
            <returns>The type name from the specified full type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeNameForDebugging(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Gets the type name for debugging purposes.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>The type name for debugging purposes.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeNameWithArrayPointerSpec(System.String,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Gets the type name with any related array rank and pointer level data appended.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="genericTypeArgumentCount">The generic type argument count.</param>
            <param name="arrayRanks">The array rank dimensions.</param>
            <param name="pointerLevel">The pointer level.</param>
            <returns>The type name with any related array rank and pointer level data appended.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeNameWithoutArrayPointerSpec(System.String)">
            <summary>
            Gets the type name without any related array rank and pointer level data appended.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>The type name without any related array rank and pointer level data appended.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeReferenceRawFullName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Returns the raw full name of the specified type reference, doing a quick check to see if any namespace aliases should be resolved.
            </summary>
            <param name="domTypeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>The raw full name of the specified type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeShortcutName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,System.String)">
            <summary>
            Gets the full type name, or a language shortcut keyword specifying the type if possible.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> for which to return a shortcut keyword if possible.</param>
            <param name="name">The type name to examine.</param>
            <returns>The full type name, or a language shortcut keyword specifying the type if possible.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ResolveTypeParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.Int32,System.Int32)">
            <summary>
            Resolves a specific generic type parameter by walking up a type hierarchy chain and looking for a construction of the parameter.
            </summary>
            <param name="typeHierarchy">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> hierarchy to examine.</param>
            <param name="typeIndex">The index of the type within the hierarchy.</param>
            <param name="typeParameterIndex">The type parameter index to locate.</param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddAllAssembliesInAppDomainAsExternalReferences">
            <summary>
            Adds all assemblies in the current <see cref="T:System.AppDomain"/> as external references.
            </summary>
            <remarks>
            If an exception occurs during the loading of one of the assemblies, it will continue loading the remaining
            assemblies and then re-throw the first exception.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddExternalReference(System.Reflection.Assembly)">
            <summary>
            Adds an assembly as an external reference.
            </summary>
            <param name="assembly">The assembly to add.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddExternalReference(System.Reflection.Assembly,System.String)">
            <summary>
            Adds an assembly as an external reference, but with the specified assembly full name.
            </summary>
            <param name="assembly">The assembly to add.</param>
            <param name="assemblyFullName">The full name of the assembly to use for storing/accessing reflection data.</param>
            <remarks>
            You can use this overload if you do dynamic generation of assemblies in memory but want to
            use the same assembly full name for the generated assembly reflection data.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddExternalReference(System.String)">
            <summary>
            Adds an assembly as an external reference.
            </summary>
            <param name="assemblyName">The full name, or path, of the assembly to add.</param>
            <remarks>
            <c>true</c> if an assembly was added successfully; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddExternalReferenceForMSCorLib">
            <summary>
            Adds the <c>MSCorLib</c> assembly as an external reference.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.AddExternalReferenceForSystemAssembly(System.String)">
            <summary>
            Adds a system assembly as an external reference.
            </summary>
            <param name="assemblyName">The partial assembly name.</param>
            <remarks>
            <c>true</c> if an assembly was added successfully; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetChildNamespaceNames(System.String)">
            <summary>
            Gets the collection of child namespace names for the specified namespace name.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>The collection of child namespace names for the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetExtensionMethod(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets an available extension method that targets the specified type.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for which to search.</param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An available extension method that targets the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetExtensionMethods(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of available extension methods that target the specified type.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for which to search.</param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of available extension methods that target the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name, which includes inherited members.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMemberOverloads(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the member overloads in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name, which includes inherited members.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array including all the member overloads in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Gets all the members in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>, which includes inherited members.
            </summary>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array including all the members in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name, which includes inherited members.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="targetType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array including all the members in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetNativeType(System.String)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified native type full name.
            </summary>
            <param name="typeFullName">The full type name.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified native type.</returns>
            <remarks>
            This method will only search <c>mscorlib</c> for the type.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetNestedTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of nested types within the specified type.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="typeFullName">The full name of the type for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of nested types within the specified type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetQuickInfo(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)">
            <summary>
            Returns the quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>. 
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for quick info formatting.</param>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for which quick info markup will be returned.</param>
            <returns>The quick info for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetStandardModules(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of standard modules within the specified namespace name.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of standard modules within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name within the imported namespaces.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="importedNamespaces">The imported namespaces.</param>
            <param name="typeFullName">The full type name.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name within the imported namespaces.</returns>
            <remarks>
            The global namespace doesn't need to be passed in the imported namespace list since it will be automatically included.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name using context information.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to use.</param>
            <param name="fullTypeName">The full type name.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> for the specified type full name using context information.</returns>
            <remarks>
            The global namespace doesn't need to be passed in the imported namespace list since it will be automatically included.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeInheritanceHierarchy(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns the inheritance hierarchy for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <returns>The inheritance hierarchy for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypeInheritanceHierarchyAndImplementedInterfaces(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Returns an array containing the inheritance hierarchy of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> and its implemented interfaces.
            </summary>
            <param name="type">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to examine.</param>
            <returns>An array containing the inheritance hierarchy of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> and its implemented interfaces.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.GetTypes(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets the collection of types within the specified namespace name.
            </summary>
            <param name="contextType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides the context of the lookup.</param>
            <param name="namespaceName">The namespace name for which to search.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>The collection of types within the specified namespace name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.HasNamespace(System.String)">
            <summary>
            Returns whether the specified namespace name is defined.
            </summary>
            <param name="namespaceName">The namespace name for which to search.</param>
            <returns>
            <c>true</c> if the specified namespace name is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.PruneCache">
            <summary>
            Prunes the cache folder of data files that are no longer valid.
            </summary>
            <remarks>
            Call this method upon the shutdown of your application and after the project resolver has been disposed.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.RemoveExternalReference(System.String)">
            <summary>
            Removes an assembly as an external reference.
            </summary>
            <param name="assemblyName">The full name of the assembly to remove.</param>
            <remarks>
            <c>true</c> if an assembly was added successfully; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.HostAppDomainResolver">
            <summary>
            Gets the custom <see cref="T:System.ResolveEventHandler"/> to use when attempting to resolve assemblies loaded in the host <c>AppDomain</c> by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository"/>.
            </summary>
            <value>The custom <see cref="T:System.ResolveEventHandler"/> to use when attempting to resolve assemblies loaded in the host <c>AppDomain</c> by the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.CachePath">
            <summary>
            Gets or sets the path to use for reflection and documentation cache files.
            </summary>
            <value>The path to use for reflection and documentation cache files.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.CodeSnippetFolders">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection"/> containing the available code snippet folders.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.CodeSnippetFolderCollection"/> containing the available code snippet folders.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.ExternalReferences">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> that contains the external reference keys that are currently loaded.
            </summary>
            <value>The <see cref="T:System.Collections.ICollection"/> that contains the external reference keys that are currently loaded.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.SourceProjectContent">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.SourceProjectContent"/> that contains the source code project content.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver.SourceProjectContent"/> that contains the source code project content.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType">
            <summary>
            Represents a .NET type consisting of one or more partial types in source code.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.#ctor(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Initializes a new instance of the <c>SourceMergedPartialType</c> class.
            </summary>
            <param name="sourceKey1">The source key of the first type.</param>
            <param name="type1">The first type with which to initialize.</param>
            <param name="sourceKey2">The source key of the second type.</param>
            <param name="type2">The second type with which to initialize.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Add(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType)">
            <summary>
            Adds type data for the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="sourceKey">The source key of the type.</param>
            <param name="type">The type to add.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Contains(System.String)">
            <summary>
            Returns whether the merged partial type contains the specified source key.
            </summary>
            <param name="sourceKey">The source key for which to search.</param>
            <returns>
            <c>true</c> if the source key exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Remove(System.String)">
            <summary>
            Removes type data from the merged partial type.
            </summary>
            <param name="sourceKey">The source key of the type.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Count">
            <summary>
            Gets the number of type data records in the merged partial type.
            </summary>
            <value>The number of type data records in the merged partial type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.PartialTypes">
            <summary>
            Gets the collection of partial types.
            </summary>
            <value>The collection of partial types.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.PrimarySourceKey">
            <summary>
            Gets the primary source key.
            </summary>
            <value>The primary source key.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.PrimaryType">
            <summary>
            Gets the primary <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <value>The primary <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Item(System.String)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified source key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SourceMergedPartialType</c> class. 
            </para>
            </summary>
            <param name="sourceKey">The source key of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to return.</param>
            <value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> with the specified source key. 
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.AccessModifiers">
            <summary>
            Gets the access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> for the type.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Modifiers"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.SourceMergedPartialType.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference">
            <summary>
            Represents a .NET type reference that is defined in an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomTypeReference</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that contains the type reference.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[],System.Type)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomTypeReference</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that contains the type reference.</param>
            <param name="callingGenericTypes">The calling generic type array, used to prevent infinite recursion with generic constraints on a generic.</param>
            <param name="type">The <see cref="T:System.Type"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The clone that was created.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.SetGenericTypeParameterConstraints(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.GenericTypeParameterConstraints"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.GetFullName(System.Boolean)">
            <summary>
            Returns the full name of the type reference.
            </summary>
            <param name="includeArrayPointerInfo">Whether to include array and pointer info.</param>
            <returns>The full name of the type reference.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomTypeReference#GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.ArrayPointerInfo">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo"/> that contains array and pointer information.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomArrayPointerInfo"/> that contains array and pointer information.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.DeclaringTypeFullName">
            <summary>
            Gets or sets the declaring type full name.
            </summary>
            <value>The declaring type full name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomTypeReference.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember">
            <summary>
            Represents a generic .NET member that is defined in an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomGenericMember</c> class.
            </summary>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberFlags"/> for the member.</param>
            <param name="name">The name of the member.</param>
            <param name="modifiers">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> for the member.</param>
            <remarks>This overload should only be used when reading a cache file.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <c>AssemblyDomGenericMember</c> class.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that defines the member.</param>
            <param name="declaringType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that declared the member.</param>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to wrap with this object.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.SetGenericTypeArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[])">
            <summary>
            Sets the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.GenericTypeArguments"/> property.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.ResolveTypePlaceHolders(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent)">
            <summary>
            Resolve all references to types in the same assembly to the actual type.
            </summary>
            <param name="projectContent">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> to use for resolution.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDomGenericMember.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration">
            <summary>
            Represents a local variable declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.VariableContextID">
            <summary>
            Gets the context ID for a variable AST node.
            </summary>
            <value>The context ID for a variable AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.IsConst">
            <summary>
            Gets whether the member is a constant.
            </summary>
            <value>
            <c>true</c> if the member is a constant; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration.Variables">
            <summary>
            Gets the collection of variables that are declared.
            </summary>
            <value>The collection of variables that are declared.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration">
            <summary>
            Represents an interface property declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.GetAccessorContextID">
            <summary>
            Gets the context ID for a get accessor AST node.
            </summary>
            <value>The context ID for a get accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.SetAccessorContextID">
            <summary>
            Gets the context ID for a set accessor AST node.
            </summary>
            <value>The context ID for a set accessor AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>InterfacePropertyDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.GetAccessor">
            <summary>
            Gets or sets the getter <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor"/>.
            </summary>
            <value>The getter <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.IsIndexer">
            <summary>
            Gets whether this property is an indexer.
            </summary>
            <value>
            <c>true</c> if this property is an indexer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfacePropertyDeclaration.SetAccessor">
            <summary>
            Gets or sets the setter <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor"/>.
            </summary>
            <value>The setter <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration">
            <summary>
            Represents an interface event declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.EventTypeContextID">
            <summary>
            Gets the context ID for an event type AST node.
            </summary>
            <value>The context ID for an event type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>InterfaceEventDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>The event type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceEventDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
            <remarks>
            Used in Visual Basic only.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration">
            <summary>
            Represents an field declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.VariableContextID">
            <summary>
            Gets the context ID for a variable AST node.
            </summary>
            <value>The context ID for a variable AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Initializes a new instance of the <c>FieldDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.IsConst">
            <summary>
            Gets whether the member is a constant.
            </summary>
            <value>
            <c>true</c> if the member is a constant; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration.Variables">
            <summary>
            Gets the collection of variables that are declared.
            </summary>
            <value>The collection of variables that are declared.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression">
            <summary>
            Represents a unary expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Initializes a new instance of the <c>UnaryExpression</c> class. 
            </summary>
            <param name="operatorType">An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.OperatorType"/> indicating the unary operator type.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unary operator.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.OperatorType">
            <summary>
            Gets or sets an <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.OperatorType"/> indicating the unary operator type.
            </summary>
            <value>An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnaryExpression.OperatorType"/> indicating the unary operator type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression">
            <summary>
            Represents a typeof expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.TypeReferenceContextID">
            <summary>
            Gets the context ID for a type reference AST node.
            </summary>
            <value>The context ID for a type reference AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>TypeOfExpression</c> class. 
            </summary>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.TypeReference"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.TypeReference"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeOfExpression.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement">
            <summary>
            Represents an add/remove event handler statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.EventContextID">
            <summary>
            Gets the context ID for the event AST node.
            </summary>
            <value>The context ID for the event AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.EventHandlerContextID">
            <summary>
            Gets the context ID for the event handler AST node.
            </summary>
            <value>The context ID for the event handler AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ModifyEventHandlerStatement</c> class. 
            </summary>
            <param name="modificationType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType"/> indicating the modification type.</param>
            <param name="event">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event.</param>
            <param name="eventHandler">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event handler.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.Event">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.EventHandler">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event handler.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> that specifies the event handler.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.ModificationType">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType"/> indicating the modification type.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatementType"/> indicating the modification type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ModifyEventHandlerStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator">
            <summary>
            Represents a query expression take operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>TakeQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.Expression"/> for the take operator.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.Expression"/> for the take operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TakeQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator">
            <summary>
            Represents a query expression aggregate operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.CollectionRangeVariableDeclarationContextID">
            <summary>
            Gets the context ID for a collection range variable declaration AST node.
            </summary>
            <value>The context ID for a collection range variable declaration AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.QueryOperatorContextID">
            <summary>
            Gets the context ID for a query operator AST node.
            </summary>
            <value>The context ID for a query operator AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.TargetExpressionContextID">
            <summary>
            Gets the context ID for a target expression AST node.
            </summary>
            <value>The context ID for a target expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>AggregateQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.CollectionRangeVariableDeclarations">
            <summary>
            Gets the collection of collection range variable declarations.
            </summary>
            <value>The collection of collection range variable declarations.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.QueryOperators">
            <summary>
            Gets the collection of query operators.
            </summary>
            <value>The collection of query operators.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AggregateQueryOperator.TargetExpressions">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the into portion of the group query operator.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that specify the into portion of the group query operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage">
            <summary>
            Represents a <c>C#</c> language definition.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.#ctor">
            <summary>
            Initializes a new instance of the <c>CSharpSyntaxLanguage</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor is for designer use only and should never be called by your code.
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"></see> that represents the container for the component.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.AddKeywordMemberListItems(System.Collections.Hashtable)">
            <summary>
            Add <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> items that indicate the language keywords to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="memberListItemHashtable">A <see cref="T:System.Collections.Hashtable"/> of <see cref="T:ActiproSoftware.SyntaxEditor.IntelliPromptMemberListItem"/> objects, keyed by name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the end of a document.
            </summary>
            <param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that contains the token.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the end of a document.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents an invalid range of text.
            </summary>
            <param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</param>
            <param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState"/> that contains the token.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents an invalid range of text.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that represents the range of text with the specified lexical parse data.
            </summary>
            <param name="startOffset">The start offset of the token.</param>
            <param name="length">The length of the token.</param>
            <param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"/> for the token.</param>
            <param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"/> property.</param>
            <param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that contains lexical parse information about the token.</param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.GetContext(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to examine.</param>
            <param name="offset">The offset at which to base the context.</param>
            <param name="beforeOffset">Whether to return the context before the offset.</param>
            <param name="forParameterInfo">Whether to return the context for parameter info.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> for the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"/> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"/> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.GetTokenString(System.Int32)">
            <summary>
            Gets the token string representation for the specified token ID.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>The token string representation for the specified token ID.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            GFH added
            </summary>
            <param name="syntaxEditor"></param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.IntelliPromptCompleteWord(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Performs an auto-complete if the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> context with which the IntelliPrompt member list is initialized causes a single selection.
            Otherwise, displays a member list in the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt member list.</param>
            <returns>
            <c>true</c> if an auto-complete occurred or if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ResetLineCommentDelimiter">
            <summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"/> property to its default value.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShouldSerializeLineCommentDelimiter">
            <summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"/> property should be persisted.
            </summary>
            <returns>
            <c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorIntelliPromptMemberListItemDescriptionRequested(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs when a description tip is about to be displayed for the selected IntelliPrompt member list item,
            but the item has no description set.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoParameterIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs after the parameter index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorIntelliPromptParameterInfoSelectedIndexChanged(ActiproSoftware.SyntaxEditor.SyntaxEditor,System.EventArgs)">
            <summary>
            Occurs after the selected index of the IntelliPrompt parameter info is changed while the parameter info is visible.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorKeyTyped(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.KeyTypedEventArgs)">
            <summary>
            Occurs before a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.KeyTyped"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>KeyTypedEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorSmartIndent(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SmartIndentEventArgs)">
            <summary>
            Occurs when a <see cref="E:ActiproSoftware.SyntaxEditor.SyntaxEditor.SmartIndent"/> event is raised 
            for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that has a <see cref="T:ActiproSoftware.SyntaxEditor.Document"/> using this language.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">A <c>SmartIndentEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.OnSyntaxEditorViewMouseHover(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.EditorViewMouseEventArgs)">
            <summary>
            Occurs when the mouse is hovered over an <see cref="T:ActiproSoftware.SyntaxEditor.EditorView"/>.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will raise the event.</param>
            <param name="e">An <c>EditorViewMouseEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)">
            <summary>
            Semantically parses the text in the <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/>.
            </summary>
            <param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"/> that is managing the mergable language and the text to parse.</param>
            <returns>An object that contains the results of the semantic parsing operation.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.SetOutliningNodeCollapsedText(ActiproSoftware.SyntaxEditor.OutliningNode)">
            <summary>
            Sets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText"/> property for the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode"/>
            prior to the node being collapsed.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode"/> that is requesting collapsed text.</param>
            <remarks>
            The default implementation of this method does nothing.  In that case, the node will use default collapsed text.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShowAboutForm">
            <summary>
            Displays the <c>About</c> form for the component.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
             GFH Added
            </summary>
            <param name="syntaxEditor"></param>
            <returns></returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShowIntelliPromptMemberList(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays an IntelliPrompt member list in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt member list.</param>
            <returns>
            <c>true</c> if an IntelliPrompt member list is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShowIntelliPromptParameterInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor,ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays IntelliPrompt parameter info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt parameter info.</param>
            <returns>
            <c>true</c> if IntelliPrompt parameter info is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptParameterInfoSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.ShowIntelliPromptQuickInfo(ActiproSoftware.SyntaxEditor.SyntaxEditor)">
            <summary>
            Displays IntelliPrompt quick info in a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> based on the current context.
            </summary>
            <param name="syntaxEditor">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> that will display the IntelliPrompt quick info.</param>
            <returns>
            <c>true</c> if IntelliPrompt quick info is displayed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptQuickInfoSupported"/> property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.FormattingOptions">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions"/> that contains language formatting options.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions"/> that contains language formatting options.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.LanguageType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that this language represents.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.MergableLexicalParser">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"/> that can be used for lexical parsing of the language.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"/> that can be used for lexical parsing of the language.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.TextStatistics">
            <summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.TextStatistics"/> for the language that can be used to provide numerous statistics about text
            such as word, sentence, character counts as well as readability scores and possibly language-specific statistics.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.TextStatistics"/> for the language.</value>
            <remarks>
            To customize the statistics, override this method to return a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSyntaxLanguage.TextStatistics"/> object with customized code for the language.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken">
            <summary>
            Represents a <c>Visual Basic</c> <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.#ctor(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)">
            <summary>
            Initializes a new instance of the <c>VBToken</c> class.
            </summary>
            <param name="startOffset">The start offset of the token.</param>
            <param name="length">The length of the token.</param>
            <param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"/> for the token.</param>
            <param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"/> property.</param>
            <param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"/> that contains lexical parse information about the token.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.Clone(System.Int32,System.Int32)">
            <summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset"/> of the cloned object.</param>
            <param name="length">The length of the cloned object.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that was created.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsKeyword(System.Int32)">
            <summary>
            Returns whether the specified token ID is a keyword
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a keyword; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsModifier(System.Int32)">
            <summary>
            Returns whether the specified token ID is a modifier
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a modifier; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsNativeType(System.Int32)">
            <summary>
            Returns whether the specified token ID is a native type.
            </summary>
            <param name="tokenID">The ID of the token to examine.</param>
            <returns>
            <c>true</c> if the specified token ID is a native type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.ToString">
            <summary>
            Creates and returns a string representation of the current object.
            </summary>
            <returns>A string representation of the current object.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.AutoCaseCorrectText">
            <summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> when performing an auto case correction operation on it.
            </summary>
            <value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> when performing an auto case correction operation on it.</value>
            <remarks>
            Return a <see langword="null"/> value to indicate that there is no auto case correction text available.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsComment">
            <summary>
            Gets whether the token represents a comment.
            </summary>
            <value>
            <c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsDocumentEnd">
            <summary>
            Gets whether the token marks the end of the document.
            </summary>
            <value>
            <c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsInvalid">
            <summary>
            Gets whether the token marks an invalid range of text.
            </summary>
            <value>
            <c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsPairedEnd">
            <summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair; otherwise, <c>false</c>.
            </value>
            <remarks>
            A token pair is generally a pair of brackets.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsPairedStart">
            <summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> pair; otherwise, <c>false</c>.
            </value>
            <remarks>
            A token pair is generally a pair of brackets.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.IsWhitespace">
            <summary>
            Gets whether the token represents whitespace.
            </summary>
            <value>
            <c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.Key">
            <summary>
            Gets the key assigned to the token.
            </summary>
            <value>The key assigned to the token.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBToken.MatchingTokenID">
            <summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> if this token is paired.
            </summary>
            <value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> if this token is paired.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType">
            <summary>
            Specifies the type of a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.None">
            <summary>
            There is no valid context.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.AnyCode">
            <summary>
            Any code-based context is valid.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.AsType">
            <summary>
            The context is the type specification of a variable declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.BaseAccess">
            <summary>
            The context is a "base" object reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.BaseMemberAccess">
            <summary>
            The context is a "base" object member reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.DecimalIntegerLiteral">
            <summary>
            The context is a decimal integer literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.HexadecimalIntegerLiteral">
            <summary>
            The context is a hexadecimal integer literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.DocumentationCommentTag">
            <summary>
            The context is in a documentation comment tag.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.IsTypeOfType">
            <summary>
            The context is an is-type-of expression for a type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.NamespaceTypeOrMember">
            <summary>
            The context is a namespace, type or member reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.NativeType">
            <summary>
            The context is a native type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.NewObjectDeclaration">
            <summary>
            The context is a new object declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.StringLiteral">
            <summary>
            The context is a string literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.ThisAccess">
            <summary>
            The context is a "this" object reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.ThisMemberAccess">
            <summary>
            The context is a "this" object member reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.TryCastType">
            <summary>
            The context is a try-cast expression to a type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.TypeOfType">
            <summary>
            The context is a type-of expression for a type reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContextType.UsingDeclaration">
            <summary>
            The context is a "using" declaration.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration">
            <summary>
            Represents an interface declaration block.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>InterfaceDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection">
            <summary>
            Represents a switch statement section.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.LabelContextID">
            <summary>
            Gets the context ID for a label AST node.
            </summary>
            <value>The context ID for a label AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.Comments">
            <summary>
            Gets the collection of comments that appear in the node.
            </summary>
            <value>The collection of comments that appear in the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.Labels">
            <summary>
            Gets the collection of labels.
            </summary>
            <value>The collection of labels.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute">
            <summary>
            Represents an attribute.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.AttributeTypeContextID">
            <summary>
            Gets the context ID for an attribute type AST node.
            </summary>
            <value>The context ID for an attribute type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.ArgumentContextID">
            <summary>
            Gets the context ID for an argument AST node.
            </summary>
            <value>The context ID for an argument AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Initializes a new instance of the <c>Attribute</c> class. 
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the attribute.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.Arguments">
            <summary>
            Gets the collection of arguments.
            </summary>
            <value>The collection of arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.AttributeType">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the attribute.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> of the attribute.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute.Target">
            <summary>
            Gets or sets the target of the attribute section.
            </summary>
            <value>The target of the attribute section.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression">
            <summary>
            Represents a type reference expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.TypeReferenceContextID">
            <summary>
            Gets the context ID for a type reference AST node.
            </summary>
            <value>The context ID for a type reference AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Initializes a new instance of the <c>TypeReferenceExpression</c> class. 
            </summary>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.TypeReference"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.TypeReference"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReferenceExpression.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression">
            <summary>
            Represents a cast expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>CastExpression</c> class. 
            </summary>
            <param name="returnType">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> indicating the return type.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to cast.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CastExpression.ReturnType">
            <summary>
            Gets or sets the return <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.
            </summary>
            <value>The return <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType">
            <summary>
            Specifies the type of an interface accessor.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType.Get">
            <summary>
            A get accessor.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType.Set">
            <summary>
            A set accessor.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory">
            <summary>
            Specifies the category of an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.Other">
            <summary>
            Other type of AST node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.CompilationUnit">
            <summary>
            Compilation unit.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.NamespaceDeclaration">
            <summary>
            Namespace declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.TypeDeclaration">
            <summary>
            Type declaration (includes delegates).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.TypeMemberDeclaration">
            <summary>
            Type member declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.TypeMemberDeclarationSection">
            <summary>
            Type member declaration section (such as a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration"/> or <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration"/>).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.Statement">
            <summary>
            Statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory.Expression">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver">
            <summary>
            Helper class to resolve an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> AST node into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver.CreateContext(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext)">
            <summary>
            Create a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to use.
            </summary>
            <param name="callingContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that is calling the method.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that was created.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver.CreateContextItems(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Creates the items in a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> based on a recursive search through expressions.
            </summary>
            <param name="context">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> to update.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Resolves an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> AST node into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="callingContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that is calling the method.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> result.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver.ResolveAnonymousType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Resolves an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> AST node into an anonymous type.
            </summary>
            <param name="callingContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that is calling the method.</param>
            <param name="contextType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that provides contextual information and is already constructed.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> result.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ExpressionResolver.ResolveLambdaExpressionParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration)">
            <summary>
            Resolves a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration"/> within a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LambdaExpression"/> to an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="callingContext">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Context.DotNetContext"/> that is calling the method.</param>
            <param name="parameter">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration"/> to resolve.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> result.</returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement">
            <summary>
            Represents an unstructured error on error statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.LabelNameContextID">
            <summary>
            Gets the context ID for a label name AST node.
            </summary>
            <value>The context ID for a label name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UnstructuredErrorOnErrorStatement</c> class. 
            </summary>
            <param name="actionType">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType"/> indicating the action type.</param>
            <param name="labelName">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.ActionType">
            <summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType"/> indicating the action type.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatementType"/> indicating the action type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.LabelName">
            <summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorOnErrorStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator">
            <summary>
            Represents a query expression select operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator.VariableDeclaratorContextID">
            <summary>
            Gets the context ID for the variable declarator AST node.
            </summary>
            <value>The context ID for the variable declarator AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>SelectQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SelectQueryOperator.VariableDeclarators">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that declare the variables or return expressions for the select operator.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that declare the variables or return expressions for the select operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator">
            <summary>
            Represents a query expression distinct operator.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>DistinctQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DistinctQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression">
            <summary>
            Represents a dictionary access expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression.DictionaryKeyContextID">
            <summary>
            Gets the context ID for a dictionary key AST node.
            </summary>
            <value>The context ID for a dictionary key AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>DictionaryAccessExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to cast.</param>
            <param name="dictionaryKey">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the dictionary key.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression.DictionaryKey">
            <summary>
            Gets or sets the key for the dictionary lookup.
            </summary>
            <value>The key for the dictionary lookup.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DictionaryAccessExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions">
            <summary>
            Provides a store of formatting options for the the <c>C#</c> language.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions.IndentBlockContents">
            <summary>
            Gets or sets whether to indent block contents.
            </summary>
            <value>
            <c>true</c> if block contents should be indented; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions.IndentCaseContents">
            <summary>
            Gets or sets whether to indent case contents.
            </summary>
            <value>
            <c>true</c> if case contents should be indented; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions.IndentCaseLabels">
            <summary>
            Gets or sets whether to indent case labels.
            </summary>
            <value>
            <c>true</c> if case labels should be indented; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpFormattingOptions.IndentOpenAndCloseBraces">
            <summary>
            Gets or sets whether to indent open and close braces.
            </summary>
            <value>
            <c>true</c> if open and close braces should be indented; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID">
            <summary>
            Contains the token IDs for the <c>Visual Basic</c> language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Invalid">
            <summary>
            The Invalid token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DocumentEnd">
            <summary>
            The DocumentEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LanguageTransitionStart">
            <summary>
            The LanguageTransitionStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LanguageTransitionEnd">
            <summary>
            The LanguageTransitionEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Whitespace">
            <summary>
            The Whitespace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LineTerminator">
            <summary>
            The LineTerminator token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.SingleLineComment">
            <summary>
            The SingleLineComment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RemComment">
            <summary>
            The RemComment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DocumentationCommentDelimiter">
            <summary>
            The DocumentationCommentDelimiter token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DocumentationCommentText">
            <summary>
            The DocumentationCommentText token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DocumentationCommentTag">
            <summary>
            The DocumentationCommentTag token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DecimalIntegerLiteral">
            <summary>
            The DecimalIntegerLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.HexadecimalIntegerLiteral">
            <summary>
            The HexadecimalIntegerLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OctalIntegerLiteral">
            <summary>
            The OctalIntegerLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.FloatingPointLiteral">
            <summary>
            The FloatingPointLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CharacterLiteral">
            <summary>
            The CharacterLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.StringLiteral">
            <summary>
            The StringLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DateLiteral">
            <summary>
            The DateLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.XmlLiteral">
            <summary>
            The XmlLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.XmlAttribute">
            <summary>
            The XmlAttribute token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Identifier">
            <summary>
            The Identifier token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ContextualKeywordStart">
            <summary>
            The ContextualKeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Aggregate">
            <summary>
            The Aggregate token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Ascending">
            <summary>
            The Ascending token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.By">
            <summary>
            The By token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Descending">
            <summary>
            The Descending token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Distinct">
            <summary>
            The Distinct token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Equals">
            <summary>
            The Equals token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.From">
            <summary>
            The From token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Group">
            <summary>
            The Group token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Into">
            <summary>
            The Into token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Join">
            <summary>
            The Join token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Order">
            <summary>
            The Order token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Out">
            <summary>
            The Out token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Skip">
            <summary>
            The Skip token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Take">
            <summary>
            The Take token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Where">
            <summary>
            The Where token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ContextualKeywordEnd">
            <summary>
            The ContextualKeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.KeywordStart">
            <summary>
            The KeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.AddHandler">
            <summary>
            The AddHandler token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.AddressOf">
            <summary>
            The AddressOf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Alias">
            <summary>
            The Alias token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.And">
            <summary>
            The And token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.AndAlso">
            <summary>
            The AndAlso token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.As">
            <summary>
            The As token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Boolean">
            <summary>
            The Boolean token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ByRef">
            <summary>
            The ByRef token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Byte">
            <summary>
            The Byte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ByVal">
            <summary>
            The ByVal token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Call">
            <summary>
            The Call token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Case">
            <summary>
            The Case token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Catch">
            <summary>
            The Catch token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CBool">
            <summary>
            The CBool token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CByte">
            <summary>
            The CByte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CChar">
            <summary>
            The CChar token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CDate">
            <summary>
            The CDate token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CDbl">
            <summary>
            The CDbl token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CDec">
            <summary>
            The CDec token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Char">
            <summary>
            The Char token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CInt">
            <summary>
            The CInt token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Class">
            <summary>
            The Class token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CLng">
            <summary>
            The CLng token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CObj">
            <summary>
            The CObj token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Const">
            <summary>
            The Const token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Continue">
            <summary>
            The Continue token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CSByte">
            <summary>
            The CSByte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CShort">
            <summary>
            The CShort token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CSng">
            <summary>
            The CSng token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CStr">
            <summary>
            The CStr token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CType">
            <summary>
            The CType token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CUInt">
            <summary>
            The CUInt token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CULng">
            <summary>
            The CULng token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CUShort">
            <summary>
            The CUShort token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Custom">
            <summary>
            The Custom token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Date">
            <summary>
            The Date token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Decimal">
            <summary>
            The Decimal token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Declare">
            <summary>
            The Declare token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Default">
            <summary>
            The Default token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Delegate">
            <summary>
            The Delegate token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Dim">
            <summary>
            The Dim token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DirectCast">
            <summary>
            The DirectCast token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Do">
            <summary>
            The Do token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Double">
            <summary>
            The Double token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Each">
            <summary>
            The Each token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Else">
            <summary>
            The Else token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ElseIf">
            <summary>
            The ElseIf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.End">
            <summary>
            The End token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.EndIf">
            <summary>
            The EndIf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Enum">
            <summary>
            The Enum token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Erase">
            <summary>
            The Erase token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Error">
            <summary>
            The Error token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Event">
            <summary>
            The Event token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Exit">
            <summary>
            The Exit token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.False">
            <summary>
            The False token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Finally">
            <summary>
            The Finally token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.For">
            <summary>
            The For token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Friend">
            <summary>
            The Friend token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Function">
            <summary>
            The Function token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Get">
            <summary>
            The Get token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GetTypeKeyword">
            <summary>
            The GetTypeKeyword token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GetXmlNamespace">
            <summary>
            The GetXmlNamespace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Global">
            <summary>
            The Global token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GoSub">
            <summary>
            The GoSub token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GoTo">
            <summary>
            The GoTo token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Handles">
            <summary>
            The Handles token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.If">
            <summary>
            The If token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IIf">
            <summary>
            The IIf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Implements">
            <summary>
            The Implements token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Imports">
            <summary>
            The Imports token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.In">
            <summary>
            The In token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Inherits">
            <summary>
            The Inherits token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Integer">
            <summary>
            The Integer token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Interface">
            <summary>
            The Interface token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Is">
            <summary>
            The Is token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IsFalse">
            <summary>
            The IsFalse token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IsNot">
            <summary>
            The IsNot token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IsTrue">
            <summary>
            The IsTrue token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Let">
            <summary>
            The Let token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Lib">
            <summary>
            The Lib token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Like">
            <summary>
            The Like token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Long">
            <summary>
            The Long token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Loop">
            <summary>
            The Loop token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Me">
            <summary>
            The Me token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Mid">
            <summary>
            The Mid token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Mod">
            <summary>
            The Mod token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Module">
            <summary>
            The Module token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MustInherit">
            <summary>
            The MustInherit token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MustOverride">
            <summary>
            The MustOverride token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MyBase">
            <summary>
            The MyBase token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MyClass">
            <summary>
            The MyClass token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Namespace">
            <summary>
            The Namespace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Narrowing">
            <summary>
            The Narrowing token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.New">
            <summary>
            The New token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Next">
            <summary>
            The Next token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Not">
            <summary>
            The Not token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Nothing">
            <summary>
            The Nothing token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.NotInheritable">
            <summary>
            The NotInheritable token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.NotOverridable">
            <summary>
            The NotOverridable token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Object">
            <summary>
            The Object token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Of">
            <summary>
            The Of token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.On">
            <summary>
            The On token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Operator">
            <summary>
            The Operator token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Option">
            <summary>
            The Option token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Optional">
            <summary>
            The Optional token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Or">
            <summary>
            The Or token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OrElse">
            <summary>
            The OrElse token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Overloads">
            <summary>
            The Overloads token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Overridable">
            <summary>
            The Overridable token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Overrides">
            <summary>
            The Overrides token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ParamArray">
            <summary>
            The ParamArray token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Partial">
            <summary>
            The Partial token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Private">
            <summary>
            The Private token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Property">
            <summary>
            The Property token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Protected">
            <summary>
            The Protected token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Public">
            <summary>
            The Public token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RaiseEvent">
            <summary>
            The RaiseEvent token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ReadOnly">
            <summary>
            The ReadOnly token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ReDim">
            <summary>
            The ReDim token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.REM">
            <summary>
            The REM token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RemoveHandler">
            <summary>
            The RemoveHandler token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Resume">
            <summary>
            The Resume token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Return">
            <summary>
            The Return token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.SByte">
            <summary>
            The SByte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Select">
            <summary>
            The Select token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Set">
            <summary>
            The Set token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Shadows">
            <summary>
            The Shadows token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Shared">
            <summary>
            The Shared token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Short">
            <summary>
            The Short token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Single">
            <summary>
            The Single token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Static">
            <summary>
            The Static token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Step">
            <summary>
            The Step token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Stop">
            <summary>
            The Stop token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.String">
            <summary>
            The String token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Structure">
            <summary>
            The Structure token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Sub">
            <summary>
            The Sub token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.SyncLock">
            <summary>
            The SyncLock token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Then">
            <summary>
            The Then token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Throw">
            <summary>
            The Throw token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.To">
            <summary>
            The To token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.True">
            <summary>
            The True token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Try">
            <summary>
            The Try token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.TryCast">
            <summary>
            The TryCast token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.TypeOf">
            <summary>
            The TypeOf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.UInteger">
            <summary>
            The UInteger token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ULong">
            <summary>
            The ULong token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Until">
            <summary>
            The Until token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.UShort">
            <summary>
            The UShort token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Using">
            <summary>
            The Using token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Variant">
            <summary>
            The Variant token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Wend">
            <summary>
            The Wend token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.When">
            <summary>
            The When token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.While">
            <summary>
            The While token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Widening">
            <summary>
            The Widening token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.With">
            <summary>
            The With token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.WithEvents">
            <summary>
            The WithEvents token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.WriteOnly">
            <summary>
            The WriteOnly token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Xor">
            <summary>
            The Xor token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.KeywordEnd">
            <summary>
            The KeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OperatorOrPunctuatorStart">
            <summary>
            The OperatorOrPunctuatorStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LineContinuation">
            <summary>
            The LineContinuation token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OpenParenthesis">
            <summary>
            The OpenParenthesis token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CloseParenthesis">
            <summary>
            The CloseParenthesis token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OpenCurlyBrace">
            <summary>
            The OpenCurlyBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CloseCurlyBrace">
            <summary>
            The CloseCurlyBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OpenSquareBrace">
            <summary>
            The OpenSquareBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.CloseSquareBrace">
            <summary>
            The CloseSquareBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Comma">
            <summary>
            The Comma token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Dot">
            <summary>
            The Dot token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Colon">
            <summary>
            The Colon token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ColonEquals">
            <summary>
            The ColonEquals token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ExclamationPoint">
            <summary>
            The ExclamationPoint token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.QuestionMark">
            <summary>
            The QuestionMark token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.DotAt">
            <summary>
            The DotAt token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.TripleDot">
            <summary>
            The TripleDot token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.StringConcatenation">
            <summary>
            The StringConcatenation token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Multiplication">
            <summary>
            The Multiplication token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Addition">
            <summary>
            The Addition token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Subtraction">
            <summary>
            The Subtraction token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.FloatingPointDivision">
            <summary>
            The FloatingPointDivision token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IntegerDivision">
            <summary>
            The IntegerDivision token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Exponentiation">
            <summary>
            The Exponentiation token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LessThan">
            <summary>
            The LessThan token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Equality">
            <summary>
            The Equality token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GreaterThan">
            <summary>
            The GreaterThan token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LessThanOrEqual">
            <summary>
            The LessThanOrEqual token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GreaterThanOrEqual">
            <summary>
            The GreaterThanOrEqual token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.Inequality">
            <summary>
            The Inequality token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LeftShift">
            <summary>
            The LeftShift token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RightShift">
            <summary>
            The RightShift token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.StringConcatenationAssignment">
            <summary>
            The StringConcatenationAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MultiplicationAssignment">
            <summary>
            The MultiplicationAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.AdditionAssignment">
            <summary>
            The AdditionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.SubtractionAssignment">
            <summary>
            The SubtractionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.FloatingPointDivisionAssignment">
            <summary>
            The FloatingPointDivisionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IntegerDivisionAssignment">
            <summary>
            The IntegerDivisionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ExponentiationAssignment">
            <summary>
            The ExponentiationAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.LeftShiftAssignment">
            <summary>
            The LeftShiftAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RightShiftAssignment">
            <summary>
            The RightShiftAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.OperatorOrPunctuatorEnd">
            <summary>
            The OperatorOrPunctuatorEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.PreProcessorDirectiveKeywordStart">
            <summary>
            The PreProcessorDirectiveKeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ConstPreProcessorDirective">
            <summary>
            The ConstPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.IfPreProcessorDirective">
            <summary>
            The IfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ElseIfPreProcessorDirective">
            <summary>
            The ElseIfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ElsePreProcessorDirective">
            <summary>
            The ElsePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.EndIfPreProcessorDirective">
            <summary>
            The EndIfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ExternalSourcePreProcessorDirective">
            <summary>
            The ExternalSourcePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.EndExternalSourcePreProcessorDirective">
            <summary>
            The EndExternalSourcePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.RegionPreProcessorDirective">
            <summary>
            The RegionPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.EndRegionPreProcessorDirective">
            <summary>
            The EndRegionPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.ExternalChecksumPreProcessorDirective">
            <summary>
            The ExternalChecksumPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.PreProcessorDirectiveKeywordEnd">
            <summary>
            The PreProcessorDirectiveKeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.PreProcessorDirectiveText">
            <summary>
            The PreProcessorDirectiveText token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.MaxTokenID">
            <summary>
            The MaxTokenID token ID.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBTokenID.GetTokenKey(System.Int32)">
            <summary>
            Returns the string-based key for the specified token ID.
            </summary>
            <param name="id">The token ID to examine.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID">
            <summary>
            Contains the lexical state IDs for the <c>Visual Basic</c> language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID.Default">
            <summary>
            The Default lexical state ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID.DocumentationComment">
            <summary>
            The DocumentationComment lexical state ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID.PreProcessorDirective">
            <summary>
            The PreProcessorDirective lexical state ID.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBLexicalStateID.GetLexicalStateKey(System.Int32)">
            <summary>
            Returns the string-based key for the specified lexical state ID.
            </summary>
            <param name="id">The lexical state ID to examine.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser">
            <summary>
            Provides a semantic parser for the <c>Visual Basic</c> language.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.#ctor(ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser)">
            <summary>
            Initializes a new instance of the <c>VBSemanticParser</c> class.
            </summary>
            <param name="lexicalParser">The <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser"/> to use for lexical parsing.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvancePastTerminators">
            <summary>
            Advances past any line terminators.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvanceToNext">
            <summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that was read.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvanceToNextEnd(System.Int32)">
            <summary>
            Advances past the next matching end.
            </summary>
            <param name="tokenID">The ID of the desired end token.</param>
            <returns>
            <c>true</c> if a match was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvanceToNextEnd(System.Int32,System.Boolean)">
            <summary>
            Advances past the next matching end.
            </summary>
            <param name="tokenID">The ID of the desired end token.</param>
            <param name="quitOnNonStatementEnd">Whether to quit on a non-statement end.</param>
            <returns>
            <c>true</c> if a match was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvanceToNextStatementTerminator">
            <summary>
            Advances past the next statement terminator.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AdvanceToNextStatementTerminator(System.Boolean)">
            <summary>
            Advances past the next statement terminator.
            </summary>
            <param name="movePast">Whether to move past the statement terminator.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AreNextTwo(System.Int32,System.Int32[])">
            <summary>
            Returns whether the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match the specified IDs.
            </summary>
            <returns>
            <c>true</c> if the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match the specified IDs; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.AreNextTwoIdentifierAnd(System.Int32)">
            <summary>
            Returns whether the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match an identifier and the specified ID.
            </summary>
            <returns>
            <c>true</c> if the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match an identifier and the specified ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.BlockAddChild(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Adds a child node to the current block.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to add to the current block.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.BlockStart(System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Starts a block and pushes it on the block stack.
            </summary>
            <param name="tokenID">The ID of the token for the block.</param>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is starting a block.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.BlockEnd">
            <summary>
            Ends the current block and pops it from the block stack.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.GetImplicitType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,System.Boolean)">
            <summary>
            Returns an inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> initializer.
            </summary>
            <param name="initializer">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <param name="allowNull">Whether to allow a null initializer.</param>
            <returns>An inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> initializer.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.GetReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Returns an inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <returns>An inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsArrayCreationExpression">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an array creation expression (after the type name).
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an array creation expression (after the type name); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsArrayTypeModifier">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an array type modifier.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an array type modifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsBlockTerminator">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a statement block terminator.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a statement block terminator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsConditionalExpression">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a conditional expression.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a conditional expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsContextualKeyword(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a contextual keyword.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a Contextual keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsDotIdentifierOrKeyword(System.Boolean)">
            <summary>
            Returns whether the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects are a dot followed by an identifier or keyword.
            </summary>
            <param name="allowXml">Whether to allow XML literals and attributes as well.</param>
            <returns>
            <c>true</c> if the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects are a dot followed by an identifier or keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsEnd(System.Int32)">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a specified end.
            </summary>
            <param name="tokenID">The ID of the desired end token.</param>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a specified end; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsEndOfNonStatement">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an end of a non-statement.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an end of a non-statement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsEndStatement">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an end statement.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an end statement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsIdentifier(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an identifier (or contextual keyword).
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an identifier (or contextual keyword); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsKeyword">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsKeyword(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsLookAheadTokenSequential">
            <summary>
            Returns whether the look-ahead <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> comes immediately after the previous token.
            </summary>
            <returns>
            <c>true</c> if the look-ahead <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> comes immediately after the previous token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.IsVariableDeclarator">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declarator.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declarator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MarkGenericParameters(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,System.Boolean)">
            <summary>
            Flags any generic parameters that are located.
            </summary>
            <param name="typeParameterList">The list of type parameters that are defined.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> to examine.</param>
            <param name="allowTopLevelMark">Whether to allow the type reference to be marked.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.ParseArgumentList">
            <summary>
            Parses the code and returns the list of arguments that were parsed.
            </summary>
            <returns>
            An <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> containing the list of arguments that were parsed.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.ReapComments(ActiproSoftware.SyntaxEditor.IAstNodeList,System.Boolean)">
            <summary>
            Reaps the comments that have been collected since the last reaping and adds them to an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/>.
            </summary>
            <param name="nodes">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> that should receive any reaped comment nodes.</param>
            <param name="sort">Whether to sort the sibling nodes.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.ReapDocumentationComments">
            <summary>
            Reaps the documentation comments that have been collected since the last reaping.
            </summary>
            <returns>The documentation comments that have been collection since the last reaping.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.ReportSyntaxError(ActiproSoftware.SyntaxEditor.TextRange,System.String)">
            <summary>
            Reports a syntax error.
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.Parse">
            <summary>
            Parses the document and generates a document object model.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchSimpleIdentifier">
            <summary>
            Matches a <c>SimpleIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SimpleIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNonQueryIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>NonQueryIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NonQueryIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>Identifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Identifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchIdentifierOrKeyword(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>IdentifierOrKeyword</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>IdentifierOrKeyword</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            The non-terminal can start with: this.IsKeyword().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchModifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers@)">
            <summary>
            Matches a <c>Modifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Modifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Public</c>, <c>Protected</c>, <c>Friend</c>, <c>Private</c>, <c>Default</c>, <c>Dim</c>, <c>MustInherit</c>, <c>MustOverride</c>, <c>Narrowing</c>, <c>NotInheritable</c>, <c>NotOverridable</c>, <c>Overloads</c>, <c>Overridable</c>, <c>Overrides</c>, <c>Partial</c>, <c>ReadOnly</c>, <c>Shadows</c>, <c>Shared</c>, <c>Static</c>, <c>Widening</c>, <c>WithEvents</c>, <c>WriteOnly</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchModifiers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers@)">
            <summary>
            Matches a <c>Modifiers</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Modifiers</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Public</c>, <c>Protected</c>, <c>Friend</c>, <c>Private</c>, <c>Default</c>, <c>Dim</c>, <c>MustInherit</c>, <c>MustOverride</c>, <c>Narrowing</c>, <c>NotInheritable</c>, <c>NotOverridable</c>, <c>Overloads</c>, <c>Overridable</c>, <c>Overrides</c>, <c>Partial</c>, <c>ReadOnly</c>, <c>Shadows</c>, <c>Shared</c>, <c>Static</c>, <c>Widening</c>, <c>WithEvents</c>, <c>WriteOnly</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchQualifiedIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>QualifiedIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QualifiedIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeParameterList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>TypeParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: this.AreNextTwo(VBTokenID.OpenParenthesis, VBTokenID.Of).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>TypeParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>In</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchConstraint(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>Constraint</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Constraint</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>New</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttributes(ActiproSoftware.SyntaxEditor.IAstNodeList)">
            <summary>
            Matches a <c>Attributes</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Attributes</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttributeList(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Matches a <c>AttributeList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttribute(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Matches a <c>Attribute</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Attribute</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttributeArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Matches a <c>AttributeArguments</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeArguments</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttributeArgument(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Matches a <c>AttributeArgument</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeArgument</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCompilationUnit">
            <summary>
            Matches a <c>CompilationUnit</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CompilationUnit</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Public</c>, <c>Protected</c>, <c>Friend</c>, <c>Private</c>, <c>Default</c>, <c>Dim</c>, <c>MustInherit</c>, <c>MustOverride</c>, <c>Narrowing</c>, <c>NotInheritable</c>, <c>NotOverridable</c>, <c>Overloads</c>, <c>Overridable</c>, <c>Overrides</c>, <c>Partial</c>, <c>ReadOnly</c>, <c>Shadows</c>, <c>Shared</c>, <c>Static</c>, <c>Widening</c>, <c>WithEvents</c>, <c>WriteOnly</c>, <c>LessThan</c>, <c>LineTerminator</c>, <c>Colon</c>, <c>Option</c>, <c>Imports</c>, <c>Namespace</c>, <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Module</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchStatementTerminator">
            <summary>
            Matches a <c>StatementTerminator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StatementTerminator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LineTerminator</c>, <c>Colon</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAttributesStatement">
            <summary>
            Matches a <c>AttributesStatement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributesStatement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>, <c>LineTerminator</c>, <c>Colon</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchOptionsStatement">
            <summary>
            Matches a <c>OptionsStatement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>OptionsStatement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Option</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImportsStatement">
            <summary>
            Matches a <c>ImportsStatement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImportsStatement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Imports</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImportsClause">
            <summary>
            Matches a <c>ImportsClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImportsClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>XmlLiteral</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImportsAliasClause">
            <summary>
            Matches a <c>ImportsAliasClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImportsAliasClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImportsNamespaceClause">
            <summary>
            Matches a <c>ImportsNamespaceClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImportsNamespaceClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNamespaceDeclaration">
            <summary>
            Matches a <c>NamespaceDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NamespaceDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Namespace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNamespaceMemberDeclaration">
            <summary>
            Matches a <c>NamespaceMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NamespaceMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Public</c>, <c>Protected</c>, <c>Friend</c>, <c>Private</c>, <c>Default</c>, <c>Dim</c>, <c>MustInherit</c>, <c>MustOverride</c>, <c>Narrowing</c>, <c>NotInheritable</c>, <c>NotOverridable</c>, <c>Overloads</c>, <c>Overridable</c>, <c>Overrides</c>, <c>Partial</c>, <c>ReadOnly</c>, <c>Shadows</c>, <c>Shared</c>, <c>Static</c>, <c>Widening</c>, <c>WithEvents</c>, <c>WriteOnly</c>, <c>LessThan</c>, <c>LineTerminator</c>, <c>Colon</c>, <c>Namespace</c>, <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Module</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>TypeDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Module</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNonModuleDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>NonModuleDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NonModuleDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@,System.Boolean)">
            <summary>
            Matches a <c>TypeName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNonArrayTypeName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@,System.Boolean)">
            <summary>
            Matches a <c>NonArrayTypeName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NonArrayTypeName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchBuiltInTypeName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>BuiltInTypeName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>BuiltInTypeName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeImplementsClause(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>TypeImplementsClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeImplementsClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Implements</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImplements(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>Implements</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Implements</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchIntegralTypeName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>IntegralTypeName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>IntegralTypeName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchEnumDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>EnumDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EnumDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Enum</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchEnumMemberDeclaration">
            <summary>
            Matches a <c>EnumMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EnumMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>LessThan</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchClassDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>ClassDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ClassDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Class</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchStructureDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>StructureDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StructureDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Structure</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchStructureMemberDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration,System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>StructureMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StructureMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Const</c>, <c>Event</c>, <c>Custom</c>, <c>Sub</c>, <c>Function</c>, <c>Declare</c>, <c>Property</c>, <c>Operator</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchModuleDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>ModuleDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ModuleDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Module</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchInterfaceDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>InterfaceDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Interface</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchInterfaceMemberDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration,System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>InterfaceMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Enum</c>, <c>Class</c>, <c>Structure</c>, <c>Event</c>, <c>Sub</c>, <c>Function</c>, <c>Property</c>, <c>Interface</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchArrayTypeModifier(System.Int32[]@)">
            <summary>
            Matches a <c>ArrayTypeModifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ArrayTypeModifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchDelegateDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>DelegateDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>DelegateDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchTypeArgumentList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>TypeArgumentList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeArgumentList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchImplementsClause(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ImplementsClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImplementsClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Implements</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchInterfaceMemberSpecifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberSpecifier@)">
            <summary>
            Matches a <c>InterfaceMemberSpecifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceMemberSpecifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchSubSignature(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@,ActiproSoftware.SyntaxEditor.AstNodeList@,ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>SubSignature</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SubSignature</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchFunctionSignature(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@,ActiproSoftware.SyntaxEditor.AstNodeList@,ActiproSoftware.SyntaxEditor.AstNodeList@,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>FunctionSignature</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FunctionSignature</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCharsetModifier">
            <summary>
            Matches a <c>CharsetModifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CharsetModifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchLibraryClause">
            <summary>
            Matches a <c>LibraryClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LibraryClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Lib</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAliasClause">
            <summary>
            Matches a <c>AliasClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AliasClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Alias</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchParameterList(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>LessThan</c>, <c>ByVal</c>, <c>ByRef</c>, <c>Optional</c>, <c>ParamArray</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchParameter(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>Parameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Parameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>LessThan</c>, <c>ByVal</c>, <c>ByRef</c>, <c>Optional</c>, <c>ParamArray</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchEventHandlesList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>EventHandlesList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EventHandlesList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>MyBase</c>, <c>Me</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchEventMemberSpecifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier@)">
            <summary>
            Matches a <c>EventMemberSpecifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EventMemberSpecifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>MyBase</c>, <c>Me</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchParametersOrType(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.AstNodeList@,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>ParametersOrType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ParametersOrType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>, <c>As</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchConstantDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration)">
            <summary>
            Matches a <c>ConstantDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConstantDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchVariableDeclarator(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IVariableDeclarationSection)">
            <summary>
            Matches a <c>VariableDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariableDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchVariableIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@,System.Int32[]@)">
            <summary>
            Matches a <c>VariableIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariableIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchArraySizeInitializationModifier(System.Int32[]@)">
            <summary>
            Matches a <c>ArraySizeInitializationModifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ArraySizeInitializationModifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchOperand(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>Operand</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Operand</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>ByVal</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchStatement(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>Statement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Statement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Dim</c>, <c>Static</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Const</c>, <c>AddHandler</c>, <c>RemoveHandler</c>, <c>RaiseEvent</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>With</c>, <c>SyncLock</c>, <c>Mid</c>, <c>Call</c>, <c>If</c>, <c>Select</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>Throw</c>, <c>Try</c>, <c>Error</c>, <c>On</c>, <c>GoTo</c>, <c>Resume</c>, <c>Exit</c>, <c>Continue</c>, <c>Stop</c>, <c>Return</c>, <c>ReDim</c>, <c>Erase</c>, <c>Using</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsEndStatement().
            The non-terminal can start with: (this.AreNextTwoIdentifierAnd(VBTokenID.Colon)) || (this.AreNextTwo(VBTokenID.DecimalIntegerLiteral, VBTokenID.Colon)).
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchBlock(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>Block</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Block</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Dim</c>, <c>Static</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Const</c>, <c>AddHandler</c>, <c>RemoveHandler</c>, <c>RaiseEvent</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>With</c>, <c>SyncLock</c>, <c>Mid</c>, <c>Call</c>, <c>If</c>, <c>Select</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>Throw</c>, <c>Try</c>, <c>Error</c>, <c>On</c>, <c>GoTo</c>, <c>Resume</c>, <c>Exit</c>, <c>Continue</c>, <c>Stop</c>, <c>Return</c>, <c>ReDim</c>, <c>Erase</c>, <c>Using</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsEndStatement().
            The non-terminal can start with: (this.AreNextTwoIdentifierAnd(VBTokenID.Colon)) || (this.AreNextTwo(VBTokenID.DecimalIntegerLiteral, VBTokenID.Colon)).
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchLabelName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>LabelName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LabelName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: (this.AreNextTwoIdentifierAnd(VBTokenID.Colon)) || (this.AreNextTwo(VBTokenID.DecimalIntegerLiteral, VBTokenID.Colon)).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchStatements(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>Statements</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Statements</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Dim</c>, <c>Static</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Const</c>, <c>AddHandler</c>, <c>RemoveHandler</c>, <c>RaiseEvent</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>With</c>, <c>SyncLock</c>, <c>Mid</c>, <c>Call</c>, <c>If</c>, <c>Select</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>Throw</c>, <c>Try</c>, <c>Error</c>, <c>On</c>, <c>GoTo</c>, <c>Resume</c>, <c>Exit</c>, <c>Continue</c>, <c>Stop</c>, <c>Return</c>, <c>ReDim</c>, <c>Erase</c>, <c>Using</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsEndStatement().
            The non-terminal can start with: (this.AreNextTwoIdentifierAnd(VBTokenID.Colon)) || (this.AreNextTwo(VBTokenID.DecimalIntegerLiteral, VBTokenID.Colon)).
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCaseClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection)">
            <summary>
            Matches a <c>CaseClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CaseClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>LessThan</c>, <c>GreaterThan</c>, <c>XmlLiteral</c>, <c>Equality</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Inequality</c>, <c>GreaterThanOrEqual</c>, <c>LessThanOrEqual</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>Is</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchRedimClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimClause@)">
            <summary>
            Matches a <c>RedimClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>RedimClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>Expression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Expression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchPrimaryExpression(System.Boolean,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>PrimaryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>PrimaryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchInvocationExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>InvocationExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InvocationExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchArgumentList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ArgumentList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ArgumentList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsKeyword().
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNewExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>NewExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NewExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>, <c>New</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchObjectCreationExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ObjectCreationExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ObjectCreationExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>New</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchObjectMemberInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ObjectMemberInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ObjectMemberInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>With</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchFieldInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>FieldInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FieldInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Dot</c>.
            The non-terminal can start with: this.IsKeyword().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchObjectCollectionInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ObjectCollectionInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ObjectCollectionInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>From</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCollectionInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>CollectionInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CollectionInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCastTarget(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>CastTarget</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CastTarget</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchUnaryExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>UnaryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>UnaryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAdditiveExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>AdditiveExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AdditiveExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchMultiplicativeExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>MultiplicativeExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>MultiplicativeExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchIntegerDivisionOperatorExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>IntegerDivisionOperatorExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>IntegerDivisionOperatorExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchModuloOperatorExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ModuloOperatorExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ModuloOperatorExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchXmlDescendantExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>XmlDescendantExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>XmlDescendantExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchExponentOperatorExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ExponentOperatorExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExponentOperatorExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchConcatenationOperatorExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ConcatenationOperatorExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConcatenationOperatorExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchComparisonExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ComparisonExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ComparisonExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchNegationExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>NegationExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NegationExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchConjunctionExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ConjunctionExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConjunctionExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchInclusiveDisjunctionExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>InclusiveDisjunctionExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InclusiveDisjunctionExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchExclusiveDisjunctionExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ExclusiveDisjunctionExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExclusiveDisjunctionExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchShiftOperatorExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ShiftOperatorExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ShiftOperatorExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchLambdaExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>LambdaExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LambdaExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Sub</c>, <c>Function</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchQueryExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>QueryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QueryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>QueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Aggregate</c>, <c>Distinct</c>, <c>From</c>, <c>Group</c>, <c>Join</c>, <c>Order</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Select</c>, <c>Let</c>.
            The non-terminal can start with: this.AreNextTwo(VBTokenID.Group, VBTokenID.Join).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchCollectionRangeVariableDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration@)">
            <summary>
            Matches a <c>CollectionRangeVariableDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CollectionRangeVariableDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchExpressionRangeVariableDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator@)">
            <summary>
            Matches a <c>ExpressionRangeVariableDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExpressionRangeVariableDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchFromQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>FromQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FromQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>From</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchJoinQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>JoinQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>JoinQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Join</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchJoinCondition(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition@)">
            <summary>
            Matches a <c>JoinCondition</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>JoinCondition</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchLetQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>LetQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LetQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Let</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchSelectQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>SelectQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SelectQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Select</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchDistinctQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>DistinctQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>DistinctQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Distinct</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchWhereQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>WhereQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>WhereQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchPartitionQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>PartitionQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>PartitionQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Skip</c>, <c>Take</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchOrderByQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>OrderByQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>OrderByQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Order</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchOrderExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering@)">
            <summary>
            Matches a <c>OrderExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>OrderExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Aggregate</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Distinct</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Order</c>, <c>Out</c>, <c>Skip</c>, <c>Take</c>, <c>Where</c>, <c>Global</c>, <c>OpenParenthesis</c>, <c>OpenCurlyBrace</c>, <c>New</c>, <c>XmlLiteral</c>, <c>Object</c>, <c>Single</c>, <c>Double</c>, <c>Decimal</c>, <c>Boolean</c>, <c>Date</c>, <c>Char</c>, <c>String</c>, <c>Byte</c>, <c>SByte</c>, <c>UShort</c>, <c>Short</c>, <c>UInteger</c>, <c>Integer</c>, <c>ULong</c>, <c>Long</c>, <c>Sub</c>, <c>Function</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Not</c>, <c>CType</c>, <c>StringLiteral</c>, <c>MyBase</c>, <c>Me</c>, <c>DecimalIntegerLiteral</c>, <c>Mid</c>, <c>True</c>, <c>False</c>, <c>HexadecimalIntegerLiteral</c>, <c>OctalIntegerLiteral</c>, <c>FloatingPointLiteral</c>, <c>CharacterLiteral</c>, <c>DateLiteral</c>, <c>Nothing</c>, <c>AddressOf</c>, <c>GetTypeKeyword</c>, <c>TypeOf</c>, <c>GetXmlNamespace</c>, <c>MyClass</c>, <c>DirectCast</c>, <c>TryCast</c>, <c>IIf</c>, <c>CBool</c>, <c>CByte</c>, <c>CChar</c>, <c>CDate</c>, <c>CDec</c>, <c>CDbl</c>, <c>CInt</c>, <c>CLng</c>, <c>CObj</c>, <c>CSByte</c>, <c>CShort</c>, <c>CSng</c>, <c>CStr</c>, <c>CUInt</c>, <c>CULng</c>, <c>CUShort</c>.
            The non-terminal can start with: this.IsDotIdentifierOrKeyword(true) || this.IsConditionalExpression().
            The non-terminal can start with: (this.TokenIs(this.LookAheadToken, new int[] { VBTokenID.Aggregate, VBTokenID.From })) &amp;&amp; (!this.TokenIs(this.GetLookAheadToken(2), new int[] { VBTokenID.Comma, VBTokenID.CloseParenthesis })).
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchGroupByQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>GroupByQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>GroupByQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Group</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchAggregateQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>AggregateQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AggregateQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Aggregate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MatchGroupJoinQueryOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>GroupJoinQueryOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>GroupJoinQueryOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: this.AreNextTwo(VBTokenID.Group, VBTokenID.Join).
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.CompilationUnit">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.CompilationUnit"/> that was parsed.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.CompilationUnit"/> that was parsed.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.MultiMatchSets">
            <summary>
            Gets the multi-match sets array.
            </summary>
            <value>The multi-match sets array.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.BlockData">
            <summary>
            Stores information about a block node.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.VB.VBSemanticParser.BlockData.#ctor(System.Int32,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Initializes a new instance of the <c>BlockData</c> class.
            </summary>
            <param name="tokenID">The ID of the token for the block.</param>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is starting a block.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider">
            <summary>
            Represents a .NET documentation provider.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DomDocumentationProvider</c> class.
            </summary>
            <param name="documentation">The XML documentation.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.AppendParameter(System.Text.StringBuilder,System.Collections.ICollection,System.Collections.ICollection,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Appends a parameter to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="key">The <see cref="T:System.Text.StringBuilder"/> to modify.</param>
            <param name="declaringTypeGenericTypeArguments">The collection of declaring type generic type arguments.</param>
            <param name="memberGenericTypeArguments">The collection of member generic type arguments.</param>
            <param name="parameterType">The parameter type.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.GetMemberDocumentationKey(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember)">
            <summary>
            Gets the documentation key for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/>.
            </summary>
            <param name="member">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> to examine.</param>
            <returns>The documentation key for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.GetTypeReferenceDocumentationKey(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Gets the documentation key for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to examine.</param>
            <returns>The documentation key for an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.EscapeTypeName(System.String)">
            <summary>
            Escapes the type name for display in a documentation comment.
            </summary>
            <param name="typeName">The type name to escape.</param>
            <returns>The escaped type name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.EscapeXmlComment(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,System.String)">
            <summary>
            Escapes the specified XML comment text.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving any type names.</param>
            <param name="text">The text to escape.</param>
            <returns>The escaped XML comment text.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.GetParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver,System.String)">
            <summary>
            Returns the escaped value of the <c>param</c> tag for the specified parameter in the documentation.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> currently in use, if known.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The escaped value of the <c>param</c> tag for the specified parameter in the documentation.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.GetSummary(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Returns the escaped value of the <c>summary</c> tag in the documentation.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> currently in use, if known.</param>
            <value>The escaped value of the <c>summary</c> tag in the documentation.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.Documentation">
            <summary>
            Gets the raw XML documentation.
            </summary>
            <value>The raw XML documentation.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider.ExceptionTypeNames">
            <summary>
            Gets an array of the names of exception types that can be thrown from the member.
            </summary>
            <value>An array of the names of exception types that can be thrown from the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags">
            <summary>
            Represents .NET reflection binding flags.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.IgnoreCase">
            <summary>
            Whether to ignore character case when doing name matches.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.HasConstructor">
            <summary>
            The type must has a constructor that is accessible using the specified access scope.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.ObjectReference">
            <summary>
            The binding should assume an object reference, such as a this or base reference. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.ContextIsTargetFamily">
            <summary>
            The context type is in the same family as the target type.  This flag is for internal use only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.ContextIsDeclaringType">
            <summary>
            The context type is the same as the declaring type.  This flag is for internal use only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.DeclaringTypeOnly">
            <summary>
            Only include members on the declaring type, not on any base types.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Private">
            <summary>
            Include private members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Assembly">
            <summary>
            Include assembly (internal) members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Family">
            <summary>
            Include family (protected) members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Public">
            <summary>
            Include public members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.AllAccessTypes">
            <summary>
            Include all access types (Public, Assembly, Family, and Private).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Instance">
            <summary>
            Include instance members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Static">
            <summary>
            Include static members.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.Default">
            <summary>
            The default options (Instance, Static, and AllAccessTypes).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.ExcludeIndexers">
            <summary>
            Indexers should be excluded in member lists (for use with C#-like languages).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.OnlyIndexers">
            <summary>
            Indexers should be the only thing included in member lists (for use with C#-like languages).
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.OnlyConstructors">
            <summary>
            Constructors should be the only thing included in member lists.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags.ExcludeEditorNeverBrowsable">
            <summary>
            Excludes editor never-browsable items.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement">
            <summary>
            Represents a while statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>WhileStatement</c> class. 
            </summary>
            <param name="expression">The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.Expression"/>.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.Expression">
            <summary>
            Gets or sets the condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.Expression"/>.
            </summary>
            <value>The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WhileStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement">
            <summary>
            Represents a using statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement.ResourceAcquisitionContextID">
            <summary>
            Gets the context ID for a resource acquisition AST node.
            </summary>
            <value>The context ID for a resource acquisition AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement.#ctor(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UsingStatement</c> class. 
            </summary>
            <param name="resourceAcquisitions">The list of resource acquisition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingStatement.ResourceAcquisitions">
            <summary>
            Gets the collection of resource acquisition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> objects.
            </summary>
            <value>The collection of resource acquisition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> objects.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression">
            <summary>
            Represents an unchecked expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UncheckedExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unchecked modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression">
            <summary>
            Represents a literal expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType,System.String,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>LiteralExpression</c> class. 
            </summary>
            <param name="literalType">A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.LiteralType"/> indicating the literal type.</param>
            <param name="literalValue">The value of the literal.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.LiteralType">
            <summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.LiteralType"/> indicating the literal type.
            </summary>
            <value>A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.LiteralType"/> indicating the literal type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.LiteralValue">
            <summary>
            Gets or sets the value of the literal.
            </summary>
            <value>The value of the literal.</value>
            <remarks>This property will only return values for numeric, string and character literals.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression">
            <summary>
            Represents a checked expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>CheckedExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the checked modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the expression.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CheckedExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression">
            <summary>
            Represents an anonymous method expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.GenericTypeParameterContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.BlockStatementContextID">
            <summary>
            Gets the context ID for a block statement AST node.
            </summary>
            <value>The context ID for a block statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.BlockStatement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>AnonymousMethodExpression</c> class. 
            </summary>
            <param name="blockStatement">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.BlockStatement"/> wrapped by the anonymous method.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.BlockStatement">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.BlockStatement"/> wrapped by the anonymous method.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.BlockStatement"/> wrapped by the anonymous method.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.GenericTypeParameters">
            <summary>
            Gets the collection of generic type parameters.
            </summary>
            <value>The collection of generic type parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AnonymousMethodExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember">
            <summary>
            Represents a generic .NET member that has been constructed and wraps the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> that is its definition.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember,System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>ConstructedGenericMember</c> class.
            </summary>
            <param name="genericDefinitionMember">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> specifying the generic member definition to wrap.</param>
            <param name="genericTypeArguments">The <see cref="T:System.Collections.ICollection"/> of generic type arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.ConstructTypeReference(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference[],ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Returns a constructed type reference where the generic type parameters have been resolved to their matching counterparts.
            </summary>
            <param name="unresolvedGenericTypeArguments">The array of unresolved generic type arguments.</param>
            <param name="resolvedGenericTypeArguments">The array of resolved generic type arguments.</param>
            <param name="unresolvedTypeReference">The unresolved generic type reference.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.GenericDefinitionMember">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> specifying the generic member definition that is wrapped.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> specifying the generic member definition that is wrapped.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.IsEditorBrowsableNever">
            <summary>
            Gets whether the member has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the member has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.IsExtension">
            <summary>
            Gets whether the member is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the member is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.Modifiers">
            <summary>
            Gets the modifiers for the member.
            </summary>
            <value>The modifiers for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericMember.ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement">
            <summary>
            Represents a with statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>WithStatement</c> class. 
            </summary>
            <param name="expression">The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.Expression"/>.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.Expression">
            <summary>
            Gets or sets the condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.Expression"/>.
            </summary>
            <value>The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.WithStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement">
            <summary>
            Represents a raise event statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.EventNameContextID">
            <summary>
            Gets the context ID for an event name AST node.
            </summary>
            <value>The context ID for an event name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.ArgumentContextID">
            <summary>
            Gets the context ID for an argument AST node.
            </summary>
            <value>The context ID for an argument AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>RaiseEventStatement</c> class. 
            </summary>
            <param name="eventName">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the event name.</param>
            <param name="arguments">An <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> containing the arguments.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.Arguments">
            <summary>
            Gets the collection of arguments.
            </summary>
            <value>The collection of arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.EventName">
            <summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the event name.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> indicating the event name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.RaiseEventStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess">
            <summary>
            Represents a class access expression.
            Used in Visual Basic only via the <c>MyClass</c> keyword.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ClassAccess</c> class. 
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassAccess.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression">
            <summary>
            Represents an address of expression.  
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>AddressOfExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the checked modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the expression.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AddressOfExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation">
            <summary>
            Represents the cached documentation for an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AssemblyDocumentation</c> class that uses raw XML documentation files.
            </summary>
            <param name="path">The path to the documentation.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.#ctor(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.IndexEntry[],System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <c>AssemblyDocumentation</c> class that uses a cached documentation file.
            </summary>
            <param name="path">The path to the documentation.</param>
            <param name="indexEntries">The array of index entries.</param>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to use for reading the XML data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.GetDocumentation(System.String)">
            <summary>
            Gets the documentation for the specified key.
            </summary>
            <param name="key">The documentation key to look up.</param>
            <returns>The documentation for the specified key.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.LoadFromCache(System.DateTime,System.String)">
            <summary>
            Loads a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation"/> from the specified path.
            </summary>
            <param name="dateTime">The last modification date/time of the documentation.</param>
            <param name="path">The path to the cached documentation file.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation"/> that was loaded.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.LoadHeaderFromCache(System.String)">
            <summary>
            Loads the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.CacheHeader"/> from the specified cache file.
            </summary>
            <param name="path">The path to the cached reflection file.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.CacheHeader"/> that was loaded.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.SaveToCache(System.String,System.DateTime,System.Int64,System.String)">
            <summary>
            Saves XML documentation to a cache file.
            </summary>
            <param name="xmlDocumentationPath">The path to the file containing the XML documentation.</param>
            <param name="dateTime">The last modification date/time of the documentation.</param>
            <param name="xmlDocumentationSize">The size of the documentation.</param>
            <param name="cachedDocumentationPath">The path to the cached documentation file.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation"/> that was created based on the documentation.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param>
            <remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing"/> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.CacheHeader">
            <summary>
            Stores data for the cache header.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.CacheHeader.IsValid">
            <summary>
            Returns whether the cache header is valid.
            </summary>
            <returns>
            <c>true</c> if the cache header is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.DocumentationEntry">
            <summary>
            Represents a documentation entry.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.DocumentationEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>DocumentationEntry</c> class.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.IndexEntry">
            <summary>
            Represents an index entry.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.IndexEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>IndexEntry</c> class.
            </summary>
            <param name="hashCode">The hash code of the entry.</param>
            <param name="filePosition">The file position of the entry.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyDocumentation.IndexEntry.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement">
            <summary>
            Represents an unchecked statement.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UncheckedStatement</c> class. 
            </summary>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UncheckedStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration">
            <summary>
            Represents an accessor declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.AttributeSectionContextID">
            <summary>
            Gets the context ID for an attribute section AST node.
            </summary>
            <value>The context ID for an attribute section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.BlockStatementContextID">
            <summary>
            Gets the context ID for a block statement AST node.
            </summary>
            <value>The context ID for a block statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.AttributeSections">
            <summary>
            Gets the collection of attribute sections.
            </summary>
            <value>The collection of attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.BlockStatement">
            <summary>
            Gets or sets the block <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.
            </summary>
            <value>The block <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AccessorDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor">
            <summary>
            Represents an interface accessor.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.AttributeSectionContextID">
            <summary>
            Gets the context ID for an attribute section AST node.
            </summary>
            <value>The context ID for an attribute section AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessorType)">
            <summary>
            Initializes a new instance of the <c>InterfaceAccessor</c> class. 
            </summary>
            <param name="accessorType">The accessor type.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.AccessorType">
            <summary>
            Gets or sets the accessor type.
            </summary>
            <value>The accessor type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.AttributeSections">
            <summary>
            Gets the collection of attribute sections.
            </summary>
            <value>The collection of attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit">
            <summary>
            Represents a .NET language compilation unit.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.ExternAliasDirectiveSectionContextID">
            <summary>
            Gets the context ID for an extern alias directive section AST node.
            </summary>
            <value>The context ID for an extern alias directive section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.UsingDirectiveSectionContextID">
            <summary>
            Gets the context ID for a using directive section AST node.
            </summary>
            <value>The context ID for a using directive section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.GlobalAttributeSectionContextID">
            <summary>
            Gets the context ID for a global attribute section AST node.
            </summary>
            <value>The context ID for a global attribute section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.NamespaceMemberContextID">
            <summary>
            Gets the context ID for a namespace member AST node.
            </summary>
            <value>The context ID for a namespace member AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.ActiproSoftware#SyntaxEditor#ICompilationUnit#ShouldVisitChildNodesForOutlining(ActiproSoftware.SyntaxEditor.IAstNode)">
            <summary>
            Returns whether an <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser"/> should visit the child nodes of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/>
            to look for collapsible nodes.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> to examine.</param>
            <returns>
            <c>true</c> if the child nodes should be visited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.ActiproSoftware#SyntaxEditor#ICompilationUnit#UpdateOutliningParser(ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser)">
            <summary>
            Adds any extra <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParserData"/> nodes to the <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser"/>,
            such as for comments that should be marked as collapsible.
            </summary>
            <param name="outliningParser">The <see cref="T:ActiproSoftware.SyntaxEditor.CollapsibleNodeOutliningParser"/> to update.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.GetClosestTypeOrMember(System.Int32)">
            <summary>
            Returns the closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.
            </summary>
            <param name="offset">The offset to examine.</param>
            <returns>The closest type or member <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.GetContainingNode(System.Int32)">
            <summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that contains the specified offset.
            </summary>
            <param name="offset">The offset to examine.</param>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that contains the specified offset.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.GetImportedNamespaces(ActiproSoftware.SyntaxEditor.IAstNode,System.String[]@,System.Collections.Hashtable@)">
            <summary>
            Get the imported namespaces and namspace aliases.
            </summary>
            <param name="contextNode">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNode"/> that contains the context.</param>
            <param name="importedNamespaces">Returns an array of the imported namespaces.</param>
            <param name="namespaceAliases">Returns a <see cref="T:System.Collections.Hashtable"/> of the namespace aliases.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.Comments">
            <summary>
            Gets the collection of comments that appear in the node.
            </summary>
            <value>The collection of comments that appear in the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.DocumentationCommentTextRanges">
            <summary>
            Gets or sets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each documentation comment in the compilation unit.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.ExternAliasDirectives">
            <summary>
            Gets or sets the extern alias directives block.
            </summary>
            <value>The extern alias directives block.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.GlobalAttributeSections">
            <summary>
            Gets the collection of global attribute sections.
            </summary>
            <value>The collection of global attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.HasErrors">
            <summary>
            Gets whether the compilation unit contains errors.
            </summary>
            <value>
            <c>true</c> if the compilation unit contains errors.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.HasLanguageTransitions">
            <summary>
            Gets or sets whether the compilation unit contains any language transitions.
            </summary>
            <value>
            <c>true</c> if the compilation unit contains any language transitions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.IsLanguageRoot">
            <summary>
            Gets whether the AST node is a language root node.
            </summary>
            <value>
            <c>true</c> if the AST node is a language root node; otherwise, <c>false</c>.
            </value>
            <remarks>
            When in a scenario where AST node trees from multiple languages have been merged together,
            it is useful to identify where child language AST node trees begin within their parents.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.MultiLineCommentTextRanges">
            <summary>
            Gets or sets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each multi-line comment in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each multi-line comment in the compilation unit.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.NamespaceMembers">
            <summary>
            Gets the collection of namespaces and members.
            </summary>
            <value>The collection of namespaces and members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.OptionCompare">
            <summary>
            Gets or sets the value of the Visual Basic <c>Compare</c> option.
            </summary>
            <value>The value of the Visual Basic <c>Compare</c> option; or <see langword="null"/> if none is specified.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.OptionExplicit">
            <summary>
            Gets or sets the value of the Visual Basic <c>Explicit</c> option.
            </summary>
            <value>The value of the Visual Basic <c>Explicit</c> option; or <see langword="null"/> if none is specified.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.OptionInfer">
            <summary>
            Gets or sets the value of the Visual Basic <c>Infer</c> option.
            </summary>
            <value>The value of the Visual Basic <c>Infer</c> option; or <see langword="null"/> if none is specified.</value>
            <remarks>
            This option is part of the Visual Basic 9.0 (.NET 3.5) specification.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.OptionStrict">
            <summary>
            Gets or sets the value of the Visual Basic <c>Strict</c> option.
            </summary>
            <value>The value of the Visual Basic <c>Strict</c> option; or <see langword="null"/> if none is specified.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.RegionTextRanges">
            <summary>
            Gets or sets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.
            </summary>
            <value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> objects that indicate the range of each region pre-processor directive in the compilation unit.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey">
            <summary>
            Gets or sets the string-based key that identifies the source of the code, which typically is a filename.
            </summary>
            <value>The string-based key that identifies the source of the code, which typically is a filename.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceLanguage">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that was used to generate the compilation unit.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> that was used to generate the compilation unit.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SyntaxErrors">
            <summary>
            Gets the collection of syntax errors that were found in the compilation unit.
            </summary>
            <value>The collection of syntax errors that were found in the compilation unit.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.Tag">
            <summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that contains user-defined data about the control. The default is <see langword="null"/>.
            </value>
            <remarks>
            Any type derived from the <see cref="T:System.Object"/> class can be assigned to this property. 
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.Types">
            <summary>
            Gets the collection of namespaces and members.
            </summary>
            <value>The collection of namespaces and members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.UsingDirectives">
            <summary>
            Gets or sets the using directives block.
            </summary>
            <value>The using directives block.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer">
            <summary>
            Represents a stackalloc initializer expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.TypeReferenceContextID">
            <summary>
            Gets the context ID for a type reference AST node.
            </summary>
            <value>The context ID for a type reference AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>StackAllocInitializer</c> class. 
            </summary>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.TypeReference"/>.</param>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.TypeReference"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StackAllocInitializer.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression">
            <summary>
            Represents an object or array creation expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.ObjectTypeContextID">
            <summary>
            Gets the context ID for an object type AST node.
            </summary>
            <value>The context ID for an object type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.ArgumentContextID">
            <summary>
            Gets the context ID for an argument AST node.
            </summary>
            <value>The context ID for an argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Initializes a new instance of the <c>ObjectCreationExpression</c> class. 
            </summary>
            <param name="objectType">The object <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ObjectCreationExpression</c> class. 
            </summary>
            <param name="objectType">The object <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.Arguments">
            <summary>
            Gets the collection of argument expressions.
            </summary>
            <value>The collection of argument expressions.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.Initializer">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression"/> that is used to initialize the object.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression"/> that is used to initialize the object.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.IsArray">
            <summary>
            Gets or sets whether this expression creates an array.
            </summary>
            <value>
            <c>true</c> if this expression creates an array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.IsImplicitlyTyped">
            <summary>
            Gets or sets whether the object is implicitly typed.
            </summary>
            <value>
            <c>true</c> if the object is implicitly typed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCreationExpression.ObjectType">
            <summary>
            Gets or sets the object <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.
            </summary>
            <value>The object <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection">
            <summary>
            Represents an else if statement section.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.ConditionContextID">
            <summary>
            Gets the context ID for a condition AST node.
            </summary>
            <value>The context ID for a condition AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ElseIfSection</c> class. 
            </summary>
            <param name="condition">The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</param>
            <param name="statement">The true <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Comments">
            <summary>
            Gets the collection of comments that appear in the node.
            </summary>
            <value>The collection of comments that appear in the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Condition">
            <summary>
            Gets or sets the condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Statement">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Statement"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ElseIfSection.Statement"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator">
            <summary>
            Represents a query expression from operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator.CollectionRangeVariableDeclarationContextID">
            <summary>
            Gets the context ID for a collection range variable declaration AST node.
            </summary>
            <value>The context ID for a collection range variable declaration AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>FromQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator.CollectionRangeVariableDeclarations">
            <summary>
            Gets the collection of collection range variable declarations.
            </summary>
            <value>The collection of collection range variable declarations.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FromQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID">
            <summary>
            Contains the token IDs for the <c>C#</c> language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Invalid">
            <summary>
            The Invalid token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DocumentEnd">
            <summary>
            The DocumentEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LanguageTransitionStart">
            <summary>
            The LanguageTransitionStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LanguageTransitionEnd">
            <summary>
            The LanguageTransitionEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Whitespace">
            <summary>
            The Whitespace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LineTerminator">
            <summary>
            The LineTerminator token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.SingleLineComment">
            <summary>
            The SingleLineComment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.MultiLineComment">
            <summary>
            The MultiLineComment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DocumentationCommentDelimiter">
            <summary>
            The DocumentationCommentDelimiter token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DocumentationCommentText">
            <summary>
            The DocumentationCommentText token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DocumentationCommentTag">
            <summary>
            The DocumentationCommentTag token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DecimalIntegerLiteral">
            <summary>
            The DecimalIntegerLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.HexadecimalIntegerLiteral">
            <summary>
            The HexadecimalIntegerLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.RealLiteral">
            <summary>
            The RealLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.CharacterLiteral">
            <summary>
            The CharacterLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.StringLiteral">
            <summary>
            The StringLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.VerbatimStringLiteral">
            <summary>
            The VerbatimStringLiteral token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Identifier">
            <summary>
            The Identifier token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ContextualKeywordStart">
            <summary>
            The ContextualKeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Ascending">
            <summary>
            The Ascending token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.By">
            <summary>
            The By token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Descending">
            <summary>
            The Descending token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Equals">
            <summary>
            The Equals token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.From">
            <summary>
            The From token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Group">
            <summary>
            The Group token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Into">
            <summary>
            The Into token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Join">
            <summary>
            The Join token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Let">
            <summary>
            The Let token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.On">
            <summary>
            The On token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OrderBy">
            <summary>
            The OrderBy token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Select">
            <summary>
            The Select token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Where">
            <summary>
            The Where token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Var">
            <summary>
            The Var token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ContextualKeywordEnd">
            <summary>
            The ContextualKeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.KeywordStart">
            <summary>
            The KeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Abstract">
            <summary>
            The Abstract token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Add">
            <summary>
            The Add token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.As">
            <summary>
            The As token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Base">
            <summary>
            The Base token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Bool">
            <summary>
            The Bool token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Break">
            <summary>
            The Break token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Byte">
            <summary>
            The Byte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Case">
            <summary>
            The Case token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Catch">
            <summary>
            The Catch token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Char">
            <summary>
            The Char token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Checked">
            <summary>
            The Checked token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Class">
            <summary>
            The Class token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Const">
            <summary>
            The Const token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Continue">
            <summary>
            The Continue token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Decimal">
            <summary>
            The Decimal token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Default">
            <summary>
            The Default token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Delegate">
            <summary>
            The Delegate token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Do">
            <summary>
            The Do token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Double">
            <summary>
            The Double token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Dynamic">
            <summary>
            The Dynamic token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Else">
            <summary>
            The Else token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Enum">
            <summary>
            The Enum token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Event">
            <summary>
            The Event token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Explicit">
            <summary>
            The Explicit token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Extern">
            <summary>
            The Extern token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.False">
            <summary>
            The False token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Finally">
            <summary>
            The Finally token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Fixed">
            <summary>
            The Fixed token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Float">
            <summary>
            The Float token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.For">
            <summary>
            The For token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ForEach">
            <summary>
            The ForEach token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Get">
            <summary>
            The Get token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Goto">
            <summary>
            The Goto token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.If">
            <summary>
            The If token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Implicit">
            <summary>
            The Implicit token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.In">
            <summary>
            The In token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Int">
            <summary>
            The Int token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Interface">
            <summary>
            The Interface token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Internal">
            <summary>
            The Internal token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Is">
            <summary>
            The Is token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Lock">
            <summary>
            The Lock token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Long">
            <summary>
            The Long token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Namespace">
            <summary>
            The Namespace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.New">
            <summary>
            The New token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Null">
            <summary>
            The Null token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Object">
            <summary>
            The Object token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Operator">
            <summary>
            The Operator token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Out">
            <summary>
            The Out token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Override">
            <summary>
            The Override token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Params">
            <summary>
            The Params token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Partial">
            <summary>
            The Partial token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Private">
            <summary>
            The Private token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Protected">
            <summary>
            The Protected token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Public">
            <summary>
            The Public token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ReadOnly">
            <summary>
            The ReadOnly token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Ref">
            <summary>
            The Ref token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Remove">
            <summary>
            The Remove token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Return">
            <summary>
            The Return token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.SByte">
            <summary>
            The SByte token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Sealed">
            <summary>
            The Sealed token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Set">
            <summary>
            The Set token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Short">
            <summary>
            The Short token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.SizeOf">
            <summary>
            The SizeOf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.StackAlloc">
            <summary>
            The StackAlloc token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Static">
            <summary>
            The Static token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.String">
            <summary>
            The String token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Struct">
            <summary>
            The Struct token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Switch">
            <summary>
            The Switch token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.This">
            <summary>
            The This token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Throw">
            <summary>
            The Throw token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.True">
            <summary>
            The True token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Try">
            <summary>
            The Try token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.TypeOf">
            <summary>
            The TypeOf token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.UInt">
            <summary>
            The UInt token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ULong">
            <summary>
            The ULong token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Unchecked">
            <summary>
            The Unchecked token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Unsafe">
            <summary>
            The Unsafe token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.UShort">
            <summary>
            The UShort token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Using">
            <summary>
            The Using token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Virtual">
            <summary>
            The Virtual token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Void">
            <summary>
            The Void token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Volatile">
            <summary>
            The Volatile token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.While">
            <summary>
            The While token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Yield">
            <summary>
            The Yield token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.KeywordEnd">
            <summary>
            The KeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OperatorOrPunctuatorStart">
            <summary>
            The OperatorOrPunctuatorStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OpenCurlyBrace">
            <summary>
            The OpenCurlyBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.CloseCurlyBrace">
            <summary>
            The CloseCurlyBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OpenSquareBrace">
            <summary>
            The OpenSquareBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.CloseSquareBrace">
            <summary>
            The CloseSquareBrace token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OpenParenthesis">
            <summary>
            The OpenParenthesis token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.CloseParenthesis">
            <summary>
            The CloseParenthesis token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Dot">
            <summary>
            The Dot token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Comma">
            <summary>
            The Comma token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Colon">
            <summary>
            The Colon token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.NamespaceAliasQualifier">
            <summary>
            The NamespaceAliasQualifier token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.SemiColon">
            <summary>
            The SemiColon token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Addition">
            <summary>
            The Addition token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Subtraction">
            <summary>
            The Subtraction token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Multiplication">
            <summary>
            The Multiplication token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Division">
            <summary>
            The Division token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Modulus">
            <summary>
            The Modulus token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.BitwiseAnd">
            <summary>
            The BitwiseAnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.BitwiseOr">
            <summary>
            The BitwiseOr token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ExclusiveOr">
            <summary>
            The ExclusiveOr token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Negation">
            <summary>
            The Negation token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OnesComplement">
            <summary>
            The OnesComplement token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Assignment">
            <summary>
            The Assignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LessThan">
            <summary>
            The LessThan token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.GreaterThan">
            <summary>
            The GreaterThan token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.QuestionMark">
            <summary>
            The QuestionMark token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Increment">
            <summary>
            The Increment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Decrement">
            <summary>
            The Decrement token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ConditionalAnd">
            <summary>
            The ConditionalAnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ConditionalOr">
            <summary>
            The ConditionalOr token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LeftShift">
            <summary>
            The LeftShift token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Equality">
            <summary>
            The Equality token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Inequality">
            <summary>
            The Inequality token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LessThanOrEqual">
            <summary>
            The LessThanOrEqual token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.GreaterThanOrEqual">
            <summary>
            The GreaterThanOrEqual token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.AdditionAssignment">
            <summary>
            The AdditionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.SubtractionAssignment">
            <summary>
            The SubtractionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.MultiplicationAssignment">
            <summary>
            The MultiplicationAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DivisionAssignment">
            <summary>
            The DivisionAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ModulusAssignment">
            <summary>
            The ModulusAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.BitwiseAndAssignment">
            <summary>
            The BitwiseAndAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.BitwiseOrAssignment">
            <summary>
            The BitwiseOrAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ExclusiveOrAssignment">
            <summary>
            The ExclusiveOrAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LeftShiftAssignment">
            <summary>
            The LeftShiftAssignment token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.PointerDereference">
            <summary>
            The PointerDereference token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.NullCoalescing">
            <summary>
            The NullCoalescing token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.Lambda">
            <summary>
            The Lambda token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.OperatorOrPunctuatorEnd">
            <summary>
            The OperatorOrPunctuatorEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.PreProcessorDirectiveKeywordStart">
            <summary>
            The PreProcessorDirectiveKeywordStart token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.IfPreProcessorDirective">
            <summary>
            The IfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ElsePreProcessorDirective">
            <summary>
            The ElsePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ElIfPreProcessorDirective">
            <summary>
            The ElIfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.EndIfPreProcessorDirective">
            <summary>
            The EndIfPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.DefinePreProcessorDirective">
            <summary>
            The DefinePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.UndefPreProcessorDirective">
            <summary>
            The UndefPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.WarningPreProcessorDirective">
            <summary>
            The WarningPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.ErrorPreProcessorDirective">
            <summary>
            The ErrorPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.LinePreProcessorDirective">
            <summary>
            The LinePreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.RegionPreProcessorDirective">
            <summary>
            The RegionPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.EndRegionPreProcessorDirective">
            <summary>
            The EndRegionPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.PragmaPreProcessorDirective">
            <summary>
            The PragmaPreProcessorDirective token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.PreProcessorDirectiveKeywordEnd">
            <summary>
            The PreProcessorDirectiveKeywordEnd token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.PreProcessorDirectiveText">
            <summary>
            The PreProcessorDirectiveText token ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.MaxTokenID">
            <summary>
            The MaxTokenID token ID.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpTokenID.GetTokenKey(System.Int32)">
            <summary>
            Returns the string-based key for the specified token ID.
            </summary>
            <param name="id">The token ID to examine.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID">
            <summary>
            Contains the lexical state IDs for the <c>C#</c> language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID.Default">
            <summary>
            The Default lexical state ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID.DocumentationComment">
            <summary>
            The DocumentationComment lexical state ID.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID.PreProcessorDirective">
            <summary>
            The PreProcessorDirective lexical state ID.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpLexicalStateID.GetLexicalStateKey(System.Int32)">
            <summary>
            Returns the string-based key for the specified lexical state ID.
            </summary>
            <param name="id">The lexical state ID to examine.</param>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser">
            <summary>
            Provides a semantic parser for the <c>C#</c> language.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.#ctor(ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser)">
            <summary>
            Initializes a new instance of the <c>CSharpSemanticParser</c> class.
            </summary>
            <param name="lexicalParser">The <see cref="T:ActiproSoftware.SyntaxEditor.ParserGenerator.IRecursiveDescentLexicalParser"/> to use for lexical parsing.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.AdvanceToNext">
            <summary>
            Advances to the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/>.
            </summary>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> that was read.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.AdvanceToNextCloseCurlyBrace(System.Int32,System.Boolean)">
            <summary>
            Advances to (or past) the next matching close curly brace.
            </summary>
            <param name="openCurlyBraceLevel">The level of the open curly brace.</param>	
            <param name="movePast">Whether to move past the close curly brace.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.AreNextTwo(System.Int32,System.Int32)">
            <summary>
            Returns whether the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match the specified IDs.
            </summary>
            <returns>
            <c>true</c> if the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match the specified IDs; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.AreNextTwoIdentifierAnd(System.Int32)">
            <summary>
            Returns whether the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match an identifier and the specified ID.
            </summary>
            <returns>
            <c>true</c> if the next two <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> objects match an identifier and the specified ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.BlockAddChild(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Adds a child node to the current block.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to add to the current block.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.BlockStart(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Starts a block and pushes it on the block stack.
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is starting a block.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.BlockEnd">
            <summary>
            Ends the current block and pops it from the block stack.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.GetImplicitType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,System.Boolean)">
            <summary>
            Returns an inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> initializer.
            </summary>
            <param name="initializer">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <param name="allowNull">Whether to allow a null initializer.</param>
            <returns>An inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> initializer.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.GetReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression)">
            <summary>
            Returns an inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <returns>An inferred <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> for the return type of the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsArrayRankSpecifiers">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an array with rank specifiers.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an array with rank specifiers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsCommaAndIdentifier">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a comma followed by an identifier.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a comma followed by an identifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsContextualKeyword(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a contextual keyword.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a Contextual keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsDefaultValueExpression">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a default value expression.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a default value expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsGlobalAttributeSection">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a qualifier identifier continuation.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a qualifier identifier continuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsIdentifier(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an identifier (or contextual keyword).
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an identifier (or contextual keyword); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsImplicitlyTypedLambdaParameterList">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an implicitly typed lambda parameter list.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is an implicitly typed lambda parameter list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsLambdaExpression">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a lambda expression.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a lambda expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsKeyword">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsKeyword(ActiproSoftware.SyntaxEditor.IToken)">
            <summary>
            Returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword.
            </summary>
            <param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsKeywordOrIdentifierAndColon">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword or an identifier followed by a colon.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a keyword or an identifier followed by a colon; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsObjectInitializer">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an object initializer.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of an object initializer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsParameterArray">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a parameter array.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a parameter array; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsQueryExpression">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a query expression.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a query expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsQualifierIdentifierContinuation">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a qualifier identifier continuation.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is a qualifier identifier continuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsRightShift">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a right shift.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a right shift; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsRightShiftAssignment">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a right shift.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a right shift; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsType">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method can only be called after a peek operation has started.
            Types have this syntax: (Identifier "::")? (Identifier ("." Identifier)* | NativeType) ("&lt;" Type "&gt;")? ("?")? ("[" "]")?
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsTypeCore">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method can only be called from <see cref="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsType"/>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsTypeArgumentList">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type argument list.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type argument list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsTypeCast">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type cast.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a type cast; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsValidGlobalAttributeSectionTarget(System.String)">
            <summary>
            Returns whether the target specification is a valid global attribute section target.
            </summary>
            <param name="target">The target specification to examine.</param>
            <returns>
            <c>true</c> if the target specification is a valid global attribute section target; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsVariableDeclaration">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declaration.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declaration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.IsVariableDeclarator">
            <summary>
            Returns whether the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declarator.
            </summary>
            <returns>
            <c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken"/> is the start of a variable declarator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MarkGenericParameters(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,System.Boolean)">
            <summary>
            Flags any generic parameters that are located.
            </summary>
            <param name="typeParameterList">The list of type parameters that are defined.</param>
            <param name="typeReference">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference"/> to examine.</param>
            <param name="allowTopLevelMark">Whether to allow the type reference to be marked.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.ParseArgumentList">
            <summary>
            Parses the code and returns the list of arguments that were parsed.
            </summary>
            <returns>
            An <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> containing the list of arguments that were parsed.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.ReapComments(ActiproSoftware.SyntaxEditor.IAstNodeList,System.Boolean)">
            <summary>
            Reaps the comments that have been collected since the last reaping and adds them to an <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/>.
            </summary>
            <param name="nodes">The <see cref="T:ActiproSoftware.SyntaxEditor.IAstNodeList"/> that should receive any reaped comment nodes.</param>
            <param name="sort">Whether to sort the sibling nodes.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.ReapDocumentationComments">
            <summary>
            Reaps the documentation comments that have been collected since the last reaping.
            </summary>
            <returns>The documentation comments that have been collection since the last reaping.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.ReportSyntaxError(ActiproSoftware.SyntaxEditor.TextRange,System.String)">
            <summary>
            Reports a syntax error.
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.Parse">
            <summary>
            Parses the document and generates a document object model.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNamespaceName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>NamespaceName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NamespaceName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeName(System.Boolean,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>TypeName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>Type</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Type</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeCore(System.Boolean,System.Boolean,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>TypeCore</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeCore</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchSimpleType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>SimpleType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SimpleType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNumericType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>NumericType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NumericType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchIntegralType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>IntegralType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>IntegralType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFloatingPointType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>FloatingPointType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FloatingPointType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Float</c>, <c>Double</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchClassType(System.Boolean,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>ClassType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ClassType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNonArrayType(System.Boolean,System.Boolean,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>NonArrayType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NonArrayType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchRankSpecifier(System.Int32[]@)">
            <summary>
            Matches a <c>RankSpecifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>RankSpecifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchArgumentList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ArgumentList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ArgumentList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>Ref</c>, <c>Out</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchArgument(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>Argument</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Argument</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>Ref</c>, <c>Out</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchPrimaryExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>PrimaryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>PrimaryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchUnaryExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>UnaryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>UnaryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchCastExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>CastExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CastExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchMultiplicativeExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>MultiplicativeExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>MultiplicativeExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAdditiveExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>AdditiveExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AdditiveExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchShiftExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ShiftExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ShiftExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchRelationalExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>RelationalExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>RelationalExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchEqualityExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>EqualityExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EqualityExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAndExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>AndExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AndExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchExclusiveOrExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ExclusiveOrExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExclusiveOrExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchInclusiveOrExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>InclusiveOrExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InclusiveOrExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchConditionalAndExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ConditionalAndExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConditionalAndExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchConditionalOrExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ConditionalOrExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConditionalOrExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchConditionalExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ConditionalExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConditionalExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAssignmentOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType@)">
            <summary>
            Matches a <c>AssignmentOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AssignmentOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Assignment</c>, <c>AdditionAssignment</c>, <c>SubtractionAssignment</c>, <c>MultiplicationAssignment</c>, <c>DivisionAssignment</c>, <c>ModulusAssignment</c>, <c>BitwiseAndAssignment</c>, <c>BitwiseOrAssignment</c>, <c>ExclusiveOrAssignment</c>, <c>LeftShiftAssignment</c>.
            The non-terminal can start with: this.IsRightShiftAssignment().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNonAssignmentExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>NonAssignmentExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NonAssignmentExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>Expression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Expression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchStatement(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>Statement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Statement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>SemiColon</c>, <c>If</c>, <c>Switch</c>, <c>OpenCurlyBrace</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>ForEach</c>, <c>Break</c>, <c>Continue</c>, <c>Goto</c>, <c>Return</c>, <c>Throw</c>, <c>Try</c>, <c>Lock</c>, <c>Using</c>, <c>Yield</c>, <c>Unsafe</c>, <c>Fixed</c>, <c>Const</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchEmbeddedStatement(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>EmbeddedStatement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EmbeddedStatement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>SemiColon</c>, <c>If</c>, <c>Switch</c>, <c>OpenCurlyBrace</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>ForEach</c>, <c>Break</c>, <c>Continue</c>, <c>Goto</c>, <c>Return</c>, <c>Throw</c>, <c>Try</c>, <c>Lock</c>, <c>Using</c>, <c>Yield</c>, <c>Unsafe</c>, <c>Fixed</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchBlock(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>Block</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Block</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLabeledStatement(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>LabeledStatement</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LabeledStatement</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLocalVariableDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>LocalVariableDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LocalVariableDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLocalVariableDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>LocalVariableDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LocalVariableDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLocalConstantDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>LocalConstantDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LocalConstantDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Const</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLocalConstantDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LocalVariableDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>LocalConstantDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LocalConstantDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchStatementExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement@)">
            <summary>
            Matches a <c>StatementExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StatementExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchSwitchSection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchSection@)">
            <summary>
            Matches a <c>SwitchSection</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SwitchSection</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Default</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>SemiColon</c>, <c>If</c>, <c>Switch</c>, <c>OpenCurlyBrace</c>, <c>While</c>, <c>Do</c>, <c>For</c>, <c>ForEach</c>, <c>Break</c>, <c>Continue</c>, <c>Goto</c>, <c>Case</c>, <c>Return</c>, <c>Throw</c>, <c>Try</c>, <c>Lock</c>, <c>Using</c>, <c>Yield</c>, <c>Unsafe</c>, <c>Fixed</c>, <c>Const</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchCatchClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CatchClause@)">
            <summary>
            Matches a <c>CatchClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CatchClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Catch</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchCompilationUnit">
            <summary>
            Matches a <c>CompilationUnit</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CompilationUnit</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>New</c>, <c>Using</c>, <c>Unsafe</c>, <c>Namespace</c>, <c>Public</c>, <c>Protected</c>, <c>Internal</c>, <c>Private</c>, <c>Abstract</c>, <c>Extern</c>, <c>Partial</c>, <c>Sealed</c>, <c>Static</c>, <c>Override</c>, <c>ReadOnly</c>, <c>Virtual</c>, <c>Volatile</c>, <c>Class</c>, <c>Struct</c>, <c>Interface</c>, <c>Enum</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNamespaceDeclaration">
            <summary>
            Matches a <c>NamespaceDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NamespaceDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Namespace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchQualifiedIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>QualifiedIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QualifiedIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchSimpleIdentifier">
            <summary>
            Matches a <c>SimpleIdentifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SimpleIdentifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchIdentifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@)">
            <summary>
            Matches a <c>Identifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Identifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchUsingDirective(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Matches a <c>UsingDirective</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>UsingDirective</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Using</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchUsingAliasDirective(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)">
            <summary>
            Matches a <c>UsingAliasDirective</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>UsingAliasDirective</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchUsingNamespaceDirective(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection)">
            <summary>
            Matches a <c>UsingNamespaceDirective</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>UsingNamespaceDirective</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchNamespaceMemberDeclaration">
            <summary>
            Matches a <c>NamespaceMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>NamespaceMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>New</c>, <c>Unsafe</c>, <c>Namespace</c>, <c>Public</c>, <c>Protected</c>, <c>Internal</c>, <c>Private</c>, <c>Abstract</c>, <c>Extern</c>, <c>Partial</c>, <c>Sealed</c>, <c>Static</c>, <c>Override</c>, <c>ReadOnly</c>, <c>Virtual</c>, <c>Volatile</c>, <c>Class</c>, <c>Struct</c>, <c>Interface</c>, <c>Enum</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>TypeDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Class</c>, <c>Struct</c>, <c>Interface</c>, <c>Enum</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchModifier(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers@)">
            <summary>
            Matches a <c>Modifier</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Modifier</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>New</c>, <c>Unsafe</c>, <c>Public</c>, <c>Protected</c>, <c>Internal</c>, <c>Private</c>, <c>Abstract</c>, <c>Extern</c>, <c>Partial</c>, <c>Sealed</c>, <c>Static</c>, <c>Override</c>, <c>ReadOnly</c>, <c>Virtual</c>, <c>Volatile</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchClassDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>ClassDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ClassDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Class</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchClassMemberDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration,System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>ClassMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ClassMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>OnesComplement</c>, <c>Const</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Class</c>, <c>Struct</c>, <c>Implicit</c>, <c>Explicit</c>, <c>Event</c>, <c>Interface</c>, <c>Enum</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchConstantDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>ConstantDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ConstantDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchVariableDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FieldDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>VariableDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariableDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchVariableInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>VariableInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariableInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>OpenCurlyBrace</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>, <c>StackAlloc</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchReturnType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>ReturnType</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ReturnType</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchMemberName(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier@,ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>MemberName</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>MemberName</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>This</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFormalParameterList(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>FormalParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FormalParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>OpenSquareBrace</c>, <c>Ref</c>, <c>Out</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Params</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFixedParameter(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>FixedParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FixedParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Ref</c>, <c>Out</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchParameterArray(ActiproSoftware.SyntaxEditor.IAstNodeList,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>ParameterArray</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ParameterArray</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Params</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchOverloadableOperator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType@)">
            <summary>
            Matches a <c>OverloadableOperator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>OverloadableOperator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>, <c>GreaterThan</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Division</c>, <c>Modulus</c>, <c>LeftShift</c>, <c>LessThanOrEqual</c>, <c>GreaterThanOrEqual</c>, <c>Equality</c>, <c>Inequality</c>, <c>ExclusiveOr</c>, <c>BitwiseOr</c>.
            The non-terminal can start with: this.IsRightShift().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchStructDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>StructDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StructDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Struct</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchStructMemberDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration,System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>StructMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StructMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Const</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Class</c>, <c>Struct</c>, <c>Implicit</c>, <c>Explicit</c>, <c>Event</c>, <c>Interface</c>, <c>Enum</c>, <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchArrayInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ArrayInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ArrayInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchInterfaceDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>InterfaceDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Interface</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchInterfaceMemberDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration)">
            <summary>
            Matches a <c>InterfaceMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>OpenSquareBrace</c>, <c>New</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Event</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchInterfaceAccessors(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor@,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.InterfaceAccessor@)">
            <summary>
            Matches a <c>InterfaceAccessors</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>InterfaceAccessors</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>Get</c>, <c>Set</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchEnumDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>EnumDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EnumDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Enum</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchEnumMemberDeclaration">
            <summary>
            Matches a <c>EnumMemberDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>EnumMemberDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchDelegateDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>DelegateDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>DelegateDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchGlobalAttributeSection">
            <summary>
            Matches a <c>GlobalAttributeSection</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>GlobalAttributeSection</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAttributeSection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection@)">
            <summary>
            Matches a <c>AttributeSection</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeSection</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAttributeList(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Matches a <c>AttributeList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAttribute(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AttributeSection)">
            <summary>
            Matches a <c>Attribute</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Attribute</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAttributeArguments(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Matches a <c>AttributeArguments</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeArguments</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenParenthesis</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAttributeArgument(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Attribute)">
            <summary>
            Matches a <c>AttributeArgument</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AttributeArgument</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchStackAllocInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>StackAllocInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>StackAllocInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>StackAlloc</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchExternAliasDirective">
            <summary>
            Matches a <c>ExternAliasDirective</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExternAliasDirective</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Extern</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeParameterList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>TypeParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>TypeParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchVariantTypeParameterList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>VariantTypeParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariantTypeParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchVariantTypeParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference@)">
            <summary>
            Matches a <c>VariantTypeParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>VariantTypeParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenSquareBrace</c>, <c>Out</c>, <c>In</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeArgumentList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>TypeArgumentList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeArgumentList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>LessThan</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeParameterConstraintsClauses(ActiproSoftware.SyntaxEditor.AstNodeList)">
            <summary>
            Matches a <c>TypeParameterConstraintsClauses</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameterConstraintsClauses</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchTypeParameterConstraint(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>TypeParameterConstraint</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>TypeParameterConstraint</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>New</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Class</c>, <c>Struct</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAnonymousMethodExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>AnonymousMethodExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AnonymousMethodExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Delegate</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFixedSizeBufferDeclaration(System.Int32,ActiproSoftware.SyntaxEditor.AstNodeList,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers)">
            <summary>
            Matches a <c>FixedSizeBufferDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FixedSizeBufferDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Fixed</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFixedSizeBufferDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference)">
            <summary>
            Matches a <c>FixedSizeBufferDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FixedSizeBufferDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLambdaExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>LambdaExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LambdaExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: this.IsLambdaExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchExplicitlyTypedLambdaParameterList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ExplicitlyTypedLambdaParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExplicitlyTypedLambdaParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Ref</c>, <c>Out</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchExplicitlyTypedLambdaParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>ExplicitlyTypedLambdaParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ExplicitlyTypedLambdaParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Ref</c>, <c>Out</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchImplicitlyTypedLambdaParameterList(ActiproSoftware.SyntaxEditor.AstNodeList@)">
            <summary>
            Matches a <c>ImplicitlyTypedLambdaParameterList</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImplicitlyTypedLambdaParameterList</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: this.IsImplicitlyTypedLambdaParameterList().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchImplicitlyTypedLambdaParameter(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration@)">
            <summary>
            Matches a <c>ImplicitlyTypedLambdaParameter</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImplicitlyTypedLambdaParameter</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchObjectOrCollectionInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ObjectOrCollectionInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ObjectOrCollectionInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchMemberInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>MemberInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>MemberInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchElementInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ElementInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ElementInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>OpenCurlyBrace</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAnonymousObjectCreationExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>AnonymousObjectCreationExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AnonymousObjectCreationExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>New</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchAnonymousObjectInitializer(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ObjectCollectionInitializerExpression@)">
            <summary>
            Matches a <c>AnonymousObjectInitializer</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>AnonymousObjectInitializer</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OpenCurlyBrace</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchMemberDeclarator(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>MemberDeclarator</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>MemberDeclarator</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchImplicitlyTypedArrayCreationExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>ImplicitlyTypedArrayCreationExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>ImplicitlyTypedArrayCreationExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>New</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchQueryExpression(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression@)">
            <summary>
            Matches a <c>QueryExpression</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QueryExpression</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: this.IsQueryExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchCollectionRangeVariableDeclaration(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CollectionRangeVariableDeclaration@)">
            <summary>
            Matches a <c>CollectionRangeVariableDeclaration</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>CollectionRangeVariableDeclaration</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Void</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchFromClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>FromClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>FromClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>From</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchQueryBody(ActiproSoftware.SyntaxEditor.IAstNodeList)">
            <summary>
            Matches a <c>QueryBody</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>QueryBody</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>From</c>, <c>Group</c>, <c>Join</c>, <c>Let</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchLetClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>LetClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>LetClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Let</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchWhereClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>WhereClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>WhereClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Where</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchJoinClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>JoinClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>JoinClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Join</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchOrderByClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>OrderByClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>OrderByClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>OrderBy</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchOrdering(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering@)">
            <summary>
            Matches a <c>Ordering</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>Ordering</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Bool</c>, <c>Decimal</c>, <c>SByte</c>, <c>Byte</c>, <c>Short</c>, <c>UShort</c>, <c>Int</c>, <c>UInt</c>, <c>Long</c>, <c>ULong</c>, <c>Char</c>, <c>Float</c>, <c>Double</c>, <c>Object</c>, <c>String</c>, <c>Dynamic</c>, <c>Multiplication</c>, <c>True</c>, <c>False</c>, <c>DecimalIntegerLiteral</c>, <c>HexadecimalIntegerLiteral</c>, <c>RealLiteral</c>, <c>CharacterLiteral</c>, <c>StringLiteral</c>, <c>VerbatimStringLiteral</c>, <c>Null</c>, <c>OpenParenthesis</c>, <c>This</c>, <c>Base</c>, <c>New</c>, <c>TypeOf</c>, <c>SizeOf</c>, <c>Checked</c>, <c>Unchecked</c>, <c>Increment</c>, <c>Decrement</c>, <c>Addition</c>, <c>Subtraction</c>, <c>Negation</c>, <c>OnesComplement</c>, <c>BitwiseAnd</c>, <c>Identifier</c>, <c>Ascending</c>, <c>By</c>, <c>Descending</c>, <c>Equals</c>, <c>From</c>, <c>Group</c>, <c>Into</c>, <c>Join</c>, <c>Let</c>, <c>On</c>, <c>OrderBy</c>, <c>Select</c>, <c>Where</c>, <c>Var</c>, <c>Delegate</c>.
            The non-terminal can start with: this.IsLambdaExpression().
            The non-terminal can start with: this.IsQueryExpression().
            The non-terminal can start with: this.IsDefaultValueExpression().
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchSelectClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>SelectClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>SelectClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Select</c>.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MatchGroupClause(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode@)">
            <summary>
            Matches a <c>GroupClause</c> non-terminal.
            </summary>
            <returns><c>true</c> if the <c>GroupClause</c> was matched successfully; otherwise, <c>false</c>.</returns>
            <remarks>
            The non-terminal can start with: <c>Group</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.CompilationUnit">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.CompilationUnit"/> that was parsed.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.CompilationUnit"/> that was parsed.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.CSharp.CSharpSemanticParser.MultiMatchSets">
            <summary>
            Gets the multi-match sets array.
            </summary>
            <value>The multi-match sets array.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs">
            <summary>
            Event arguments for <see cref="T:System.AppDomain"/> events.
            </summary>
            <remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler"/> delegate.
            </remarks>
            <seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventHandler"/>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <c>AppDomainEventArgs</c> class.
            </summary>
            <param name="domain">The <see cref="T:System.AppDomain"/> for which this event is raised.</param>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AppDomainEventArgs.Domain">
            <summary>
            Gets the <see cref="T:System.AppDomain"/> for which this event is raised.
            </summary>
            <value>The <see cref="T:System.AppDomain"/> for which this event is raised.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement">
            <summary>
            Represents a try statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.TryBlockStatementContextID">
            <summary>
            Gets the context ID for a try block statement AST node.
            </summary>
            <value>The context ID for a try block statement AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.CatchClauseContextID">
            <summary>
            Gets the context ID for a catch clause AST node.
            </summary>
            <value>The context ID for a catch clause AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.FinallyBlockStatementContextID">
            <summary>
            Gets the context ID for a finally block statement AST node.
            </summary>
            <value>The context ID for a finally block statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>TryStatement</c> class. 
            </summary>
            <param name="tryBlock">The try <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="finallyBlock">The finally <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the statement.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.CatchClauses">
            <summary>
            Gets the collection of catch clauses.
            </summary>
            <value>The collection of catch clauses.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.FinallyBlock">
            <summary>
            Gets or sets the finally <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.
            </summary>
            <value>The finally <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TryStatement.TryBlock">
            <summary>
            Gets or sets the try <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.
            </summary>
            <value>The try <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement">
            <summary>
            Represents a switch statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.SectionContextID">
            <summary>
            Gets the context ID for a section AST node.
            </summary>
            <value>The context ID for a section AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>SwitchStatement</c> class. 
            </summary>
            <param name="expression">The switch <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.Expression">
            <summary>
            Gets or sets the switch <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.Expression"/>.
            </summary>
            <value>The switch <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchStatement.Sections">
            <summary>
            Gets the collection of switch sections.
            </summary>
            <value>The collection of switch sections.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement">
            <summary>
            Represents a for/each statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.VariableDeclarationContextID">
            <summary>
            Gets the context ID for a variable declaration AST node.
            </summary>
            <value>The context ID for a variable declaration AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.#ctor(ActiproSoftware.SyntaxEditor.IAstNode,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ForEachStatement</c> class. 
            </summary>
            <param name="variableDeclaration">The variable declaration.</param>
            <param name="expression">The iteration <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.Expression"/>.</param>
            <param name="statement">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Statement"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.Expression">
            <summary>
            Gets or sets the iteration <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.Expression"/>.
            </summary>
            <value>The iteration <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ForEachStatement.VariableDeclaration">
            <summary>
            Gets or sets the variable declaration.
            </summary>
            <value>The variable declaration.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration">
            <summary>
            Represents a method declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ImplementedMemberContextID">
            <summary>
            Gets the context ID for an implemented member AST node.
            </summary>
            <value>The context ID for an implemented member type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.GenericTypeArgumentContextID">
            <summary>
            Gets the context ID for a generic type argument AST node.
            </summary>
            <value>The context ID for a generic type argument AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.StatementContextID">
            <summary>
            Gets the context ID for a statement AST node.
            </summary>
            <value>The context ID for a statement AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>MethodDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.GenericTypeArguments">
            <summary>
            Gets the collection of generic type arguments.
            </summary>
            <value>The collection of generic type arguments.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ImplementedMembers">
            <summary>
            Gets the collection of implemented members.
            </summary>
            <value>The collection of implemented members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration.Statements">
            <summary>
            Gets the collection of statements.
            </summary>
            <value>The collection of statements.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType">
            <summary>
            Specifies the type of an operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.None">
            <summary>
            No valid operator type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Addition">
            <summary>
            An addition operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Subtraction">
            <summary>
            A subtraction operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Multiply">
            <summary>
            A multiplication operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Division">
            <summary>
            A division operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Modulus">
            <summary>
            A modulus operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.BitwiseAnd">
            <summary>
            A bitwise AND operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.BitwiseOr">
            <summary>
            A bitwise OR operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.ExclusiveOr">
            <summary>
            A bitwise XOR operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Negation">
            <summary>
            A negation operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.OnesComplement">
            <summary>
            A bitwise complement operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.LessThan">
            <summary>
            A less than operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.GreaterThan">
            <summary>
            A greater than operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.PreIncrement">
            <summary>
            An pre-increment operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.PreDecrement">
            <summary>
            An pre-decrement operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.PostIncrement">
            <summary>
            An post-increment operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.PostDecrement">
            <summary>
            An post-decrement operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.LeftShift">
            <summary>
            A left shift operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.RightShift">
            <summary>
            A right shift operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Equality">
            <summary>
            An equality operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Inequality">
            <summary>
            An inequality operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.LessThanOrEqual">
            <summary>
            A less than or equal operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.GreaterThanOrEqual">
            <summary>
            A greater than or equal operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.True">
            <summary>
            A true operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.False">
            <summary>
            A false operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Implicit">
            <summary>
            An implicit cast operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Explicit">
            <summary>
            An explicit cast operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.ConditionalOr">
            <summary>
            A conditional OR binary operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.ConditionalAnd">
            <summary>
            A conditional AND binary operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.PointerIndirection">
            <summary>
            A pointer indirection operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.AddressOf">
            <summary>
            An address-of operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.NullCoalescing">
            <summary>
            A null coalescing operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.ReferenceEquality">
            <summary>
            A reference equality operator (Is).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.ReferenceInequality">
            <summary>
            A reference inequality operator (IsNot).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Like">
            <summary>
            A like operator (Like).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.StringConcatenation">
            <summary>
            A concatenation operator (&amp;).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.IntegerDivision">
            <summary>
            An integer division operator (\).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Exponentiation">
            <summary>
            An exponentiation operator (^).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.Mid">
            <summary>
            A mid-assignment operator.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType.XmlDescendant">
            <summary>
            An XML descendant operator (...).
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType">
            <summary>
            Specifies the type of a literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.None">
            <summary>
            No valid literal type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.True">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.False">
            <summary>
            False.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.DecimalInteger">
            <summary>
            A decimal integer number.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.HexadecimalInteger">
            <summary>
            A hexidecimal integer number.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.OctalInteger">
            <summary>
            An octal integer number.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.Real">
            <summary>
            A real number.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.Character">
            <summary>
            A character.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.VerbatimString">
            <summary>
            A verbatim string.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.Date">
            <summary>
            A <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.Xml">
            <summary>
            An XML literal.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LiteralType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType">
            <summary>
            Specifies the type of constructor initializer.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType.None">
            <summary>
            No constructor initializer.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType.This">
            <summary>
            This reference.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ConstructorInitializerType.Base">
            <summary>
            Base reference.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType">
            <summary>
            Represents a generic .NET type that has been constructed and wraps the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> that is its definition.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType,System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>ConstructedGenericType</c> class.
            </summary>
            <param name="genericDefinitionType">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> specifying the generic type definition to wrap.</param>
            <param name="genericTypeArguments">The <see cref="T:System.Collections.ICollection"/> of generic type arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Equals(System.Object)">
            <summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary>
            <param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param>
            <returns>
            <c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetInterfaces">
            <summary>
            Returns the array of interfaces that this type implements.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> array specifying the interfaces that this type implements.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetMember(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets a member defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired member.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>A member defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetMembers">
            <summary>
            Gets all the members defined in the type, which does not include inherited members.
            </summary>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetMembers(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType[],System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags)">
            <summary>
            Gets all the members defined in the type with the specified name, which does not include inherited members.
            </summary>
            <param name="contextInheritanceHierarchy">
            An optional array of the inheritance hierarchy of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            The first array item contains the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            Each following item indicates a base <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> of the context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </param>
            <param name="name">The name of the desired members.</param>
            <param name="flags">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomBindingFlags"/> to match.</param>
            <returns>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomMember"/> array specifying all the members defined in the type with the specified name.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GetSourceKeys">
            <summary>
            Returns the string-based keys that identify the sources of the type, which typically are filenames.
            </summary>
            <returns>The string-based keys that identify the sources of the type, which typically are filenames.</returns>
            <remarks>
            Types defined in assemblies will return <see langword="null"/>.  
            In this case, the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.ProjectContent"/> property can be used to determine what assembly defines the type.
            <para>
            Normally only one source key is returned, however more than one may be returned if the type is a partial type.
            A <see langword="null"/> entry in the string array will be made if the type has no parent <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>
            or if the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> has no <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit.SourceKey"/> assigned.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Resolve(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Resolves the type reference into an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/>.
            </summary>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use for resolving type references.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> to which the type reference was resolved, if any.
            </returns>
            <remarks>This method should always be called before any other properties are accessed.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GenericDefinitionType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> specifying the generic type definition that is wrapped.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomType"/> specifying the generic type definition that is wrapped.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.AccessModifiers">
            <summary>
            Gets the access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> values.
            </summary>
            <value>The access-related <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> values.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.ArrayRanks">
            <summary>
            Gets the array dimension ranks.
            </summary>
            <value>The array dimension ranks.</value>
            <remarks>
            <c>MyClass</c> is <see langword="null"/>.
            <c>MyClass[]</c> is <c>{ 1 }</c>.
            <c>MyClass[,]</c> is <c>{ 2 }</c>.
            <c>MyClass[][]</c> is <c>{ 1, 1 }</c>.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.AssemblyHint">
            <summary>
            Gets the name of the assembly that defines the referenced type, if known.
            </summary>
            <value>The name of the assembly that defines the referenced type, if known.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.DeclaringType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the declaring type, if this is a nested type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic type definition.
            </summary>
            <value>The type arguments if this is a generic type definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.GenericTypeParameterConstraints">
            <summary>
            Gets the type contraints if this is a generic type parameter.
            </summary>
            <value>The type contraints if this is a generic type parameter.</value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.HasGenericParameterDefaultConstructorConstraint">
            <summary>
            Gets whether the type has a generic parameter default constructor constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter default constructor constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.HasGenericParameterNotNullableValueTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter not-nullable value type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter not-nullable value type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.HasGenericParameterReferenceTypeConstraint">
            <summary>
            Gets whether the type has a generic parameter reference type constraint.
            </summary>
            <value>
            <c>true</c> if the type has a generic parameter reference type constraint; otherwise, <c>false</c>.
            </value>
            <remarks>This property is only used when the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericParameter"/> property is set to <c>true</c>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericParameter">
            <summary>
            Gets whether the type is a generic type parameter.
            </summary>
            <value>
            <c>true</c> if the type is a generic type parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericType">
            <summary>
            Gets whether the type is a generic type.
            </summary>
            <value>
            <c>true</c> if the type is a generic type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsGenericTypeDefinition">
            <summary>
            Gets whether the type is a generic type definition, from which other generic types can be constructed.
            </summary>
            <value>
            <c>true</c> if the type is a generic type definition, from which other generic types can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.IsNested">
            <summary>
            Gets whether the type is a nested type.
            </summary>
            <value>
            <c>true</c> if the type is a nested type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers">
            <summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> for the type.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Modifiers"/> for the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Namespace">
            <summary>
            Gets the name of the namespace that contains the type.
            </summary>
            <value>The name of the namespace that contains the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.PointerLevel">
            <summary>
            Gets the unsafe pointer level of the type reference.
            </summary>
            <value>The unsafe pointer level of the type reference.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.ProjectContent">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> that declares the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.RawFullName">
            <summary>
            Gets the raw, unresolved full name of the type.
            </summary>
            <value>The raw, unresolved full name of the type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.ConstructedGenericType.Type">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeType"/> that indicates the type of type that this object represents.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration">
            <summary>
            Represents a standard module declaration.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>StandardModuleDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.StandardModuleDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement">
            <summary>
            Represents an unstructured error resume next statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement.LabelNameContextID">
            <summary>
            Gets the context ID for a label name AST node.
            </summary>
            <value>The context ID for a label name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UnstructuredErrorResumeNextStatement</c> class. 
            </summary>
            <param name="labelName">An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement.LabelName">
            <summary>
            Gets or sets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> indicating the label name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UnstructuredErrorResumeNextStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement">
            <summary>
            Represents an array redim statement.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement.RedimClauseContextID">
            <summary>
            Gets the context ID for a redim clause AST node.
            </summary>
            <value>The context ID for a redim clause AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement.#ctor">
            <summary>
            Initializes a new instance of the <c>ArrayRedimStatement</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement.Clauses">
            <summary>
            Gets the collection of redim clauses.
            </summary>
            <value>The collection of redim clauses.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ArrayRedimStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources">
            <summary>
            Provides a class for accessing the resources of an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources.#ctor">
            <summary>
            Initializes a new instance of the <c>Resources</c> class.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.Resources.GetImage(ActiproSoftware.Products.SyntaxEditor.Addons.DotNet.ImageResource)">
            <summary>
            Gets a <see cref="T:System.Drawing.Image"/> from the resources.
            </summary>
            <param name="image">The type of the image resource to get.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> resource that was retrieved.</returns>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository">
            <summary>
            Represents a code repository for .NET assemblies that can be shared among multiple "projects" that are loaded.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Add(System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Adds an assembly to the code repository.
            </summary>
            <param name="assemblyName">The full name, or path, of the assembly to add.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use.</param>
            <returns>
            The full assembly name of the assembly that was loaded; otherwise, <see langword="null"/>.
            </returns>
            <remarks>If the assembly already exists, the reference count to the assembly is increased.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Add(System.Reflection.Assembly,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Adds an assembly to the code repository.
            </summary>
            <param name="assembly">The assembly to add.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use.</param>
            <remarks>If the assembly already exists, the reference count to the assembly is increased.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Add(System.Reflection.Assembly,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Adds an assembly to the code repository, using the specified full name.
            </summary>
            <param name="assembly">The assembly to add.</param>
            <param name="assemblyFullName">The full name for the assembly, used as a key for the reflection data.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use.</param>
            <remarks>If the assembly already exists, the reference count to the assembly is increased.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Clear">
            <summary>
            Removes all assemblies from the code repository.
            </summary>
            <remarks>
            All assemblies are removed from the code repository, regardless of their reference counts.
            Only call this method when closing out an application.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.GetProjectContent(System.String)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> in the code repository with the specified assembly full name.
            </summary>
            <param name="assemblyFullName">The full name of the assembly to return.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> in the code repository with the specified assembly full name.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.GetProjectContentWithPartialName(System.String)">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> in the code repository with the specified assembly partial name.
            </summary>
            <param name="assemblyPartialName">The partial name of the assembly to return.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> in the code repository with the specified assembly partial name.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Refresh(System.Reflection.Assembly,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Refreshes the code repository entry for a previously-loaded assembly, 
            which is useful for calling once an assembly is rebuilt with the exact same name and version information.
            </summary>
            <param name="assembly">The assembly to refresh.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use.</param>
            <returns>
            <c>true</c> if the assembly is refreshed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The assembly is only refreshed if there is already an assembly loaded for the same assembly full name.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Refresh(System.Reflection.Assembly,System.String,ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Refreshes the code repository entry for a previously-loaded assembly, 
            which is useful for calling once an assembly is rebuilt with the exact same name and version information.
            </summary>
            <param name="assembly">The assembly to refresh.</param>
            <param name="assemblyFullName">The full name for the assembly, used as a key for the reflection data.</param>
            <param name="projectResolver">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver"/> to use.</param>
            <returns>
            <c>true</c> if the assembly is refreshed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The assembly is only refreshed if there is already an assembly loaded for the same assembly full name.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.Remove(System.String)">
            <summary>
            Removes an assembly from the code repository.
            </summary>
            <param name="assemblyFullName">The full name of the assembly to remove.</param>
            <returns>
            <c>true</c> if the assembly is removed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The assembly is only removed if the reference count is zero.
            </remarks>
        </member>
        <member name="E:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AppDomainCreated">
            <summary>
            Occurs immediately after an <see cref="T:System.AppDomain"/> is loaded, allowing for handling of additional resolving.
            </summary>
            <eventdata>
            The event handler receives an argument of type <c>AppDomainEventArgs</c> containing data related to this event.
            </eventdata>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AssemblyFullNames">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> of assembly full names that are loaded.
            </summary>
            <value>The <see cref="T:System.Collections.ICollection"/> of assembly full names that are loaded.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContents">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> that contains the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> objects that are currently registered for reflection.
            </summary>
            <value>The <see cref="T:System.Collections.ICollection"/> that contains the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IProjectContent"/> objects that are currently registered for reflection.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AssemblyCodeRepositoryOptions">
            <summary>
            Represents options for loading an assembly in a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository"/>.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AssemblyCodeRepositoryOptions.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DotNetProjectResolver)">
            <summary>
            Initializes a new instance of the <c>AssemblyCodeRepositoryOptions</c> class.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentInfo">
            <summary>
            Stores data about a project content reference.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader">
            <summary>
            Loads an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> from an assembly.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.AppDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Occurs when an <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.Assembly"/> must be resolved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">An <c>IndicatorEventArgs</c> that contains the event data.</param>
            <returns>The resolved assembly.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.CreateProjectContent(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AssemblyCodeRepositoryOptions,System.ResolveEventHandler)">
            <summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> for the loaded assembly.
            </summary>
            <param name="options">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.AssemblyCodeRepositoryOptions"/> to use.</param>
            <param name="resolveDelegate">The custom <see cref="T:System.ResolveEventHandler"/> to use, if any.</param>
            <returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyProjectContent"/> that was created.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.LoadAssembly(System.String)">
            <summary>
            Loads an assembly from an assembly full name or path.
            </summary>
            <param name="assemblyName">The full name, or path, of the assembly to add.</param>
            <returns>
            <c>true</c> if an assembly was loaded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.LoadAssemblyCore(System.String)">
            <summary>
            Loads an assembly from an assembly full name or path.
            </summary>
            <param name="assemblyName">The full name, or path, of the assembly to add.</param>
            <returns>The assembly that was loaded, if any.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.UpconvertAssemblyName(System.String)">
            <summary>
            Upconverts the specified assembly name to a newer version.
            </summary>
            <param name="assemblyName">The assembly name to convert.</param>
            <returns>The updated assembly name.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.Assembly">
            <summary>
            Gets or sets the assembly that is loaded.
            </summary>
            <value>The assembly that is loaded.</value>
            <remarks>This property should only be used if using the loader in the main <see cref="T:System.AppDomain"/>.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.AssemblyFullName">
            <summary>
            Gets the full name of the assembly.
            </summary>
            <value>The full name of the assembly.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.AssemblyCodeRepository.ProjectContentLoader.AssemblyLocation">
            <summary>
            Gets the location of the assembly.
            </summary>
            <value>The location of the assembly.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration">
            <summary>
            Provides the base class for a parameter declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.AttributeSectionContextID">
            <summary>
            Gets the context ID for an attribute section AST node.
            </summary>
            <value>The context ID for an attribute section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.ParameterTypeContextID">
            <summary>
            Gets the context ID for a parameter type AST node.
            </summary>
            <value>The context ID for a parameter type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.InitializerContextID">
            <summary>
            Gets the context ID for an initializer AST node.
            </summary>
            <value>The context ID for an initializer AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers,System.String)">
            <summary>
            Initializes a new instance of the <c>ParameterDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomParameter#CloneForType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference)">
            <summary>
            Close the parameter but assigns it the specified alternate <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/>.
            </summary>
            <param name="parameterType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> indicating the type.</param>
            <returns>The cloned parameter.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomParameter#ParameterType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> of the parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.AttributeSections">
            <summary>
            Gets the collection of attribute sections.
            </summary>
            <value>The collection of attribute sections.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.Initializer">
            <summary>
            Gets or sets the initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for an optional parameter.
            </summary>
            <value>The initializer <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for an optional parameter.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.IsByReference">
            <summary>
            Gets whether the parameter is a by-reference parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is a by-reference parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.IsOptional">
            <summary>
            Gets whether the parameter is an optional parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is an optional parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.IsOutput">
            <summary>
            Gets whether the parameter is an output parameter.
            </summary>
            <value>
            <c>true</c> if the parameter is an output parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.IsParameterArray">
            <summary>
            Gets whether the parameter is a parameter array.
            </summary>
            <value>
            <c>true</c> if the parameter is a parameter array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterDeclaration.ParameterType">
            <summary>
            Gets or sets the parameter type.
            </summary>
            <value>The parameter type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator">
            <summary>
            Represents a fixed-size buffer declarator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.NameContextID">
            <summary>
            Gets the context ID for a name AST node.
            </summary>
            <value>The context ID for a name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.SizeExpressionContextID">
            <summary>
            Gets the context ID for a size expression AST node.
            </summary>
            <value>The context ID for a size expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>FixedSizeBufferDeclarator</c> class. 
            </summary>
            <param name="returnType">The return type.</param>
            <param name="name">The name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#DeclaringType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that declares the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#GenericTypeArguments">
            <summary>
            Gets the type arguments if this is a generic method definition.
            </summary>
            <value>The type arguments if this is a generic method definition.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsEditorBrowsableNever">
            <summary>
            Gets whether the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
            <value>
            <c>true</c> if the type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsExtension">
            <summary>
            Gets whether the type is marked with an <c>ExtensionAttribute</c>.
            </summary>
            <value>
            <c>true</c> if the type is marked with an <c>ExtensionAttribute</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethod">
            <summary>
            Gets whether the member is a generic method.
            </summary>
            <value>
            <c>true</c> if the method is a generic method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#IsGenericMethodDefinition">
            <summary>
            Gets whether the member is a generic method definition, from which other generic methods can be constructed.
            </summary>
            <value>
            <c>true</c> if the method is a generic method definition, from which other generic methods can be constructed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#MemberType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType"/> that indicates the type of member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Name">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#Parameters">
            <summary>
            Gets the array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.
            </summary>
            <value>The array of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomParameter"/> parameters for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomMember#ReturnType">
            <summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.
            </summary>
            <value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the type that is returned by the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.AccessModifiers">
            <summary>
            Gets the access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.Modifiers"/>.
            </summary>
            <value>The access-related values of <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.Modifiers"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.DocumentationProvider">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomDocumentationProvider"/> for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.IsStatic">
            <summary>
            Gets whether the member is static.
            </summary>
            <value>
            <c>true</c> if the member is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.Modifiers">
            <summary>
            Gets the modifiers for the member.
            </summary>
            <value>The modifiers for the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.Name">
            <summary>
            Gets or sets the name of the namespace.
            </summary>
            <value>The name of the namespace.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.FixedSizeBufferDeclarator.SizeExpression">
            <summary>
            Gets or sets the size <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The size <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection">
            <summary>
            Represents a section of extern alias directives for a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.DirectiveContextID">
            <summary>
            Gets the context ID for a directive AST node.
            </summary>
            <value>The context ID for a directive AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.Directives">
            <summary>
            Gets the collection of extern alias directives.
            </summary>
            <value>The collection of extern alias directives.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirectiveSection.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName">
            <summary>
            Represents a simple name.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName.#ctor(System.String,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>SimpleName</c> class. 
            </summary>
            <param name="name">The name.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SimpleName.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression">
            <summary>
            Represents a parenthesized expression.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ParenthesizedExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the checked modifier.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParenthesizedExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression">
            <summary>
            Represents an assignment expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.LeftExpressionContextID">
            <summary>
            Gets the context ID for a left expression AST node.
            </summary>
            <value>The context ID for a left expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.RightExpressionContextID">
            <summary>
            Gets the context ID for a right expression AST node.
            </summary>
            <value>The context ID for a right expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.StartIndexExpressionContextID">
            <summary>
            Gets the context ID for a start index expression AST node.
            Used in Visual Basic only.
            </summary>
            <value>The context ID for a start index expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.LengthExpressionContextID">
            <summary>
            Gets the context ID for a length expression AST node.
            Used in Visual Basic only.
            </summary>
            <value>The context ID for a length expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.OperatorType,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>AssignmentExpression</c> class. 
            </summary>
            <param name="operatorType">An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.OperatorType"/> indicating the binary operator type to apply, if any.</param>
            <param name="leftExpression">The left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unary operator.</param>
            <param name="rightExpression">The right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the unary operator.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.LeftExpression">
            <summary>
            Gets or sets the left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.
            </summary>
            <value>The left <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.LengthExpression">
            <summary>
            Gets or sets the length <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the target.
            Used in Visual Basic only.
            </summary>
            <value>The length <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the target.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.OperatorType">
            <summary>
            Gets or sets an <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.OperatorType"/> indicating the binary operator type to apply, if any.
            </summary>
            <value>An <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.OperatorType"/> indicating the binary operator type to apply, if any.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.RightExpression">
            <summary>
            Gets or sets the right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.
            </summary>
            <value>The right <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> affected by the binary operator.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AssignmentExpression.StartIndexExpression">
            <summary>
            Gets or sets the start index <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the target.
            Used in Visual Basic only.
            </summary>
            <value>The start index <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> for the target.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType">
            <summary>
            Specifies the type of an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AddressOfExpression">
            <summary>
            An address of expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AnonymousMethodExpression">
            <summary>
            An anonymous method expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ArgumentExpression">
            <summary>
            An argument expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AssignmentExpression">
            <summary>
            An assignment expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.BaseAccess">
            <summary>
            A base access node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.BinaryExpression">
            <summary>
            A binary expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CastExpression">
            <summary>
            A cast expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CheckedExpression">
            <summary>
            A checked expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ClassAccess">
            <summary>
            A class access node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ConditionalExpression">
            <summary>
            A conditional expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DefaultValueExpression">
            <summary>
            A default value expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DictionaryAccessExpression">
            <summary>
            A dictionary access expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.GetXmlNamespaceExpression">
            <summary>
            A get XML namespace expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InvocationExpression">
            <summary>
            An invocation expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.IsTypeOfExpression">
            <summary>
            An is type of expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LambdaExpression">
            <summary>
            A lambda expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LiteralExpression">
            <summary>
            A literal expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.MemberAccess">
            <summary>
            A member access node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ObjectCollectionInitializerExpression">
            <summary>
            An object or collection initializer expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ObjectCreationExpression">
            <summary>
            An object creation expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ParenthesizedExpression">
            <summary>
            A parenthesized expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.PointerMemberAccess">
            <summary>
            A pointer member access node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SimpleName">
            <summary>
            A simple name node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SizeOfExpression">
            <summary>
            A size of expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.StackAllocInitializer">
            <summary>
            A stack alloc initializer node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ThisAccess">
            <summary>
            A this access node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TryCastExpression">
            <summary>
            A try cast expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TypeOfExpression">
            <summary>
            A type of expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TypeReferenceExpression">
            <summary>
            A type reference expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UnaryExpression">
            <summary>
            An unary expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UncheckedExpression">
            <summary>
            An unchecked expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ArrayRedimClause">
            <summary>
            An array redim clause node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.Attribute">
            <summary>
            An attribute node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AttributeArgument">
            <summary>
            An attribute argument node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AttributeSection">
            <summary>
            An attribute section node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.Comment">
            <summary>
            A comment node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CompilationUnit">
            <summary>
            A compilation unit node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DocumentationComment">
            <summary>
            A documentation comment node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.EventMemberSpecifier">
            <summary>
            An event member specifier node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ExternAliasDirective">
            <summary>
            An extern alias directive node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ExternAliasDirectiveSection">
            <summary>
            An extern alias directive section node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.FixedSizeBufferDeclarator">
            <summary>
            A fixed size buffer declarator node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InterfaceAccessor">
            <summary>
            An interface accessor node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.MemberSpecifier">
            <summary>
            A member specifier node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.NamespaceDeclaration">
            <summary>
            A namespace declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ParameterDeclaration">
            <summary>
            A parameter declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.QualifiedIdentifier">
            <summary>
            A qualified identifier node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.RegionPreProcessorDirective">
            <summary>
            A region pre-processor directive node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SingleLineComment">
            <summary>
            A single-line comment node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TypeReference">
            <summary>
            A type reference node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UsingDirective">
            <summary>
            A using directive node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UsingDirectiveSection">
            <summary>
            A using directive section node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.VariableDeclarator">
            <summary>
            A variable declarator node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AccessorDeclaration">
            <summary>
            An accessor declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ConstructorDeclaration">
            <summary>
            A constructor declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DestructorDeclaration">
            <summary>
            A destructor declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.EnumerationMemberDeclaration">
            <summary>
            An enumeration member declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.EventDeclaration">
            <summary>
            An event declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.FieldDeclaration">
            <summary>
            A field declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.FixedSizeBufferDeclaration">
            <summary>
            A fixed size buffer declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InterfaceEventDeclaration">
            <summary>
            An interface event declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InterfaceMethodDeclaration">
            <summary>
            An interface method declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InterfacePropertyDeclaration">
            <summary>
            An interface property declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.MethodDeclaration">
            <summary>
            A method declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.OperatorDeclaration">
            <summary>
            An operator declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.PropertyDeclaration">
            <summary>
            A property declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.AggregateQueryOperator">
            <summary>
            A query expression aggregate operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CollectionRangeVariableDeclaration">
            <summary>
            A query expression collection range variable declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DistinctQueryOperator">
            <summary>
            A query expression distinct operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.FromQueryOperator">
            <summary>
            A query expression from operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.GroupQueryOperator">
            <summary>
            A query expression group operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.JoinCondition">
            <summary>
            A query expression join condition.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.JoinQueryOperator">
            <summary>
            A query expression join operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LetQueryOperator">
            <summary>
            A query expression let operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.OrderByQueryOperator">
            <summary>
            A query expression order-by operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.Ordering">
            <summary>
            A query expression ordering.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.QueryExpression">
            <summary>
            A query expression query expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SelectQueryOperator">
            <summary>
            A query expression select operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SkipQueryOperator">
            <summary>
            A query expression skip operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SkipWhileQueryOperator">
            <summary>
            A query expression skip while operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TakeQueryOperator">
            <summary>
            A query expression take operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TakeWhileQueryOperator">
            <summary>
            A query expression take while operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.WhereQueryOperator">
            <summary>
            A query expression where operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ArrayEraseStatement">
            <summary>
            An array erase statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ArrayRedimStatement">
            <summary>
            An array redim statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.BlockStatement">
            <summary>
            A block statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.BranchStatement">
            <summary>
            A branch statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.BreakStatement">
            <summary>
            A break statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CatchClause">
            <summary>
            A catch clause node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.CheckedStatement">
            <summary>
            A checked statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ContinueStatement">
            <summary>
            A continue statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DoStatement">
            <summary>
            A do statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ElseIfSection">
            <summary>
            An else-if section node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.EmptyStatement">
            <summary>
            An empty statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ExitStatement">
            <summary>
            An exit statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.FixedStatement">
            <summary>
            A fixed statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ForEachStatement">
            <summary>
            A for each statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ForStatement">
            <summary>
            A for statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.GoToStatement">
            <summary>
            A go to statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.IfStatement">
            <summary>
            An if statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LabeledStatement">
            <summary>
            A labeled statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LocalVariableDeclaration">
            <summary>
            A local variable declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.LockStatement">
            <summary>
            A lock statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ModifyEventHandlerStatement">
            <summary>
            A modify event handler statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.RaiseEventStatement">
            <summary>
            A raise event statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ReturnStatement">
            <summary>
            A return statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.StatementExpression">
            <summary>
            A statement expression node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SwitchLabel">
            <summary>
            A switch label node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SwitchSection">
            <summary>
            A switch section node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.SwitchStatement">
            <summary>
            A switch statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ThrowStatement">
            <summary>
            A throw statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.TryStatement">
            <summary>
            A try statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UncheckedStatement">
            <summary>
            An unchecked statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UnsafeStatement">
            <summary>
            An unsafe statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UnstructuredErrorErrorStatement">
            <summary>
            An unstructured error error statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UnstructuredErrorOnErrorStatement">
            <summary>
            An unstructured error on error statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UnstructuredErrorResumeNextStatement">
            <summary>
            An unstructured error resume next statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.UsingStatement">
            <summary>
            A using statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.WhileStatement">
            <summary>
            A while statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.WithStatement">
            <summary>
            A with statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.YieldStatement">
            <summary>
            A yield statement node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.ClassDeclaration">
            <summary>
            A class declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.DelegateDeclaration">
            <summary>
            A delegate declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.EnumerationDeclaration">
            <summary>
            An enumeration declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.InterfaceDeclaration">
            <summary>
            An interface declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.StandardModuleDeclaration">
            <summary>
            A standard module declaration node.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType.StructureDeclaration">
            <summary>
            A structure declaration node.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator">
            <summary>
            Represents a query expression let operator.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator.VariableDeclaratorContextID">
            <summary>
            Gets the context ID for the variable declarator AST node.
            </summary>
            <value>The context ID for the variable declarator AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator.#ctor">
            <summary>
            Initializes a new instance of the <c>LetQueryOperator</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.LetQueryOperator.VariableDeclarators">
            <summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that declare the variables for the let operator.
            </summary>
            <value>The collection <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.VariableDeclarator"/> nodes that declare the variables for the let operator.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition">
            <summary>
            Represents a query expression collection range variable.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.LeftConditionExpressionContextID">
            <summary>
            Gets the context ID for the left condition expression AST node.
            </summary>
            <value>The context ID for the left condition expression AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.RightConditionExpressionContextID">
            <summary>
            Gets the context ID for the right condition expression AST node.
            </summary>
            <value>The context ID for the right condition expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.#ctor">
            <summary>
            Initializes a new instance of the <c>JoinCondition</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.LeftConditionExpression">
            <summary>
            Gets or sets the left condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The left condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.JoinCondition.RightConditionExpression">
            <summary>
            Gets or sets the right condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.
            </summary>
            <value>The right condition <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier">
            <summary>
            Represents an event member specifier.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.TargetContextID">
            <summary>
            Gets the context ID for the target AST node.
            </summary>
            <value>The context ID for the target AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.MemberNameContextID">
            <summary>
            Gets the context ID for a member name AST node.
            </summary>
            <value>The context ID for a member name AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>EventMemberSpecifier</c> class. 
            </summary>
            <param name="target">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that specifies the target object.</param>
            <param name="memberName">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.MemberName">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that contains the name of the member.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.EventMemberSpecifier.Target">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that specifies the target object.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier"/> that specifies the target object.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration">
            <summary>
            Represents a delegate declaration.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ReturnTypeContextID">
            <summary>
            Gets the context ID for a return type AST node.
            </summary>
            <value>The context ID for a return type AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ParameterContextID">
            <summary>
            Gets the context ID for a parameter AST node.
            </summary>
            <value>The context ID for a parameter AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>DelegateDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#GetConstructorAccessModifiers">
            <summary>
            Returns the access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.
            </summary>
            <returns>The access <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers"/> of the type's constructors.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.CreateBeginInvokeMethod">
            <summary>
            Creates a member that represents the <c>BeginInvoke</c> method.
            </summary>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration"/> that represents the invoke method.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.CreateEndInvokeMethod">
            <summary>
            Creates a member that represents the <c>EndInvoke</c> method.
            </summary>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration"/> that represents the invoke method.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.CreateInvokeMethod">
            <summary>
            Creates a member that represents the <c>Invoke</c> method.
            </summary>
            <returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MethodDeclaration"/> that represents the invoke method.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.GenerateInvokeMembers">
            <summary>
            Generates the invoke members.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ActiproSoftware#SyntaxEditor#Addons#DotNet#Dom#IDomType#BaseType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.IDomTypeReference"/> to the base type.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.Parameters">
            <summary>
            Gets the collection of parameters.
            </summary>
            <value>The collection of parameters.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DelegateDeclaration.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
            <value>The return type.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel">
            <summary>
            Represents a switch statement section label.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>SwitchLabel</c> class. 
            </summary>
            <param name="expression">The lock <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.Expression">
            <summary>
            Gets or sets the constant <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.Expression"/>.
            </summary>
            <value>The constant <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.SwitchLabel.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration">
            <summary>
            Represents a namespace declaration block.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NameContextID">
            <summary>
            Gets the context ID for a namespace name AST node.
            </summary>
            <value>The context ID for a namespace name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.UsingDirectiveSectionContextID">
            <summary>
            Gets the context ID for a using directive section AST node.
            </summary>
            <value>The context ID for a using directive section AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NamespaceMemberContextID">
            <summary>
            Gets the context ID for a namespace member AST node.
            </summary>
            <value>The context ID for a namespace member AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ToString">
            <summary>
            Converts the object to a <c>String</c>.
            </summary>
            <returns>
            A string whose value represents this object.
            </returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.BlockEndOffset">
            <summary>
            Gets or sets the end character offset of the end block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The end character offset of the end block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the end character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.BlockStartOffset">
            <summary>
            Gets or sets the start character offset of the start block delimiter in the original source code that generated the AST node.
            </summary>
            <value>The start character offset of the start block delimiter in the original source code that generated the AST node.</value>
            <remarks>
            This value may be <c>-1</c> if there is no source code information for the start character offset.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.Comments">
            <summary>
            Gets the collection of comments that appear at the end of the node.
            </summary>
            <value>The collection of comments that appear at the end of the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.FullName">
            <summary>
            Gets the full name of the namespace.
            </summary>
            <value>The full name of the namespace.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.Name">
            <summary>
            Gets or sets the name of the namespace.
            </summary>
            <value>The name of the namespace.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NamespaceMembers">
            <summary>
            Gets the collection of namespaces and members.
            </summary>
            <value>The collection of namespaces and members.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NavigationOffset">
            <summary>
            Gets the character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.
            </summary>
            <value>The character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NodeCategory">
            <summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.
            </summary>
            <value>An <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeCategory"/> that indicates the generalized type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.NamespaceDeclaration.UsingDirectives">
            <summary>
            Gets or sets the using directives block.
            </summary>
            <value>The using directives block.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective">
            <summary>
            Represents an extern alias directive for a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.#ctor(System.String,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>ExternAliasDirective</c> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.Comments">
            <summary>
            Gets the collection of comments that appear before the node.
            </summary>
            <value>The collection of comments that appear before the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ExternAliasDirective.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering">
            <summary>
            Represents a query expression ordering.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.ExpressionContextID">
            <summary>
            Gets the context ID for the expression AST node.
            </summary>
            <value>The context ID for the expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.#ctor">
            <summary>
            Initializes a new instance of the <c>Ordering</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.Direction">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.Expression">
            <summary>
            Gets or sets the condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.Expression"/> by which to order.
            </summary>
            <value>The condition <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.Expression"/> by which to order.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Ordering.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType">
            <summary>
            Specifies the type of a member access.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType.Default">
            <summary>
            The standard type of access.  When used on XML elements, this also indicates element access.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType.XmlAttribute">
            <summary>
            XML attribute access.  In VB: <c>element.@attributename</c>
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.MemberAccessType.XmlDescendent">
            <summary>
            XML descendent access.  In VB: <c>element...&lt;childelement&gt;</c>
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType">
            <summary>
            Represents a .NET member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Custom">
            <summary>
            The member is a custom member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Constant">
            <summary>
            The member is a constant member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Constructor">
            <summary>
            The member is a constructor member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Event">
            <summary>
            The member is an event member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Field">
            <summary>
            The member is a field member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Method">
            <summary>
            The member is a method member type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomMemberType.Property">
            <summary>
            The member is a property member type.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration">
            <summary>
            Represents a class declaration block.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Modifiers,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QualifiedIdentifier)">
            <summary>
            Initializes a new instance of the <c>ClassDeclaration</c> class. 
            </summary>
            <param name="modifiers">The modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ClassDeclaration.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement">
            <summary>
            Represents a yield statement.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.ExpressionContextID">
            <summary>
            Gets the context ID for an expression AST node.
            </summary>
            <value>The context ID for an expression AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>YieldStatement</c> class. 
            </summary>
            <param name="expression">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.Expression"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.Expression">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.Expression"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.Expression"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.YieldStatement.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList">
            <summary>
            Represents a control that displays two drop-down lists, one for .NET types and another for .NET members within the selected type.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.#ctor">
            <summary>
            Initializes a new instance of the <c>TypeMemberDropDownList</c> class.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.memberDropDownList_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Occurs when an item needs to be drawn.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">A <c>DrawItemEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.memberDropDownList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the selected index is changed.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.memberDropDownList_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Occurs when a selected change is committed.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.syntaxEditor_DocumentChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the document changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.syntaxEditor_DocumentSemanticParseDataChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the semantic parser data changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.syntaxEditor_DocumentSyntaxLanguageLoaded(System.Object,ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)">
            <summary>
            Occurs when the document's syntax language changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.syntaxEditor_SelectionChanged(System.Object,ActiproSoftware.SyntaxEditor.SelectionEventArgs)">
            <summary>
            Occurs when the selection changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.typeDropDownList_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Occurs when an item needs to be drawn.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">A <c>DrawItemEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.typeDropDownList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the selected index is changed.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.typeDropDownList_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Occurs when a selected change is committed.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.BindToType(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Rebinds the member drop-down to the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration"/>.
            </summary>
            <param name="typeDeclaration">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeDeclaration"/> to examine.</param>
            <param name="contextNode">The context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to select.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.DrawItem(System.Windows.Forms.DrawItemEventArgs,System.Windows.Forms.ComboBox)">
            <summary>
            Draws an item.
            </summary>
            <param name="e">A <c>DrawItemEventArgs</c> that contains the event data.</param>
            <param name="comboBox">The <see cref="T:System.Windows.Forms.ComboBox"/> being drawn.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.UpdateMemberSelection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode)">
            <summary>
            Updates the member drop-down list selection.
            </summary>
            <param name="contextNode">The context <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> to select.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.BindToCompilationUnit(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,System.Int32)">
            <summary>
            Rebinds the drop-downs to the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </summary>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="contextOffset">The offset at which the caret is located.</param>
            <remarks>This method does not need to be called if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SyntaxEditor"/> property is set.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.Dispose(System.Boolean)">
            <summary>
            Disposes any resources used by the object.
            </summary>
            <param name="disposing">Whether the object is being disposed.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <c>Layout</c> event.
            </summary>
            <param name="e">A <c>LayoutEventArgs</c> that contains the event data.</param>
            <remarks>
            The <c>OnLayout</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnLayout</c> in a derived class, be sure to call the base class's <c>OnLayout</c> 
            method so that registered delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.OnResize(System.EventArgs)">
            <summary>
            Raises the <c>Resize</c> event.
            </summary>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
            <remarks>
            The <c>OnResize</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnResize</c> in a derived class, be sure to call the base class's <c>OnResize</c> 
            method so that registered delegates receive the event.
            </para>
            </remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.OnSelectedMemberChanged(System.EventArgs)">
            <summary>
            Raises the <c>SelectedMemberChanged</c> event.
            </summary>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.OnSelectedTypeChanged(System.EventArgs)">
            <summary>
            Raises the <c>SelectedTypeChanged</c> event.
            </summary>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.UpdateSelection(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit,System.Int32)">
            <summary>
            Updates the selection.
            </summary>
            <param name="compilationUnit">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/> to examine.</param>
            <param name="contextOffset">The offset at which the caret is located.</param>
            <remarks>This method does not need to be called if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SyntaxEditor"/> property is set.</remarks>
        </member>
        <member name="E:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedMemberChanged">
            <summary>
            Occurs when the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedMember"/> property is changed.
            </summary>
            <eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata>
            <remarks>This event does not need to be handled if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SyntaxEditor"/> property is set.</remarks>
        </member>
        <member name="E:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedTypeChanged">
            <summary>
            Occurs when the value of the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedType"/> property is changed.
            </summary>
            <eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata>
            <remarks>This event does not need to be handled if the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SyntaxEditor"/> property is set.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.IdealWidthForMembers">
            <summary>
            Gets the ideal width for the list based on the current items.
            </summary>
            <value>The ideal width for the list based on the current items.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.IdealWidthForTypes">
            <summary>
            Gets the ideal width for the list based on the current items.
            </summary>
            <value>The ideal width for the list based on the current items.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedMember">
            <summary>
            Gets the selected <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> in the member drop-down list.
            </summary>
            <value>The selected <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> in the member drop-down list.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SelectedType">
            <summary>
            Gets the selected <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> in the type drop-down list.
            </summary>
            <value>The selected <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> in the type drop-down list.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.SyntaxEditor">
            <summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to which the drop-down list is currently bound.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/> to which the drop-down list is currently bound.</value>
            <remarks>
            This property automates the drop-down list functionality.  When this property is set to a valid <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxEditor"/>
            control, the drop-down list listens to selection change events and looks for document semantic parse data updates.
            It also automatically navigates the SyntaxEditor caret to the type or member in the drop-down when a selection is made by the end user.
            </remarks>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem">
            <summary>
            Stores data about an AST node.
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode,System.String)">
            <summary>
            Initializes a new instance of the <c>AstNodeItem</c> class. 
            </summary>
            <param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is wrapped by this item.</param>
            <param name="text">The text for the item.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands.</returns>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.ToString">
            <summary>
            Creates and returns a string representation of the current object.
            </summary>
            <returns>A string representation of the current object.</returns>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.Key">
            <summary>
            Gets the key of the node.
            </summary>
            <value>The key of the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.Node">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is wrapped by this item.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/> that is wrapped by this item.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.TypeMemberDropDownList.AstNodeItem.Text">
            <summary>
            Gets the text representing the node.
            </summary>
            <value>The text representing the node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags">
            <summary>
            Represents .NET type flags.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.Structure">
            <summary>
            The type is a structure type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.Interface">
            <summary>
            The type is an interface type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.Enumeration">
            <summary>
            The type is an enumeration type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.Delegate">
            <summary>
            The type is a delegate type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.StandardModule">
            <summary>
            The type is a standard module.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.HasPublicConstructor">
            <summary>
            The type has a public contructor that can be called.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.HasFamilyConstructor">
            <summary>
            The type has a family (protected) contructor that can be called.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.HasAssemblyConstructor">
            <summary>
            The type has an assembly (internal) contructor that can be called.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.HasPrivateConstructor">
            <summary>
            The type has a private contructor that can be called.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.Nested">
            <summary>
            The type is a nested type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericType">
            <summary>
            The type is a generic type.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericTypeDefinition">
            <summary>
            The type is a generic type definition, from which other generic types can be constructed. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericParameter">
            <summary>
            The type is a generic parameter.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericParameterDefaultConstructorConstraint">
            <summary>
            A type can be substituted for the generic type parameter only if it has a parameterless constructor. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericParameterNotNullableValueTypeConstraint">
            <summary>
            A type can be substituted for the generic type parameter only if it is a value type and is not nullable. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.GenericParameterReferenceTypeConstraint">
            <summary>
            A type can be substituted for the generic type parameter only if it is a reference type. 
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.IsExtension">
            <summary>
            The type is marked with an <c>ExtensionAttribute</c>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Dom.DomTypeFlags.IsEditorBrowsableNever">
            <summary>
            The type has an <c>EditorBrowsableAttribute</c> on it with a value of <c>Never</c>.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection">
            <summary>
            Represents a section of using directives for a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.DirectiveContextID">
            <summary>
            Gets the context ID for a directive AST node.
            </summary>
            <value>The context ID for a directive AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#EndOffset">
            <summary>
            Gets the offset at which the outlining node ends.
            </summary>
            <value>The offset at which the outlining node ends.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#IsCollapsible">
            <summary>
            Gets whether the node is collapsible.
            </summary>
            <value>
            <c>true</c> if the node is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ActiproSoftware#SyntaxEditor#ICollapsibleNode#StartOffset">
            <summary>
            Gets the offset at which the outlining node starts.
            </summary>
            <value>The offset at which the outlining node starts.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IndicatorVisible">
            <summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary>
            <value>
            <c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ActiproSoftware#SyntaxEditor#IOutliningNodeParseData#IsLanguageTransition">
            <summary>
            Gets whether the outlining node is for a language transition.
            </summary>
            <value>
            <c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.Directives">
            <summary>
            Gets the collection of using directives.
            </summary>
            <value>The collection of using directives.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirectiveSection.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective">
            <summary>
            Represents a <c>using</c> directive for a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.CompilationUnit"/>.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.NamespaceNameContextID">
            <summary>
            Gets the context ID for a namespace name AST node.
            </summary>
            <value>The context ID for a namespace name AST node.</value>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.CommentContextID">
            <summary>
            Gets the context ID for a comment AST node.
            </summary>
            <value>The context ID for a comment AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.#ctor(ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>UsingDirective</c> class.
            </summary>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the AST node.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.GetDisplayText(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel)">
            <summary>
            Returns display text that represents the AST node using the specified options.
            </summary>
            <param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage"/> to use for formatting the text.</param>
            <param name="detailLevel">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DisplayTextDetailLevel"/> indicating the desired level of detail.</param>
            <returns>The display text that represents the AST node using the specified options.</returns>
            <remarks>
            This method is useful for getting text to display for the node for use in a type/member drop-down list or class browser.
            </remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.Comments">
            <summary>
            Gets the collection of comments that appear before the node.
            </summary>
            <value>The collection of comments that appear before the node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.ImageIndex">
            <summary>
            Gets the image index that is applicable for displaying this node in a user interface control.
            </summary>
            <value>The image index that is applicable for displaying this node in a user interface control.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.Key">
            <summary>
            Gets the string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.
            </summary>
            <value>The string-based key that uniquely identifies the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstNode"/>.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.NamespaceName">
            <summary>
            Gets or sets the namespace name.
            </summary>
            <value>The namespace name.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.NavigationOffset">
            <summary>
            Gets the character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.
            </summary>
            <value>The character offset at which to navigate when the editor's caret should jump to the text representation of the AST node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.UsingDirective.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression">
            <summary>
            Represents an is typeof expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.TypeReferenceContextID">
            <summary>
            Gets the context ID for a type reference AST node.
            </summary>
            <value>The context ID for a type reference AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.#ctor(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression,ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.TypeReference,ActiproSoftware.SyntaxEditor.TextRange)">
            <summary>
            Initializes a new instance of the <c>IsTypeOfExpression</c> class. 
            </summary>
            <param name="expression">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.Expression"/> to examine.</param>
            <param name="typeReference">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.TypeReference"/>.</param>
            <param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange"/> of the expression.</param>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.TypeReference">
            <summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.TypeReference"/>.
            </summary>
            <value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.IsTypeOfExpression.TypeReference"/>.</value>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers">
            <summary>
            Specifies the modifiers for a parameter.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers.None">
            <summary>
            No modifier.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers.Ref">
            <summary>
            A pass-by-reference parameter.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers.Out">
            <summary>
            An output parameter.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers.ParameterArray">
            <summary>
            The parameter is a parameter array.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.ParameterModifiers.Optional">
            <summary>
            The parameter is optional.
            Used in Visual Basic only.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage">
            <summary>
            Specifies a .NET language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage.Other">
            <summary>
            Other language.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage.CSharp">
            <summary>
            C#.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetLanguage.VB">
            <summary>
            VB.NET.
            </summary>
        </member>
        <member name="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression">
            <summary>
            Represents a query expression.
            </summary>
        </member>
        <member name="F:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression.QueryOperatorContextID">
            <summary>
            Gets the context ID for a query operator AST node.
            </summary>
            <value>The context ID for a query operator AST node.</value>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression.#ctor">
            <summary>
            Initializes a new instance of the <c>QueryExpression</c> class. 
            </summary>
        </member>
        <member name="M:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression.AcceptCore(ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.AstVisitor)">
            <summary>
            Accepts the specified visitor for visiting this node.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <remarks>This method is part of the visitor design pattern implementation.</remarks>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression.NodeType">
            <summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.
            </summary>
            <value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.DotNetNodeType"/> that identifies the type of node.</value>
        </member>
        <member name="P:ActiproSoftware.SyntaxEditor.Addons.DotNet.Ast.QueryExpression.QueryOperators">
            <summary>
            Gets the collection of query operators.
            </summary>
            <value>The collection of query operators.</value>
        </member>
    </members>
</doc>
