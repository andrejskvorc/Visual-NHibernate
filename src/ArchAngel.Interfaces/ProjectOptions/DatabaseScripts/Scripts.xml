<?xml version="1.0" encoding="utf-8" ?>
<database-scripts>

	<sqlserver>

		<header>
			/****** Generated by Visual NHibernate: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/
			USE [&lt;%=database.Name%&gt;]
			GO&lt;%
			if (database.NewTables.Count &gt; 0)
			{%&gt;

			/*** Create tables ***/&lt;%
			foreach (var table in database.NewTables)
			{%&gt;
			/****** Object:  Table [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] ******/
			SET ANSI_NULLS ON
			GO
			SET QUOTED_IDENTIFIER ON
			GO
			CREATE TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;](&lt;%
			for (int i = 0; i &lt; table.Columns.Count; i++)
			{
			IColumn column = table.Columns[i];%&gt;
			[&lt;%=column.Name%&gt;] [&lt;%=column.Type%&gt;]&lt;%WriteIf(column.IsText, string.Format("({0}) ", column.Length))%&gt; &lt;%WriteIf(column.IsNullable, "", "NOT ")%&gt;NULL&lt;%WriteIf(i &lt; table.Columns.Count - 1, ",")%&gt;&lt;%
			}
			if (table.PrimaryKey != null)
			{%&gt;
			CONSTRAINT [&lt;%=table.PrimaryKey.Name%&gt;] PRIMARY KEY CLUSTERED
			(&lt;%
			for (int i = 0; i &lt; table.PrimaryKey.Columns.Count; i++)
			{
			IColumn column = table.PrimaryKey.Columns[i];%&gt;
			[&lt;%=column.Name%&gt;] ASC&lt;%WriteIf(i &lt; table.PrimaryKey.Columns.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
			) ON [PRIMARY]&lt;%
			}%&gt;
			GO&lt;%
			}
			}
			if (database.RemovedTables.Count &gt; 0)
			{%&gt;
			/*** Remove tables ***/&lt;%
			foreach (var table in database.RemovedTables)
			{%&gt;
			/***** Remove Table: [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] *****/
			DELETE FROM [&lt;%=table.DatabaseName%&gt;].[&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]
			GO
			&lt;%
			}
			}
			foreach (var table in database.NewTables)
			{
			foreach (var fk in table.ForeignKeys)
			{%&gt;
			/****** Object:  ForeignKey [&lt;%=fk.Name%&gt;] ******/
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]  WITH CHECK ADD  CONSTRAINT [&lt;%=fk.Name%&gt;] FOREIGN KEY(&lt;%
			for (int i = 0; i &lt; fk.Columns.Count; i++)
			{%&gt;[&lt;%=fk.Columns[i].Name%&gt;]&lt;%WriteIf(i &lt; fk.Columns.Count - 1, ", ")%&gt;&lt;%
			}%&gt;)
			REFERENCES [&lt;%=table.Schema%&gt;].[&lt;%=fk.ReferencedPrimaryKey.TableName%&gt;] (&lt;%
			for (int i = 0; i &lt; fk.ReferencedPrimaryKey.Columns.Count; i++)
			{%&gt;[&lt;%=fk.ReferencedPrimaryKey.Columns[i].Name%&gt;]&lt;%WriteIf(i &lt; fk.ReferencedPrimaryKey.Columns.Count - 1, ", ")%&gt;&lt;%
			}%&gt;)
			GO
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] CHECK CONSTRAINT [&lt;%=fk.Name%&gt;]
			GO&lt;%
			}
			}%&gt;
			&lt;%
			if (database.ChangedTables.Count &gt; 0)
			{%&gt;
			/*** Initialize: Update Tables ***/
			SET NUMERIC_ROUNDABORT OFF
			GO
			SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
			GO
			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
			GO
			CREATE TABLE #tmpErrors (Error int)
			GO
			SET XACT_ABORT ON
			GO
			SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
			GO&lt;%
			foreach (var table in database.ChangedTables)
			{%&gt;

			/***** Update Table: [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] *****/
			BEGIN TRANSACTION
			GO
			PRINT N'Altering [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]'
			GO&lt;%
			/***************** New Columns *****************/
			if (table.NewColumns.Count &gt; 0)
			{%&gt;
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] ADD&lt;%
			for (int i = 0; i &lt; table.NewColumns.Count; i++)
			{
			var col = table.NewColumns[i];%&gt;
			[&lt;%=col.Name%&gt;] [&lt;%=col.Type%&gt;] COLLATE Latin1_General_CI_AS NULL&lt;%WriteIf(i &lt; table.NewColumns.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			/***************** Removed Columns *****************/
			if (table.RemovedColumns.Count &gt; 0)
			{%&gt;
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] DROP&lt;%
			for (int i = 0; i &lt; table.RemovedColumns.Count; i++)
			{
			var col = table.RemovedColumns[i];%&gt;
			COLUMN [&lt;%=col.Name%&gt;]&lt;%WriteIf(i &lt; table.RemovedColumns.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			/***************** New Foreign Keys *****************/
			if (table.NewForeignKeys.Count &gt; 0)
			{%&gt;
			PRINT N'Adding foreign keys to [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]'
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] ADD&lt;%
			for (int i = 0; i &lt; table.NewForeignKeys.Count; i++)
			{
			var key = table.NewForeignKeys[i];%&gt;
			CONSTRAINT [&lt;%=key.Name%&gt;] FOREIGN KEY (&lt;%
			// List the foreign-key columns
			for (int colCounter = 0; colCounter &lt; key.Columns.Count; colCounter++)
			{
			Write("[" + key.Columns[colCounter].Name + "]");
			WriteIf(colCounter &lt; key.Columns.Count - 1, ",");
			}%&gt;) REFERENCES [&lt;%=key.ReferencedPrimaryKey.TableSchema%&gt;].[&lt;%=key.ReferencedPrimaryKey.TableName%&gt;] (&lt;%
			// List the referenced primary-key columns
			for (int colCounter = 0; colCounter &lt; key.ReferencedPrimaryKey.Columns.Count; colCounter++)
			{
			Write("[" + key.ReferencedPrimaryKey.Columns[colCounter].Name + "]");
			WriteIf(colCounter &lt; key.ReferencedPrimaryKey.Columns.Count - 1, ",");
			}
			}%&gt;)
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			/***************** Removed Foreign Keys *****************/
			if (table.RemovedForeignKeys.Count &gt; 0)
			{%&gt;
			PRINT N'Dropping foreign keys from [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]'
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] DROP&lt;%
			for (int i = 0; i &lt; table.RemovedForeignKeys.Count; i++)
			{
			var key = table.RemovedForeignKeys[i];%&gt;
			CONSTRAINT [&lt;%=key.Name%&gt;]&lt;%WriteIf(i &lt; table.RemovedForeignKeys.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			/***************** New Primary Keys *****************/
			if (table.NewPrimaryKeys.Count &gt; 0)
			{
			for (int i = 0; i &lt; table.NewPrimaryKeys.Count; i++)
			{
			var key = table.NewPrimaryKeys[i];%&gt;
			PRINT N'Creating primary key [&lt;%=key.Name%&gt;] on [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]'
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] ADD
			CONSTRAINT [&lt;%=key.Name%&gt;] PRIMARY KEY CLUSTERED (&lt;%
			// List the primary-key columns
			for (int colCounter = 0; colCounter &lt; key.Columns.Count; colCounter++)
			{
			Write("[" + key.Columns[colCounter].Name + "]");
			WriteIf(colCounter &lt; key.Columns.Count - 1, ",");
			}
			}%&gt;)
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			/***************** Removed Primary Keys *****************/
			if (table.RemovedPrimaryKeys.Count &gt; 0)
			{%&gt;
			PRINT N'Dropping primary key from [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]'
			ALTER TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] DROP&lt;%
			for (int i = 0; i &lt; table.RemovedPrimaryKeys.Count; i++)
			{
			var key = table.RemovedPrimaryKeys[i];%&gt;
			CONSTRAINT [&lt;%=key.Name%&gt;]&lt;%WriteIf(i &lt; table.RemovedPrimaryKeys.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			GO
			IF @@ERROR&lt;&gt;0 AND @@TRANCOUNT&gt;0 ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT=0 BEGIN INSERT INTO #tmpErrors (Error) SELECT 1 BEGIN TRANSACTION END
			GO&lt;%
			}
			}%&gt;

			/***** Finalize: Update Tables *****/
			IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
			GO
			IF @@TRANCOUNT&gt;0 BEGIN
			PRINT 'The database update succeeded'
			COMMIT TRANSACTION
			END
			ELSE PRINT 'The database update failed'
			GO
			DROP TABLE #tmpErrors
			GO&lt;%
			}%&gt;
		</header>
	</sqlserver>

	<oracle>

		<header>
			/****** Generated by Visual NHibernate: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/

			&lt;%
			if (database.NewTables.Count &gt; 0)
			{%&gt;
			/*** Create tables ***/&lt;%
			foreach (var table in database.NewTables)
			{%&gt;
			/****** Object:  Table [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] ******/
			CREATE TABLE &lt;%=table.Schema%&gt;.&lt;%=table.Name%&gt;(&lt;%
			for (int i = 0; i &lt; table.Columns.Count; i++)
			{
			IColumn column = table.Columns[i];%&gt;
			&lt;%=column.Name%&gt; &lt;%=column.Type%&gt;&lt;%WriteIf(column.IsText, string.Format("({0}) ", column.Length))%&gt; &lt;%WriteIf(column.IsNullable, "", "NOT ")%&gt;NULL&lt;%WriteIf(i &lt; table.Columns.Count - 1, ",")%&gt;&lt;%
			}
			if (table.PrimaryKey != null)
			{%&gt;
			CONSTRAINT &lt;%=table.PrimaryKey.Name%&gt; PRIMARY KEY
			(&lt;%
			for (int i = 0; i &lt; table.PrimaryKey.Columns.Count; i++)
			{
			IColumn column = table.PrimaryKey.Columns[i];%&gt;
			&lt;%=column.Name%&gt;&lt;%WriteIf(i &lt; table.PrimaryKey.Columns.Count - 1, ",")%&gt;&lt;%
			}%&gt;
			)
			TABLESPACE USERS
			STORAGE (
			INITIAL 64K
			NEXT 1024K
			MAXEXTENTS UNLIMITED
			)
			NOLOGGING;&lt;%
			}
			}
			}
			if (database.RemovedTables.Count &gt; 0)
			{%&gt;
			/*** Remove tables ***/&lt;%
			foreach (var table in database.RemovedTables)
			{%&gt;
			/***** Remove Table: [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;] *****/
			DROP TABLE &lt;%=table.Schema%&gt;.&lt;%=table.Name%&gt;;
			&lt;%
			}
			}
			foreach (var table in database.NewTables)
			{
			foreach (var fk in table.ForeignKeys)
			{%&gt;
			/****** Object:  ForeignKey [&lt;%=fk.Name%&gt;] ******/
			ALTER TABLE &lt;%=table.Schema%&gt;.&lt;%=table.Name%&gt;
			ADD CONSTRAINT &lt;%=fk.Name%&gt; FOREIGN KEY(&lt;%
			for (int i = 0; i &lt; fk.Columns.Count; i++)
			{%&gt;&lt;%=fk.Columns[i].Name%&gt;&lt;%WriteIf(i &lt; fk.Columns.Count - 1, ", ")%&gt;&lt;%
			}%&gt;)
			REFERENCES &lt;%=table.Schema%&gt;.&lt;%=fk.ReferencedPrimaryKey.TableName%&gt; (&lt;%
			for (int i = 0; i &lt; fk.ReferencedPrimaryKey.Columns.Count; i++)
			{%&gt;&lt;%=fk.ReferencedPrimaryKey.Columns[i].Name%&gt;&lt;%WriteIf(i &lt; fk.ReferencedPrimaryKey.Columns.Count - 1, ", ")%&gt;&lt;%
			}%&gt;);
			&lt;%
			}
			}%&gt;
		</header>
	</oracle>

	<mysql>
		<header>
			/****** Generated by Visual NHibernate: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/
		</header>
	</mysql>

	<postgresql>

		<header>
			/****** Generated by Visual NHibernate: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/
		</header>

		<create>
			CREATE TABLE &lt;%=table.Name%&gt; (
			RadAcctId		BIGSERIAL PRIMARY KEY,
			AcctSessionId		VARCHAR(32) NOT NULL,
			AcctUniqueId		VARCHAR(32) NOT NULL,
			UserName		VARCHAR(253),
			Realm			VARCHAR(64),
			NASIPAddress		INET NOT NULL,
			NASPortId		VARCHAR(15),
			NASPortType		VARCHAR(32),
			AcctStartTime		TIMESTAMP with time zone,
			AcctStopTime		TIMESTAMP with time zone,
			AcctSessionTime		BIGINT,
			AcctAuthentic		VARCHAR(32),
			ConnectInfo_start	VARCHAR(50),
			ConnectInfo_stop	VARCHAR(50),
			AcctInputOctets		BIGINT,
			AcctOutputOctets	BIGINT,
			CalledStationId		VARCHAR(50),
			CallingStationId	VARCHAR(50),
			AcctTerminateCause	VARCHAR(32),
			ServiceType		VARCHAR(32),
			FramedProtocol		VARCHAR(32),
			FramedIPAddress		INET,
			AcctStartDelay		BIGINT,
			AcctStopDelay		BIGINT
			);

			CREATE INDEX radacct_active_user_idx ON radacct (userName) WHERE AcctStopTime IS NULL;
		</create>

		<update>
			-- See: http://developer.postgresql.org/pgdocs/postgres/ddl-alter.html

			-- Add Column
			ALTER TABLE &lt;%=table.Name%&gt; ADD COLUMN description text;

			-- Remove Column
			ALTER TABLE &lt;%=table.Name%&gt; DROP COLUMN description CASCADE;

			-- Add Constraint
			--To add a constraint, the table constraint syntax is used. For example:

			ALTER TABLE &lt;%=table.Name%&gt; ADD CHECK (name &lt;&gt; '');
			ALTER TABLE &lt;%=table.Name%&gt; ADD CONSTRAINT some_name UNIQUE (product_no);
			ALTER TABLE &lt;%=table.Name%&gt; ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;
			--To add a not-null constraint, which cannot be written as a table constraint, use this syntax:

			ALTER TABLE &lt;%=table.Name%&gt; ALTER COLUMN product_no SET NOT NULL;

			-- Remove Constraint
			ALTER TABLE &lt;%=table.Name%&gt; ALTER COLUMN product_no DROP NOT NULL;

			-- Change Column data-type
			ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);

			-- Rename Column
			ALTER TABLE products RENAME COLUMN product_no TO product_number;

			-- Rename Table
			ALTER TABLE products RENAME TO items;
		</update>

		<delete>
			DROP TABLE &lt;%=table.Name%&gt;
		</delete>

	</postgresql>

	<firebird>

		<header>
			/****** Generated by Visual NHibernate: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/
		</header>

		<create>
			/****** Object:  Table [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;]    Script Date: &lt;%=DateTime.Now.ToString("d MMM yyyy HH:mm:ss")%&gt; ******/
			SET ANSI_NULLS ON
			GO

			SET QUOTED_IDENTIFIER ON
			GO

			CREATE TABLE [&lt;%=table.Schema%&gt;].[&lt;%=table.Name%&gt;](
			[GfhID] [nchar](10) NOT NULL,
			[sss] [nchar](10) NULL,
			[adasdas] [nchar](10) NULL,
			[xdgdxgdx] [nchar](10) NULL,
			[zseze] [nchar](10) NULL,
			[SSSS] [nchar](10) NULL,
			CONSTRAINT [PK_GFH] PRIMARY KEY CLUSTERED
			(
			[GfhID] ASC
			)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
			) ON [PRIMARY]

			GO
		</create>

		<update>
			CREATE TABLE &lt;%=table.Name%&gt; (
			COUNTRY   COUNTRYNAME NOT NULL,
			CURRENCY  VARCHAR(10) NOT NULL,
			/* Keys */
			PRIMARY KEY (COUNTRY)
			);
		</update>

		<delete>
			DROP TABLE &lt;%=table.Name%&gt;;
		</delete>

	</firebird>

	<sqlite>

		<header>
			/****** TODO: Header ******/
		</header>

		<create>
			/****** TODO: Create ******/
		</create>

		<update>
			/****** TODO: Update ******/
		</update>

		<delete>
			/****** TODO: Delete ******/
		</delete>

	</sqlite>
	
</database-scripts>