<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArchAngel.Interfaces</name>
    </assembly>
    <members>
        <member name="M:ArchAngel.Interfaces.BaseAction.Run">
            <summary>
            Runs the Action
            </summary>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="P:ArchAngel.Interfaces.Attributes.ArchAngelEditorAttribute.IsGeneratorIterator">
            <summary>
            Whether objects of this class can be used as Iterator objects.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Attributes.ArchAngelEditorAttribute.PreviewDisplayName">
            <summary>
            This is set to static text that will be shown when this object is previewed.
            The use of this property overrides the PreviewDisplayProperty. 
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Attributes.ArchAngelEditorAttribute.AlternativeForms">
            <summary>
            Alternative representations of this type that are allowed to be used as iterators. Note
            that Provider.GetAllObjectsOfType() must cater for these alternative representations. Eg:
            Type[], List&lt;Type&gt; etc.
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.Attributes.TemplateEnumAttribute">
            <summary>
            Marker Attribute for indicating that an enum should be available for use in 
            ArchAngel Templates as a type for Virtual Properties
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.Attributes.NullValueAttribute">
            <summary>
            Marker Attribute for indicating that this enum value should be considered
            a null value -> this means it will show up in the UI as a blank, and should
            be the default value. If this value is chosen by the user, the virtual property
            will not be saved in the project, so when the model is reloaded it will be null.
            Since enums are value types, the value of the virtual property will be whatever 
            default(YourEnumType) returns when you access it, so you should make this the first
            value or = 0 if you can.
            </summary>
        </member>
        <member name="F:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.RaiseStatusChangedEvent">
            <summary>
            Gets raised when properties that are displayed by the parent container are changed. This gives the
            parent container the opportunity to listen to these events and apply the changes where appropriate.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.OnDisplaying">
            <summary>
            Raises the Displaying event.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.OnDataChanged(System.Type,System.Reflection.MethodInfo,System.Object,System.Object)">
            <summary>
            Event handler that gets wired up inside ArchAngel Workbench, allowing you to subscribe to all data changes application-wide.
            </summary>
            <param name="type">The type of object that has been affected.</param>
            <param name="method">The name of the property that has been changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Next">
            <summary>
            Gets called when the user clicks the 'Next' button. Return false to cancel the action 
            and prevent the previous screen from being loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Back">
            <summary>
            Gets called when the user clicks the 'Back' button. Return false to cancel the action 
            and prevent the previous screen from being loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Save">
            <summary>
            Saves current state.
            </summary>
            <returns>Returns true if save was successful, false otherwise.</returns>
        </member>
        <member name="E:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Displaying">
            <summary>
            Occurs when the user navigates to this screen, and it is displayed to the user.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.NavBarIcon">
            <summary>
            The icon to be displayed in ArchAngel Workbench the navigation pane.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.NavBarIconTransparentColor">
            <summary>
            The transparent color to be applied to the NavBarIcon.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.EnterKeyTriggersNext">
            <summary>
            Gets or sets whether the 'Enter' key triggers the 'Next' button-click.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.HasNext">
            <summary>
            Gets or sets whether this ContentItem has a 'Next' button.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.HasPrev">
            <summary>
            Gets or sets whether this ContentItem has a 'Back' button.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.HasFinish">
            <summary>
            Gets or sets whether this ContentItem has a 'Finish' button.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.Title">
            <summary>
            Gets or sets the Title of this ContentItem which will be displayed as a heading.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.PageHeader">
            <summary>
            Gets or sets the heading text that will be displayed above this ContentItem.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Controls.ContentItems.ContentItem.PageDescription">
            <summary>
            Gets or sets the description that will be displayed above this ContentItem, below the PageHeader text.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.SkipScreens(System.Int32)">
            <summary>
            Moves the current screen position this number extra ahead when 
            LoadNextScreen is called. Calling SkipScreens(1) then LoadNextScreen()
            will result in the next screen after the current one being skipped.
            Subsequent calls will add to the previous value, so calling
            SkipScreens(1); SkipScreens(1); will skip two screens.
            </summary>
            <seealso cref="M:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.ClearScreensToSkip"/>
            <param name="numberOfScreensToSkip">The number of additional screens to skip.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.ClearScreensToSkip">
            <summary>
            Sets the number of screens to skip at the next LoadNextScreen to 0.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.SetScreenData(System.String,System.Object)">
            <summary>
            Stores some data for the duration of this wizard process.
            </summary>
            <param name="key">The key used to access the data.</param>
            <param name="data">The data to be stored.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.GetScreenData(System.String)">
            <summary>
            Gets some previously stored data. Returns null if there is no data stored under that key.
            </summary>
            <param name="key">The key the data was previously stored under.</param>
            <returns>Returns the data previously stored under the given key, or null if there is no data stored under that key.</returns>
        </member>
        <member name="P:ArchAngel.Interfaces.Wizards.NewProject.IFormNewProject.NumberOfScreensToSkip">
            <summary>
            The number of screens that will be skipped at the next LoadNextScreen() call.
            If this is greater than the number of screens left in the wizard, the wizard will
            Close().
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.Setting">
            <summary>
            A Setting that the Provider uses and which can be set by template authors in ArchAngel Designer.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Setting.#ctor(System.Type,System.String,System.Object)">
            <summary>
            Setting Constructor.
            </summary>
            <param name="type">The data-type of the Setting.</param>
            <param name="description">A description of the Setting.</param>
            <param name="defaultValue">The default value of the Setting.</param>
        </member>
        <member name="P:ArchAngel.Interfaces.Setting.Type">
            <summary>
            The data-type of the Setting.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Setting.Value">
            <summary>
            The value of the Setting.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Setting.Description">
            <summary>
            The description of the Setting which is diaplyed to template authors in ArchAngel Designer.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.Setting.DefaultValue">
            <summary>
            The default value of the Setting.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IScriptBaseObject.GetUserOptionValue``1(System.String)">
            <summary>
            Gets the value of the named User Option and casts it to T.
            If the value cannot be casted to T, this will return default(T).
            </summary>
            <typeparam name="T">The type of the User Option</typeparam>
            <param name="name">The name of the User Option to serach for.</param>
            <returns>The value of the named User Option, or default(T).</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.Events.RaiseDataChangedEvent(System.Type,System.Reflection.MethodInfo,System.Object,System.Object)">
            <summary>
            Call this to raise an event to signify that data has changed.
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.Events.RaiseRefreshApplicationEvent">
            <summary>
            Cause ArchAngel Workbench to Refresh it's display.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.PreGenerationData.OtherProviderInfos">
            <summary>
            Gets/sets a list of ProviderInfo objects of all the other Providers in the project.
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.TemplateInfo.File">
            <summary>
            Summary description for File.
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.TemplateInfo.Script">
            <summary>
            Summary description for Script.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.UserOption.DefaultValue">
            <summary>
            Calls the DefaultValue function in the Template assembly and returns it's value.
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.TemplateInfo.Output">
            <summary>
            Summary description for Output.
            </summary>
        </member>
        <member name="F:ArchAngel.Interfaces.Controls.FormVirtualPropertyEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.FormVirtualPropertyEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.Controls.FormVirtualPropertyEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.CreateScreens">
            <summary>
            Instructs the Provider to create the ContentItem Screens. This is so that the creation
            of UI elements can be deferred until it needs to happen, and our Unit Tests can run
            without spinning up forms in the background for no reason.
            
            To Implementors:
            Your implementation should be able to be called multiple times. The first time, create the
            screens. Subsequently it should do nothing. 
            
            Also, you should not rely on this being called before any of your other methods. It will 
            probably happen like that in the Workbench, but our debugger will not be running this method
            at all.
            
            If you really need your UI objects to be created, then leave that code in the constructor 
            and leave this method blank. You will cause extra memory to be used in the Workbench Debugger,
            and potentially cause other problems. For instance, the Debugger runs in Multi Threaded Apartment
            mode, and WinForms objects cannot be created in this mode. The debugger cannot be changed to avoid
            this, we have already tried.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.Save(System.String)">
            <summary>
            Saves this provider's state to a single file or multiple files in the specified folder.
            </summary>
            <remarks>
            For Provider Authors:
            You can save the provider's data in any format you like, such as xml, binary 
            serialization etc. What files you create and what you put inside them is totally up to you.
            </remarks>
            <param name="folder">Folder to save the files to.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.Open(System.String)">
            <summary>
            Reads the page/object(s) state from file eg: xml, binary serialization etc
            </summary>
            <param name="folder">Folder to open files from.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.Clear">
            <summary>
            Clears all data from the provider. Gets called when opening projects or creating new projects.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.IsValid(System.String@)">
            <summary>
            Returns whether this provider is in a valid state. This typically gets called just before generation.
            If false is returned, analysis and generation will not proceed.
            </summary>
            <param name="failReason">The reason for the invalid state.</param>
            <returns>True if the provider's state is valid, false otherwise.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.PerformPreAnalysisActions">
            <summary>
            Gets called by ArchAngel just before Analysis begins, allowing you to perform any last second actions. This is a synchronous operation.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.GetAllObjectsOfType(System.String)">
            <summary>
            Returns all objects of the specified type that currently exist in this provider. This typically gets called
            when analysis and generation begins and the objects get passed to the template to create the output files.
            </summary>
            <param name="typeName">Fully qualified name of the type of objects to return.</param>
            <returns>An array of objects of the specified type.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.GetAllObjectsOfType(System.String,ArchAngel.Interfaces.IScriptBaseObject)">
            <summary>
            Returns all objects of the specified type that are valid 'beneath' the supplied rootObject. This typically gets called
            when analysis and generation begins and the objects get passed to the template to create the output files.
            </summary>
            <param name="typeName">Fully qualified name of the type of objects to return.</param>
            <param name="rootObject">Object by which the results must get filtered.</param>
            <returns>An arra of objects of the specified type.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.LoadFromNewProjectInformation(ArchAngel.Interfaces.INewProjectInformation)">
            <summary>
            If info is non null and applies to this Provider, clears the Provider data and loads from the information given.
            </summary>
            <param name="info">The information to use to load the provider. If null, nothing happens.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderInfo.RunPreGenerationValidation">
            <summary>
            Validates that the model is in a valid state for generating from. 
            </summary>
            <returns>A ValidationResult that reports whether validation passed or not, and what provider screen should be shown on failure.</returns>
        </member>
        <member name="P:ArchAngel.Interfaces.ProviderInfo.RootPreviewObjects">
            <summary>
            Gets a collection of objects that will be presented to the ArchAngel Designer user to select from
            when previewing a function. The object stack will be walked.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.ValidationResult.ValidationFailed">
            <summary>
            If true, the model did not validate and ScreenToShow must be displayed to show the user the error.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.INewProjectInformation.ValidProviderType">
            <summary>
            The Type of the ProviderInfo this information belongs to.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IVerificationIssueSolver.GetValidTemplateFilePath(System.String,System.String)">
            <summary>
            Gets a valid path for the template assembly.
            </summary>
            <returns>A file path that points to a valid template assembly, or null if the user wants to cancel loading the file.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IVerificationIssueSolver.GetValidProjectDirectory(System.String,System.String)">
            <summary>
            Gets a valid folder path for the project output.
            </summary>
            <returns>A folder path that points to a valid folder, or null if the user wants to cancel loading the file.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IVerificationIssueSolver.InformUserThatAppConfigIsInvalid(System.String)">
            <summary>
            Informs the user that the app config in their project file is missing or invalid. This is an unrecoverable error.
            </summary>
            <param name="message">The message that should be shown to the user.</param>
        </member>
        <member name="F:ArchAngel.Interfaces.SharedData._ProjectSettingsFolder">
            <summary>
            The folder where setting files can be found.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.SharedData.GetDefaultOptionValueFromFunction(System.String,System.Object)">
            <summary>
            Gets the default value from the function that has been specified as the DefaultValueFunction.
            </summary>
            <param name="functionName"></param>
            <param name="iteratorObject"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.SharedData.SaveCurrentConfig(System.String)">
            <summary>
            Save the current app.config file to the specified location.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.ScriptFunctionWrapper.RunApiExtensionFunction(System.String,System.Object@,System.Object[]@)">
            <summary>
            If the function is API function has been overridden in the template, executes the function and returns true. Returns false if the function hasn't been overridden.
            </summary>
            <param name="functionName"></param>
            <param name="result"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IProjectHelper.GetVirtualProperties(System.Type)">
            <summary>
            Gets the virtual properties for the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IProjectHelper.Init(System.Xml.XmlDocument,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="doc"></param>
            <param name="assemblySearchFolders">Folders to search for referenced assemblies.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.IProjectHelper.GetTypeFromReferencedAssemblies(System.String,System.Boolean)">
            <summary>
            Searches the running assembly as well as all referenced assemblies for the given type.
            </summary>
            <param name="typeName"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IProjectHelper.GetVirtualPropertyDefaultValue(System.String,System.Object)">
            <summary>
            Gets the default value from the function that has been specified as the DefaultValueFunction.
            </summary>
            <param name="virtualPropertyName"></param>
            <param name="iteratorObject"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IProjectHelper.FillVirtualProperties">
            <summary>
            Adds the required Virtual Properties to all objects in all Providers.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IProjectHelper.ReferencedAssemblies">
            <summary>
            Gets an array of assemblies that are referenced by this project
            </summary>
        </member>
        <member name="T:ArchAngel.Interfaces.TemplateInfo.Folder">
            <summary>
            Summary description for Folder.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.GetTemplateFunctionLanguage(System.String)">
            <summary>
            Gets the value of the LanguageAttribute set on the given method, if it exists.
            </summary>
            <param name="functionName">The name of the function to get the Language for.</param>
            <returns>The value of the LanguageAttribute on the given method, or "" if the attribute doesn't exist.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallApiExtensionFunction(System.String,System.Object@,System.Object[]@)">
            <summary>
            Calls an API Extension method. Caches values indicating whether a method has an
            Extension method or not, so that future calls can be short-circuited.
            </summary>
            <returns>True is the API method has been extended by the template author.</returns>
            <param name="name">Name of the function to call.</param>
            <param name="result">The return value of the function call.</param>
            <param name="parameters">The parameters to call the function with.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallTemplateFunction(System.String,System.Object[]@)">
            <summary>Calls a function in the ArchANgel template file (*.aal).</summary>
            <returns>
            The object returned by the function. Returns null if the return-type of the
            function is 'void'.
            </returns>
            <param name="name">Name of function to call.</param>
            <param name="parameters">Array of parameters for the function.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallTemplateFunction(System.String)">
            <summary>Calls a function in the ArchANgel template file. Uses an empty array of parameters.</summary>
            <returns>
            The object returned by the function. Returns null if the return-type of the
            function is 'void'.
            </returns>
            <param name="name">Name of function to call.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.GetFunctionsXml">
            <summary>
            Returns an Xml document containing information on all of the functions in the TemplateGen
            type from the current assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.SetUserOption(System.String,System.Object)">
            <summary>Sets the value of a UserOption.</summary>
            <param name="name">Name of the UserOption.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.GetUserOption(System.String)">
            <summary>Gets the value of a UserOption.</summary>
            <returns>Value of the UserOption.</returns>
            <param name="name">Name of the UserOption.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.SetProperty(System.String,System.Object)">
            <summary>
            Sets the named property in the TemplateGen class.
            </summary>
            <param name="name">The name of the property to set.</param>
            <param name="val">The value to give the property.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.GetProperty(System.String)">
            <summary>
            Gets the value of the named property in the TemplateGen class.
            </summary>
            <param name="name">The name of the property to get.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.SetAssemblySearchPaths(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the additional paths that the TemplateGen assembly will use to attempt to resolve
            missing assemblies from.
            </summary>
            <param name="searchPaths">The paths to look in.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.GetAssemblySearchPaths">
            <summary>
            Gets the additional paths that the TemplateGen assembly will use to attempt to resolve
            missing assemblies from.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallDefaultValueFunction(ArchAngel.Interfaces.ITemplate.IOption,System.Object[])">
            <summary>
            Calls the IOption's default value function in the compiled template.
            </summary>
            <param name="option"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallDisplayToUserFunction(ArchAngel.Interfaces.ITemplate.IOption,System.Object[])">
            <summary>
            Calls the IOption's "display to user" function in the compiled template.
            </summary>
            <param name="option"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallCustomNewProjectScreensFunction">
            <summary>
            If the template defines a function that gets the custom screens it wants displayed at the
            end of the new project wizard, this calls it and returns the result. Otherwise it returns an
            empty list. It will never return null.
            </summary>
            <returns>A list containing the custom screens to show at the end of the New Project wizard.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.CallPreGenerationInitialisationFunction(ArchAngel.Interfaces.ProviderInfo,ArchAngel.Interfaces.PreGenerationData)">
            <summary>
            If the template defines a pre-generation initialisation function, this calls it. The
            idea is to initialise the given provider model with whatever extra data the template
            needs later on. This extra data is usually computationally expensive, so should only 
            be calculated at the start of generation, or it requires a view of the whole model.
            </summary>
            <param name="provider">The Provider that should be initialised by the template.</param>
            <param name="data">Data about the current project that might be useful.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ITemplateLoader.SetGeneratedFileNameOnTemplate(System.String)">
            <summary>
            Sets the GeneratedFileName property on the template instance. Should be set before running the any template function
            if that function is generating a file.
            </summary>
            <param name="filename">The absolute filename of the file that the output of the next template function will be written to.</param>
        </member>
        <member name="P:ArchAngel.Interfaces.ITemplateLoader.CurrentAssembly">
            <summary>
            Gets the Assembly loaded from the current Template.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.GetTemplateFunctionLanguage(System.String)">
            <summary>
            Gets the value of the LanguageAttribute set on the given method, if it exists.
            </summary>
            <param name="functionName">The name of the function to get the Language for.</param>
            <returns>The value of the LanguageAttribute on the given method, or "" if the attribute doesn't exist.</returns>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.CallApiExtensionFunction(System.String,System.Object@,System.Object[]@)">
            <summary>
            Calls an API Extension method. Caches values indicating whether a method has an
            Extension method or not, so that future calls can be short-circuited.
            </summary>
            <returns>True is the API method has been extended by the template author.</returns>
            <param name="name">Name of the function to call.</param>
            <param name="result">The return value of the function call.</param>
            <param name="parameters">The parameters to call the function with.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.CallTemplateFunction(System.String,System.Object[]@)">
            <summary>Calls a function in the ArchAngel template file (*.aal).</summary>
            <returns>
            The object returned by the function. Returns null if the return-type of the
            function is 'void'.
            </returns>
            <param name="name">Name of function to call.</param>
            <param name="parameters">Array of parameters for the function.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.GetFunctionsXml">
            <summary>
            Returns an Xml document containing information on all of the functions in the TemplateGen
            type from the current assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.SetUserOption(System.String,System.Object)">
            <summary>Sets the value of a UserOption.</summary>
            <param name="name">Name of the UserOption.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.TemplateLoader.GetUserOption(System.String)">
            <summary>Gets the value of a UserOption.</summary>
            <returns>Value of the UserOption.</returns>
            <param name="name">Name of the UserOption.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderHelper.PopulateProviderFromProjectFile(ArchAngel.Interfaces.ProviderInfo,System.String)">
            <summary>
            Populates the provider with the saved data from the given project file.
            </summary>
            <param name="provider"></param>
            <param name="projectFilePath"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderHelper.PopulateProvider(ArchAngel.Interfaces.ProviderInfo,System.String)">
             <summary>
             Populates the provider with the saved data from the folder that contains the Provider Data folders.
             Don't use this method if you could use PopulateProviderFromProjectFile. It has the logic for finding
             the right folder from the projectFile.
             For example, we would be expecting to be given the full path to Project Files under this scheme:
            
             Project Files
             |--> ExampleProvider_data
                  |--> somefile.xml
             </summary>
             <param name="provider"></param>
             <param name="folder"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.ProviderHelper.GetProviderTempFolder(ArchAngel.Interfaces.ProviderInfo)">
            <summary>
            Returns the path string of the folder where assemblies are temporarily put for processing.
            The directory is not created.
            </summary>
            <param name="provider">The provider to get the assembly name from.</param>
            <returns>A temporary path to place files associated with a provider.</returns>
        </member>
        <member name="T:ArchAngel.Interfaces.IWorkbenchProjectSettings">
            <summary>
            Represents the common project settings that are stored in appconfig.xml
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProjectSettings.Save(System.String,ArchAngel.Interfaces.IWorkbenchProject)">
            <summary>
            Save the project settings to the specified file.
            </summary>
            <param name="file">The path of the file to save the settings to.</param>
            <param name="project">The path that the aaprj file is being saved to.</param>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProjectSettings.Open(System.String,ArchAngel.Interfaces.IWorkbenchProject)">
            <summary>
            Load the project settings from the specified file.
            </summary>
            <param name="file">The path of the file to load the settings from.</param>
            <param name="project">The path that the aaprj file is being opened from.</param>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProjectSettings.OutputPath">
            <summary>
            The full path of the output directory.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProjectSettings.TemplateFileName">
            <summary>
            The full path of the template used for this project.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProjectSettings.ProjectGuid">
            <summary>
             The unique identifier for this project.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.SaveAppConfig(System.String)">
            <summary>
            Save the ProjectSettings
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.Reset(System.Boolean)">
            <summary>
            Clears the cached assembly and project objects. Required when user compiles a new AAL file.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.FillVirtualProperties">
            <summary>
            Adds the required Virtual Properties to all objects in all Providers.
            </summary>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.GetVirtualProperties(System.Type)">
            <summary>
            Gets the virtual properties for the specified type, including options that 
            have been specified for base types of the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.InitFromDesignerProjectXml(System.Xml.XmlDocument)">
            <summary>
            
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.GetTypeFromReferencedAssemblies(System.String,System.Boolean)">
            <summary>
            Searches the running assembly as well as all referenced assemblies for the given type.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
            <param name="throwOnError"></param>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.GetIteratorTypeFromProviders(System.String)">
            <summary>
            Gets the Type for the given full type name. If the type
            does not exist in one of the loaded provider assemblies
            or at all, an exception is thrown.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
            <exception cref="T:ArchAngel.Interfaces.TypeNotAnIteratorException">
            Thrown if the given type exists, but not as part of a provider.
            </exception>
            <exception cref="T:ArchAngel.Interfaces.TypeDoesNotExistException">
            Thrown if the type cannot be found in the currently loaded assemblies.
            </exception>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.GetIteratorTypeFromProviders(System.String,ArchAngel.Interfaces.ProviderInfo@)">
            <summary>
            Gets the Type and Provider for the given full type name. If the type
            does not exist in one of the loaded provider assemblies
            or at all, an exception is thrown.
            </summary>
            <param name="typeName">The full name of the iterator type you are looking for.</param>
            <param name="provider">The provider the type exists in</param>
            <returns></returns>
            <exception cref="T:ArchAngel.Interfaces.TypeNotAnIteratorException">
            Thrown if the given type exists, but not as part of a provider.
            </exception>
            <exception cref="T:ArchAngel.Interfaces.TypeDoesNotExistException">
            Thrown if the type cannot be found in the currently loaded assemblies.
            </exception>
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.GetVirtualPropertyDefaultValue(System.String,System.Object)">
            <summary>
            Gets the default value from the function that has been specified as the DefaultValueFunction.
            </summary>
            <param name="virtualPropertyName"></param>
            <param name="iteratorObject"></param>
            <returns></returns>        
        </member>
        <member name="M:ArchAngel.Interfaces.IWorkbenchProject.LoadTemplate(System.String)">
            <summary>
            Loads the given template file from disk, sets the template name in the PrjectSettings,
            and fires the ProjectLoaded event
            </summary>
            <param name="templateFileName">The filename of the template to load.</param>
            <returns></returns>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProject.TemplateLoader">
            <summary>
            The Loader used to work with the template assembly.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProject.ReferencedAssemblies">
            <summary>
            Gets an array of assemblies that are referenced by this project
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProject.AppConfigFilename">
            <summary>
            The filename of the appconfig.xml file used to load this project.
            </summary>
        </member>
        <member name="P:ArchAngel.Interfaces.IWorkbenchProject.ProjectFile">
            <summary>
            The filename of the currently loaded project.
            </summary>
        </member>
    </members>
</doc>
