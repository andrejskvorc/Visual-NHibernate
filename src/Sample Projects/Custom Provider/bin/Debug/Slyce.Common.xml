<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slyce.Common</name>
    </assembly>
    <members>
        <member name="F:Slyce.Common.Controls.Diagramming.SlyceGrid.SlyceGrid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.SlyceGrid.SlyceGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.SlyceGrid.SlyceGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.SlyceGrid.SlyceGrid.ResetLabelCache">
            <summary>
            This should only be called when populating the Grid for the first time, 
            or when the number of columns changes.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.SlyceGrid.SlyceGrid.FinaliseEdits">
            <summary>
            Ends all current cell-edits, comitting changes.
            </summary>
        </member>
        <member name="T:Slyce.Common.KeyboardHelper">
            <summary>
            Helper methods for determining Keyboard state.
            </summary>
        </member>
        <member name="M:Slyce.Common.KeyboardHelper.IsAddKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Returns true if either of the + keys on the keyboard are down.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.KeyboardHelper.IsMinusKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Returns true if either of the - keys on the keyboard are down.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.KeyboardHelper.IsTabKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Returns true if the Tab key on the keyboard is down.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="F:Slyce.Common.Controls.ucHeading.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.ucHeading.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.ucHeading.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.Diagramming.Shapes.ShapeCanvas.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.Shapes.ShapeCanvas.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.Diagramming.Shapes.ShapeCanvas.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.VersionNumberUtility.Increment(System.String)">
            <summary>
            Increments the last ordinal version part ie: the right-most value.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.VersionNumberUtility.Increment(System.String,System.Int32)">
            <summary>
            Increments the value of the specified version part.
            </summary>
            <param name="version"></param>
            <param name="ordinalPosition"></param>
            <returns></returns>
        </member>
        <member name="T:Slyce.Common.VersionNumber">
            <summary>
            Represents an assembly version number. Useful for stamping files with the version number of the assembly that created them.
            Provides comparason methods so that version objects can be easily compared, and certain conditions checked.
            </summary>
        </member>
        <member name="M:Slyce.Common.VersionNumber.#ctor">
            <summary>
            Construct an empty VersionNumber, with all fields set to 0
            </summary>
        </member>
        <member name="M:Slyce.Common.VersionNumber.#ctor(System.String)">
            <summary>
            Constructs a new VersionNumber
            </summary>
            <param name="file">The file path.</param>
        </member>
        <member name="M:Slyce.Common.VersionNumber.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new VersionNumber
            </summary>
            <param name="major">The Major version number.</param>
            <param name="minor">The Minor version number.</param>
            <param name="build">The build number.</param>
            <param name="revision">The revision number.</param>
        </member>
        <member name="M:Slyce.Common.VersionNumber.Compare(Slyce.Common.VersionNumber)">
            <summary>
            Compares the given VersionNumber against this one to determine which one is greater,
            using the given ComparasonOptions to determine which fields to use.
            If this object is greater than the one passed, a positive result is returned. If they
            are equal, 0 is returned. If this is less than the one passed, a negative result is returned.
            </summary>
            <param name="number">The VersionNumber to compare against this one.</param>
            <returns>
            If this &gt; number, a positive integer.
            If this == number, 0.
            If this &lt; number, a negative integer
            </returns>
        </member>
        <member name="M:Slyce.Common.VersionNumber.Equals(Slyce.Common.VersionNumber)">
            <summary>
            Compares the given VersionNumber for equality on every field.
            </summary>
            <param name="versionNumber">The VersionNumber object to compare against this one.</param>
            <returns>True if the objects represent the same version number.</returns>
        </member>
        <member name="M:Slyce.Common.VersionNumber.GetLocationsWithLatestVersions(System.Collections.Generic.List{System.String})">
            <summary>
            Returns a the list of files set to the path with the latest version (from the paths supplied).
            </summary>
            <param name="files">Files to set with latest version.</param>
            <returns></returns>
        </member>
        <member name="P:Slyce.Common.VersionNumber.Major">
            <summary>
            The Major version number.
            </summary>
        </member>
        <member name="P:Slyce.Common.VersionNumber.Minor">
            <summary>
            The Minor version number.
            </summary>
        </member>
        <member name="P:Slyce.Common.VersionNumber.Build">
            <summary>
            The build number.
            </summary>
        </member>
        <member name="P:Slyce.Common.VersionNumber.Revision">
            <summary>
            The revision number.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.ucHoverList.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.ucHoverList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.ucHoverList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.FloatingToolstrip.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.FloatingToolstrip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.FloatingToolstrip.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Slyce.Common.XmlSqueezer">
            <summary>
            Helper class for cleaning up XML.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.VersionInfo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.VersionInfo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.VersionInfo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Slyce.Common.Controls.SlyceMessageBox">
            <summary>
            Custom message box for showing the user messages in a non-blocking fashion.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.SlyceMessageBox.#ctor">
            <summary>
            Create a new message box, but don't show it to the user yet.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.SlyceMessageBox.TriggerResultAvailable">
            <summary>
            Set the WaitHandle, trigger the ResultAvailable event if needed, then close the form.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.SlyceMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.SlyceMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.SlyceMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Slyce.Common.Controls.SlyceMessageBox.ResultAvailable">
            <summary>
            Triggered after the User has made a choice.
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.SlyceMessageBox.Caption">
            <summary>
            The caption shown in the title bar of the message box.
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.SlyceMessageBox.Message">
            <summary>
            The message shown in the main part of the mesage box.
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.SlyceMessageBox.OptionChosen">
            <summary>
            This WaitHandle is triggered when the user has chosen yes or no.
            </summary>
        </member>
        <member name="T:Slyce.Common.Controls.ResultAvailableArgs">
            <summary>
            Holds the User's message box choice.
            </summary>
        </member>
        <member name="M:Slyce.Common.PathHelper.GetTempFilePathFor(System.String,System.String,Slyce.Common.ComponentKey)">
            <summary>
            The temp path will be of the form Temp/ArchAngel/Guid/ComponentKey
            where Temp is the system temp folder, the Guid is generated from the
            project filename, and the ComponentKey is the string representation of 
            the part of the ArchAngel system that needs a temp folder.
            </summary>
            <param name="product">The product we need a temp folder for.</param>
            <param name="projectFile">The filename of the project this is for</param>
            <param name="componentKey">The part of the ArchAngel system that needs the
            temp path.</param>
            <returns>Path of the form Temp/ArchAngel/Guid/ComponentKey. For a given project,
            the temp path will be the same as long as the project filename does not change.</returns>
        </member>
        <member name="T:Slyce.Common.ComponentKey">
            <summary>
            Each of these keys represents a different component of the system.
            </summary>
        </member>
        <member name="F:Slyce.Common.ComponentKey.Workbench_FileGeneratorOutput">
            <summary>
            This component handles the diff'd and merged files.
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.MessageBoxWithFileSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.MessageBoxWithFileSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.MessageBoxWithFileSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.#ctor">
            <summary>
            To be called from Designer
            </summary>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.#ctor(System.String)">
            <summary>
            To be called from Workbench.
            </summary>
            <param name="productName"></param>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.UpdateExists(System.String)">
            <summary>
            Gets whether an update exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.DeterminePatch">
            <summary>
            Query the webserver for the latest version number, download size and release history.
            </summary>
        </member>
        <member name="F:Slyce.Common.Updates.frmUpdate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Updates.frmUpdate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Slyce.Common.EventList`1">
            <summary>
            A version of a generic list List&lt;T&gt; that raises events.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Slyce.Common.Controls.NumEdit">
            <summary>
            Numeric data entry control
            </summary>
        </member>
        <member name="T:DotfuscatorDoNotRename">
            <summary>
            This is for Eziriz .net Reactor, to tell it not to obfuscate the names of certain fields etc.
            </summary>
        </member>
        <member name="T:DotfuscatorDoNotAlterControlFlow">
            <summary>
            This is to disable DotFuscator Control Flow obfuscation
            </summary>
        </member>
        <member name="T:DotfuscatorDoNotRemove">
            <summary>
            This is to disable DotFuscator removal of unused elements (ie: properties that are only accessed via reflection)
            </summary>
        </member>
        <member name="T:Slyce.Common.Utility">
            <summary>
            Summary description for Utility.
            </summary>
        </member>
        <member name="M:Slyce.Common.Utility.GetNumberOfLines(System.String)">
            <summary>
            Gets the number of lines appearing in the text.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Number of lines.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetDefaultValueAsString(System.Type)">
            <summary>
            Gets a string representation of the default value for a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.HideMessagePanel(System.Windows.Forms.Control)">
            <summary>
            Removes the Message Panel from the given control. If no message panel is
            present, it does nothing.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Slyce.Common.Utility.ShadeForm(System.Windows.Forms.Form,System.Int32,System.Drawing.Color)">
            <summary>
            Creates an image overlay of the form, making the form look shaded.
            </summary>
            <param name="form"></param>
            
            <param name="transparency">The transparency of the shading: 0 to 255</param>
            <param name="color">The colour of the shading.</param>
        </member>
        <member name="M:Slyce.Common.Utility.UnShadeForm(System.Windows.Forms.Control)">
            <summary>
            Removes the shading of a form.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Slyce.Common.Utility.ControlShaded(System.Windows.Forms.Control)">
            <summary>
            Checks if the specified control is shaded.
            </summary>
            <param name="control">The control to check</param>
            <returns>True if the form has been shaded by the ShadeForm() method.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.HexToData(System.String)">
            <summary>
            Converts hex string to byte array.
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetMangledGenericTypeName(System.String)">
            <summary>
            Gets the mangled type name for a generic type eg: List&lt;string&gt; becomes List`1[string]
            </summary>
            <param name="unmangeldTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.IsValidFunctionName(System.String)">
            <summary>
            The filename will be used as the namespace of the compiled class, 
            and namespaces can only consist of letters and numbers, and the 
            first character must be a letter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.DeleteDirectoryContentsBrute(System.String,System.Boolean)">
            <summary>
            Deletes all files in the folder, except hidden files, if the flag is set.
            </summary>
            <param name="directory"></param>
            <param name="deleteHiddenFiles"></param>
        </member>
        <member name="M:Slyce.Common.Utility.SendHttpPost(System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            Sends form data to a web url.
            </summary>
            <param name="url"></param>
            <param name="dictionary"></param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.SendHttpPost(System.String,System.Collections.Specialized.StringDictionary,System.Net.WebResponse@)">
            <summary>
            Sends form data to a web url.
            </summary>
            <param name="url"></param>
            <param name="dictionary"></param>
            <returns>True if successful, false otherwise.</returns>
            <param name="response"></param>
        </member>
        <member name="M:Slyce.Common.Utility.FileCopy(System.String,System.String)">
            <summary>
            Creates the required directory if it doesn't exist
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Slyce.Common.Utility.GetCheckSumOfFile(System.String)">
            <summary>
            Returns the MD5 checksum of a file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetCheckSumOfString(System.String)">
            <summary>
            Returns the MD5 checksum of a string.
            </summary>
            <param name="text">The text to run an MD5 hash over</param>
            <returns>The MD5 hash represented as a hexadecimal string.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetCheckSumOfBytes(System.Byte[])">
            <summary>
            Returns the MD5 checksum of a string.
            </summary>
            <param name="bytes">The bytes to run an MD5 hash over</param>
            <returns>The MD5 hash represented as a hexadecimal string.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetCheckSumOfDotNetSolution(System.String)">
            <summary>
            Gets the checksum of all constituent files appended together. Can be used to determine whether a project
            has changed in any way. You can't do a checksum on the compiled binary, because it is different every time.
            </summary>
            <param name="solutionFile">Path of the *.sln file.</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.ToHexa(System.Byte[])">
            <summary>
            Dump binary data in hexadecimal
            </summary>
            <param name="data">byte array</param>
            <returns>string in hexadecimal format</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetProjectsInVisualStudioSolution(System.String)">
            <summary>
            Gets the project files that are in a Visual Studio 2005 solution.
            </summary>
            <param name="solutionFile">Path of the solution file (*.sln).</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.CompareFileVersions(System.Diagnostics.FileVersionInfo,System.Diagnostics.FileVersionInfo)">
            <summary>
            Returns 0 if the versions are the same, -1 if version1 &lt; version2, and +1 if version1 %gt; version2
            </summary>
            <param name="version1"></param>
            <param name="version2"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.WriteStreamToFile(System.IO.Stream,System.String)">
            <summary>
            Write a stream to a file.
            </summary>
            <param name="filePath"></param>
            <param name="input"></param>
        </member>
        <member name="M:Slyce.Common.Utility.GetFileEncoding(System.String)">
            <summary>
            Return the Encoding of a text file.  Return Encoding.Default if no Unicode
            BOM (byte order mark) is found.
            </summary>
            <param name="fileName">Path of file to inspect.</param>
            <returns>The file's Encoding.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.RelativePathTo(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromDirectory">
            Contains the directory that defines the start of the relative path.
            </param>
            <param name="toPath">
            Contains the path that defines the endpoint of the relative path.
            </param>
            <returns>
            The relative path from the startdirectory to the end path
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Slyce.Common.Utility.SuspendPainting(System.Windows.Forms.Control)">
            <summary>
            Stop control redraw flickering by passing in window (gui-object) handle before performing
            screen updates. Call ResumePainting to resume normal painting operations.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Slyce.Common.Utility.ResumePainting(System.Windows.Forms.Control)">
            <summary>
            Resumes normal painting operations.
            </summary>
        </member>
        <member name="M:Slyce.Common.Utility.GetTextFileContentsBrute(System.String)">
            <summary>
            Tries 10 times to open a file and read the bytes from it,
            sleeping 20ms between each attempt. If all of those attempts fail,
            the last exception is rethrown.
            </summary>
            <param name="path">The file path to load from.</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetTextFileContentsBrute(System.String,System.Int32)">
            <summary>
            Tries 10 times to open a file and read the bytes from it,
            sleeping waitBetweenTries milliseconds between each attempt. If all of those attempts fail,
            the last exception is rethrown.
            </summary>
            <param name="path">The file path to load from.</param>
            <param name="waitBetweenTries"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetMD5HashString(System.String)">
            <summary>
            Create a base64 encoded MD5 hash string of the supplied string.
            </summary>
            <param name="str">The string to hash.</param>
            <returns>The Base64 encoded MD5 hash of the input string.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetMD5FromString(System.String)">
            <summary>
            Gets the 16 byte MD5 hash of the supplied string.
            </summary>
            <param name="str">The string to hash</param>
            <returns>The 16byte array representing the hash.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.GetMD5HashString(System.Byte[])">
            <summary>
            Computes the MD5 hash of the given bytes using the stored MD5Provider. Converts it to a Base64 encoded string.
            </summary>
            <param name="bytes">The bytes to hash.</param>
            <returns>The Base64 encoded MD5 hash.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.CreateMD5HashFileForTextFile(System.String,System.String)">
            <summary>
            Reads the file at fullPath as a text file, creates an MD5 hash of it, and
            stores that as a Base64 encoded string in the file outputPath. If outputPath
            does not exist, it will be created.  This method is limited to files that are
            less that 2^32 bytes in size.
            </summary>
            <param name="fullPath">The path of the text file to create a hash for.</param>
            <param name="outputPath">The path of the file to write the base64 encodedMD5 hash to.</param>
            <returns>The base64 encoded MD5 hash.</returns>
        </member>
        <member name="M:Slyce.Common.Utility.HasFileChangedMD5(System.String,System.String)">
            <summary>
            Checks the contents of the file at filename against the MD5 checksum
            stored in md5Filename. Returns true if either of the files does not exist,
            or if the base64 encoded MD5 string stored in md5Filename is different to
            the one generated from the contents of filename.
            </summary>
            <param name="filename">The file to check using the basse64 encoded MD5 hash in md5Filename</param>
            <param name="md5Filename">The file that contains the base64 encoded MD5 hash.</param>
            <returns>True if either file is non existant, or the MD5 hash of the first matches the hash stored in the second.</returns>
        </member>
        <member name="P:Slyce.Common.Utility.MD5Provider">
            <remarks>
            Do not make this public - we have a locking mechanism on this that should not be
            ignored. Hashing providers are not thread safe, so our single provider should not 
            be used concurrently.
            </remarks>
        </member>
        <member name="F:Slyce.Common.Utility.LineBreaks.Windows">
            <summary>
            "\r\n"
            </summary>
        </member>
        <member name="F:Slyce.Common.Utility.LineBreaks.Unix">
            <summary>
            "\n"
            </summary>
        </member>
        <member name="F:Slyce.Common.Utility.LineBreaks.Mac">
            <summary>
            "\r"
            </summary>
        </member>
        <member name="T:Slyce.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Slyce.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Slyce.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:Slyce.Common.ErrorReporting.frmSendReport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmSendReport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmSendReport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmSendReport.CopyToClipboardThreadSafe">
            <summary>
            See: http://blogs.msdn.com/craigskibo/archive/2004/02/14/73064.aspx
            </summary>
        </member>
        <member name="T:Slyce.Common.Controls.Grouper">
            <summary>A special custom rounding GroupBox with many painting features.</summary>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.#ctor">
            <summary>This method will construct a new GroupBox control.</summary>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.Dispose(System.Boolean)">
            <summary>This method will dispose of the GroupBox control.</summary>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.InitializeStyles">
            <summary>This method will initialize the controls custom styles.</summary>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.InitializeGroupBox">
            <summary>This method will initialize the GroupBox control.</summary>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Overrides the OnPaint method to paint control.</summary>
            <param name="e">The paint event arguments.</param>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.PaintGroupText(System.Drawing.Graphics)">
            <summary>This method will paint the group title.</summary>
            <param name="g">The paint event graphics object.</param>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.PaintBack(System.Drawing.Graphics)">
            <summary>This method will paint the control.</summary>
            <param name="g">The paint event graphics object.</param>
        </member>
        <member name="M:Slyce.Common.Controls.Grouper.GroupBox_Resize(System.Object,System.EventArgs)">
            <summary>This method fires when the GroupBox resize event occurs.</summary>
            <param name="sender">The object the sent the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BackColor">
            <summary>This feature will paint the background color of the control.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.CustomGroupBoxColor">
            <summary>This feature will paint the group title background to the specified color if PaintGroupBox is set to true.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.PaintGroupBox">
            <summary>This feature will paint the group title background to the CustomGroupBoxColor.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.GroupImage">
            <summary>This feature can add a 16 x 16 image to the group title bar.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.ShadowColor">
            <summary>This feature will change the control's shadow color.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.ShadowThickness">
            <summary>This feature will change the size of the shadow border.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BackgroundColor">
            <summary>This feature will change the group control color. This color can also be used in combination with BackgroundGradientColor for a gradient paint.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BackgroundGradientColor">
            <summary>This feature can be used in combination with BackgroundColor to create a gradient background.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BackgroundGradientMode">
            <summary>This feature turns on background gradient painting.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.RoundCorners">
            <summary>This feature will round the corners of the control.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.GroupTitle">
            <summary>This feature will add a group title to the control.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BorderColor">
            <summary>This feature will allow you to change the color of the control's border.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.BorderThickness">
            <summary>This feature will allow you to set the control's border size.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.ShadowControl">
            <summary>This feature will allow you to turn on control shadowing.</summary>
        </member>
        <member name="P:Slyce.Common.Controls.Grouper.ShadowControlForTitle">
            <summary>This feature will allow you to turn on control shadowing for the title.</summary>
        </member>
        <member name="T:Slyce.Common.Controls.Grouper.GroupBoxGradientMode">
            <summary>A special gradient enumeration.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxGradientMode.None">
            <summary>Specifies no gradient mode.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxGradientMode.BackwardDiagonal">
            <summary>Specifies a gradient from upper right to lower left.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxGradientMode.ForwardDiagonal">
            <summary>Specifies a gradient from upper left to lower right.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxGradientMode.Horizontal">
            <summary>Specifies a gradient from left to right.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxGradientMode.Vertical">
            <summary>Specifies a gradient from top to bottom.</summary>
        </member>
        <member name="T:Slyce.Common.Controls.Grouper.GroupBoxConstants">
            <summary>This class holds all GroupBox constants.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxConstants.SweepAngle">
            <summary>The sweep angle of the arc.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxConstants.MinControlHeight">
            <summary>The minimum control height.</summary>
        </member>
        <member name="F:Slyce.Common.Controls.Grouper.GroupBoxConstants.MinControlWidth">
            <summary>The minimum control width.</summary>
        </member>
        <member name="M:Slyce.Common.Colors.ChangeBrightness(System.Drawing.Color,System.Double)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="brightness">Valid values are 0.0 to 1.0. 0 is dark, 1 is light.</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.RGBHSL.SetBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute brightness of a colour 
            </summary> 
            <param name="c">Original colour</param> 
            <param name="brightness">The luminance level to impose</param> 
            <returns>an adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.ModifyBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing brightness level 
            </summary> 
            <remarks> 
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="brightness">The luminance delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.SetSaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute saturation level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Saturation">The saturation value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.ModifySaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Saturation level 
            </summary> 
            <remarks> 
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Saturation">The saturation delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.SetHue(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute Hue level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Hue">The Hue value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.ModifyHue(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Hue level 
            </summary> 
            <remarks> 
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Hue">The Hue delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.HSL_to_RGB(Slyce.Common.RGBHSL.HSL)">
            <summary> 
            Converts a colour from HSL to RGB 
            </summary> 
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks> 
            <param name="hsl">The HSL value</param> 
            <returns>A Color structure containing the equivalent RGB values</returns> 
        </member>
        <member name="M:Slyce.Common.RGBHSL.RGB_to_HSL(System.Drawing.Color)">
            <summary> 
            Converts RGB to HSL 
            </summary> 
            <remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks> 
            <param name="c">A Color to convert</param> 
            <returns>An HSL value</returns> 
        </member>
        <member name="T:Slyce.Common.NodeProcessor">
            <summary>
            Class for getting information from the inner text of an xml node
            and converting it to various different formats
            </summary>
        </member>
        <member name="M:Slyce.Common.IEnumerableExtensions.IEnumerableExtensions.Compliment``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes two lists, and returns the compliment of them.
            Creates a new list that contains the items in list2 that do not exist in list1
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list1"></param>
            <param name="list2"></param>
            <returns></returns>
        </member>
        <member name="F:Slyce.Common.ErrorReporting.frmTransfer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmTransfer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmTransfer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Slyce.Common.Controls.SpinningProgress">
            <summary>
            A spinning progress indicator link the one used in SQL Server Management Studio
            </summary>
        </member>
        <member name="F:Slyce.Common.ErrorReporting.frmDebugWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmDebugWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.ErrorReporting.frmDebugWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.CrossThreadHelper.CallCrossThreadMethod(System.Object,System.String,System.Object[],System.Int32)">
            <summary>
            Calls methodName
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="timeoutMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="F:Slyce.Common.Controls.TableLayoutPanelEx.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.TableLayoutPanelEx.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.TableLayoutPanelEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.ClearConfiguration">
            <summary>
            Clears the current application configuration (app.config) of all settings.
            </summary>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.ClearConfiguration(System.Configuration.Configuration)">
            <summary>
            Clears configuration (app.config) of all settings.
            </summary>
            <param name="config">Configuration to be cleared.</param>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.MergeAppConfigFiles(System.String)">
            <summary>
            Merge the contents of the source config file into the application's current config file.
            </summary>
            <param name="sourceFile"></param>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.MergeAppConfigFiles(System.String,System.String)">
            <summary>
            Merge the contents of the source config file into the destination config file.
            </summary>
            <param name="sourceFile"></param>
            <param name="targetFile"></param>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.InlineExternalSections(System.String)">
            <summary>
            Moves the data from external referenced files into the specified file, making all sections local.
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:Slyce.Common.ConfigurationUtility.MergeAppConfigFiles(System.Configuration.Configuration,System.Configuration.Configuration)">
            <summary>
            Merge the source configuration into the target configuration.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Slyce.Common.ParallelHelper.EachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates through each item in a list in parallel. See: http://blog.robvolk.com/2009/06/parallel-foreach-loop-in-c-35.html
            </summary>
        </member>
        <member name="F:Slyce.Common.Controls.MessagePanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.MessagePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.MessagePanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Slyce.Common.Controls.Line">
            <summary>
            "NiceLine" draws a shaded line separator. Can have an aligned text caption.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Line.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.Line.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.Line.Caption">
            <summary>
            The caption text displayed on the line. 
            If the caption is "" (the default) the line is not broken
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.Line.CaptionMarginSpace">
            <summary>
            The distance in pixels form the control margin to caption text
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.Line.CaptionPadding">
            <summary>
            The space in pixels arrownd text caption
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.Line.LineVerticalAlign">
            <summary>
            The vertical alignement of the line within the space of the control
            </summary>
        </member>
        <member name="P:Slyce.Common.Controls.Line.CaptionOrizontalAlign">
            <summary>
            Tell where the text caption is aligned in the control
            </summary>
        </member>
        <member name="M:Slyce.Common.ReflectionHelper.GetExtensionMethods(System.Collections.Generic.List{System.Reflection.Assembly},System.Collections.Generic.List{System.Type})">
            <summary>
            Gets Dictionary of extension methods for the supplied types from the supplied assemblies.
            </summary>
            <param name="assembliesToSearch">Assemblies to search.</param>
            <param name="types">Types to find extension methods for.</param>
            <returns>Dictionary of extension methods.</returns>
        </member>
        <member name="M:Slyce.Common.ReflectionHelper.GetExtensionMethods(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all extension methods for the supplied type in the supplied assembly.
            See: http://stackoverflow.com/questions/299515/c-reflection-to-identify-extension-methods
            </summary>
            <param name="assembly">Assembly to search.</param>
            <param name="extendedType">Type whose extension methods must be returned.</param>
            <returns>List of extension methods.</returns>
        </member>
        <member name="M:Slyce.Common.IFileController.GetFullPath(System.String)">
            <summary>
            Gets the full absolute path for a given filename, expanding all ..s and .s
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.FileController.ToAbsolutePath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="relativePath"></param>
            <param name="baseFilename"></param>
            <returns></returns>
        </member>
        <member name="T:Slyce.Common.SerializationWriter">
             <summary>
             A SerializationWriter instance is used to store values and objects in a byte array.
            
             Once an instance is created, use the various methods to store the required data.
             ToArray() will return a byte[] containing all of the data required for deserialization.
             This can be stored in the SerializationInfo parameter in an ISerializable.GetObjectData() method.
             <para/>
             As an alternative to ToArray(), if you want to apply some post-processing to the serialized bytes, 
             such as compression, call AppendTokenTables first to ensure that the string and object token tables 
             are appended to the stream, and then cast BaseStream to MemoryStream. You can then access the
             MemoryStream's internal buffer as follows:
             <para/>
             <example><code>
             writer.AppendTokenTables();
             MemoryStream stream = (MemoryStream) writer.BaseStream;
            	serializedData = MiniLZO.Compress(stream.GetBuffer(), (int) stream.Length);
             </code></example>
             </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.HighestOptimizable16BitValue">
            <summary>
            Holds the highest Int16 that can be optimized into less than the normal 2 bytes
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
            Holds the highest Int32 that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
            Holds the highest Int64 that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.DefaultCapacity">
            <summary>
            Default capacity for the underlying MemoryStream
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.DefaultOptimizeForSize">
            <summary>
            The Default setting for the OptimizeForSize property.
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.DefaultPreserveDecimalScale">
            <summary>
            The Default setting for the PreserveDecimalScale property.
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.DateYearMask">
            <summary>
            Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:Slyce.Common.SerializationWriter.IsNegativeSection">
            <summary>
            Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.#ctor">
            <summary>
            Creates a FastSerializer with the Default Capacity (1kb)
            </summary>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.#ctor(System.Int32)">
            <summary>
            Creates a FastSerializer with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a FastSerializer around the specified stream
            Note: The stream must be seekable in this version to allow the token table 
            offset to be written on completion 
            </summary>
            <param name="stream">The seekable stream in which to store data</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Collections.ArrayList)">
            <summary>
            Writes an ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null Arraylist takes 1 byte.
            An empty ArrayList takes 2 bytes.
            The contents are stored using WriteOptimized(ArrayList) which should be used
            if the ArrayList is guaranteed never to be null.
            </summary>
            <param name="value">The ArrayList to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
            Writes a BitArray value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null BitArray takes 1 byte.
            An empty BitArray takes 2 bytes.
            </summary>
            <param name="value">The BitArray value to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream.
            Stored Size: 4 bytes.
            </summary>
            <param name="value">The BitVector32 to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The DateTime value to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Guid)">
            <summary>
            Writes a Guid into the stream.
            Stored Size: 16 bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(Slyce.Common.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows any object implementing IOwnedDataSerializable to serialize itself
            into this SerializationWriter.
            A context may also be used to give the object an indication of what data
            to store. As an example, using a BitVector32 gives a list of flags and
            the object can conditionally store data depending on those flags.
            </summary>
            <param name="target">The IOwnedDataSerializable object to ask for owned data</param>
            <param name="context">An arbtritrary object but BitVector32 recommended</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteObject(System.Object)">
            <summary>
            Stores an object into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on type and/or content.
            
            1 byte: null, DBNull.Value, Boolean
            
            1 to 2 bytes: Int16, UInt16, Byte, SByte, Char, 
            
            1 to 4 bytes: Int32, UInt32, Single, BitVector32
            
            1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
            
            1 or 16 bytes: Guid
            
            1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
            
            Any other object be stored using a .Net Binary formatter but this should 
            only be allowed as a last resort:
            Since this is effectively a different serialization session, there is a 
            possibility of the same shared object being serialized twice or, if the 
            object has a reference directly or indirectly back to the parent object, 
            there is a risk of looping which will throw an exception.
            
            The type of object is checked with the most common types being checked first.
            Each 'section' can be reordered to provide optimum speed but the check for
            null should always be first and the default serialization always last.
            
            Once the type is identified, a SerializedType byte is stored in the stream
            followed by the data for the object (certain types/values may not require
            storage of data as the SerializedType may imply the value).
            
            For certain objects, if the value is within a certain range then optimized
            storage may be used. If the value doesn't meet the required optimization
            criteria then the value is stored directly.
            The checks for optimization may be disabled by setting the OptimizeForSize
            property to false in which case the value is stored directly. This could 
            result in a slightly larger stream but there will be a speed increate to
            compensate.
            </summary>
            <param name="value">The object to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.String)">
            <summary>
            Calls WriteOptimized(string).
            This override to hide base BinaryWriter.Write(string).
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The TimeSpan value to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Type,System.Boolean)">
            <summary>
            Stores a Type object into the stream.
            Stored Size: Depends on the length of the Type's name and whether the fullyQualified parameter is set.
            A null Type takes 1 byte.
            </summary>
            <param name="value">The Type to store.</param>
            <param name="fullyQualified">true to store the AssemblyQualifiedName or false to store the FullName. </param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Collections.ArrayList)">
            <summary>
            Writes an non-null ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty ArrayList takes 1 byte.
            </summary>
            <param name="value">The ArrayList to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
            Writes a BitArray into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty BitArray takes 1 byte.
            </summary>
            <param name="value">The BitArray value to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream using the fewest number of bytes possible.
            Stored Size: 1 to 4 bytes. (.Net is 4 bytes)
             1 to  7 bits takes 1 byte
             8 to 14 bits takes 2 bytes
            15 to 21 bits takes 3 bytes
            22 to 28 bits takes 4 bytes
            -------------------------------------------------------------------
            29 to 32 bits takes 5 bytes - use Write(BitVector32) method instead
            
            Try to order the BitVector32 masks so that the highest bits are least-likely
            to be set.
            </summary>
            <param name="value">The BitVector32 to store. Must not use more than 28 bits.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream using the fewest number of bytes possible.
            Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
            Notes:
            A DateTime containing only a date takes 3 bytes
            (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
            of 5 bytes - no further optimization for this situation felt necessary since it
            is unlikely that a DateTimeKind would be specified without hh:mm also)
            Date plus hh:mm takes 5 bytes.
            Date plus hh:mm:ss takes 6 bytes.
            Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value">The DateTime value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
            Writes a Decimal value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
            Restrictions: None
            </summary>
            <param name="value">The Decimal value to store</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int16)">
            <summary>
            Write an Int16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0x7FFF (16,384 to 32,767) takes 3 bytes
            All negative numbers take 3 bytes
            
            Only call this method if the value is known to be between 0 and 
            16,383 otherwise use Write(Int16 value)
            </remarks>
            <param name="value">The Int16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
            Write an Int32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
            All negative numbers take 5 bytes
            
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value">The Int32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
            Write an Int64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            All negative numbers take 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(Int64 value)
            </remarks>
            <param name="value">The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.String)">
            <summary>
            Writes a string value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on string length
            Notes:
            Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
            Any other single char string is stored as two bytes
            All other strings are stored in a string token list:
            
            The TypeCode representing the current string token list is written first (1 byte), 
            followed by the string token itself (1-4 bytes)
            
            When the current string list has reached 128 values then a new string list
            is generated and that is used for generating future string tokens. This continues
            until the maximum number (128) of string lists is in use, after which the string 
            lists are used in a round-robin fashion.
            By doing this, more lists are created with fewer items which allows a smaller 
            token size to be used for more strings.
            
            The first 16,384 strings will use a 1 byte token.
            The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
            The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
            The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
            Notes:
            hh:mm (time) are always stored together and take 2 bytes.
            If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
            since the seconds are stored in the minutes position.
            If milliseconds are present then 4 bytes.
            In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value">The TimeSpan value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
            Stores a non-null Type object into the stream.
            Stored Size: Depends on the length of the Type's name.
            If the type is a System type (mscorlib) then it is stored without assembly name information,
            otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value">The Type to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt16)">
            <summary>
            Write a UInt16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0xFFFF (16,384 to 65,536) takes 3 bytes
            
            Only call this method if the value is known to  be between 0 and 
            16,383 otherwise use Write(UInt16 value)
            </remarks>
            <param name="value">The UInt16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
            Write a UInt32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
            
            Only call this method if the value is known to  be between 0 and 
            268,435,455 otherwise use Write(UInt32 value)
            </remarks>
            <param name="value">The UInt32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
            Write a UInt64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </remarks>
            <param name="value">The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Boolean[])">
            <summary>
            Writes a Boolean[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Boolean[]).
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Byte[])">
            <summary>
            Writes a Byte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Char[])">
            <summary>
            Writes a Char[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Decimal[]).
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Double[])">
            <summary>
            Writes a Double[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Single[])">
            <summary>
            Writes a Single[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Guid[])">
            <summary>
            Writes a Guid[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Object[])">
            <summary>
            Writes an object[] into the stream.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            A null object[] takes 1 byte.
            An empty object[] takes 2 bytes.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.SByte[])">
            <summary>
            Writes an SByte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.Int16[])">
            <summary>
            Writes an Int16[]or a null into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(decimal[]).
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Boolean[])">
            <summary>
            Writes an optimized Boolean[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            Stored as a BitArray.
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Object[])">
            <summary>
            Writes a not-null object[] into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            An empty object[] takes 1 byte.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Object[],System.Object[])">
            <summary>
            Writes a pair of object[] arrays into the stream using the fewest number of bytes possible.
            The arrays must not be null and must have the same length
            The first array's values are written optimized
            The second array's values are compared against the first and, where identical, will be stored
            using a single byte.
            Useful for storing entity data where there is a before-change and after-change set of value pairs
            and, typically, only a few of the values will have changed.
            </summary>
            <param name="values1">The first object[] value which must not be null and must have the same length as values2</param>
            <param name="values2">The second object[] value which must not be null and must have the same length as values1</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int16[])">
            <summary>
            Writes an Int16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteOptimized(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteNullable(System.ValueType)">
            <summary>
            Writes a Nullable type into the stream.
            Synonym for WriteObject().
            </summary>
            <param name="value">The Nullable value to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a non-null generic Dictionary into the stream.
            </summary>
            <remarks>
            The key and value types themselves are not stored - they must be 
            supplied at deserialization time.
            <para/>
            An array of keys is stored followed by an array of values.
            </remarks>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <param name="value">The generic dictionary.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            Writes a non-null generic List into the stream.
            </summary>
            <remarks>
            The list type itself is not stored - it must be supplied
            at deserialization time.
            <para/>
            The list contents are stored as an array.
            </remarks>
            <typeparam name="T">The list Type.</typeparam>
            <param name="value">The generic List.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteTypedArray(System.Array)">
            <summary>
            Writes a null or a typed array into the stream.
            </summary>
            <param name="values">The array to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.AppendTokenTables">
            <summary>
            Writes the contents of the string and object token tables into the stream.
            Also write the starting offset into the first 4 bytes of the stream.
            Notes:
            Called automatically by ToArray().
            Can be used to ensure that the complete graph is written before using an
            alternate technique of extracting a Byte[] such as using compression on
            the underlying stream.
            </summary>
            <returns>The length of the string and object tables.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.ToArray">
            <summary>
            Returns a byte[] containing all of the serialized data.
            
            The current implementation has the data in 3 sections:
            1) A 4 byte Int32 giving the offset to the 3rd section.
            2) The main serialized data.
            3) The serialized string tokenization lists and object
               tokenization lists.
            
            Only call this method once all of the data has been serialized.
            
            This method appends all of the tokenized data (string and object)
            to the end of the stream and ensures that the first four bytes
            reflect the offset of the tokenized data so that it can be
            deserialized first.
            This is the reason for requiring a rewindable stream.
            
            Future implementations may also allow the serialized data to be
            accessed via 2 byte[] arrays. This would remove the requirement
            for a rewindable stream opening the possibility of streaming the
            serialized data directly over the network allowing simultaneous
            of partially simultaneous deserialization.
            </summary>
            <returns>A byte[] containing all serialized data.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteBytesDirect(System.Byte[])">
            <summary>
            Writes a byte[] directly into the stream.
            The size of the array is not stored so only use this method when
            the number of bytes will be known at deserialization time.
            
            A null value will throw an exception
            </summary>
            <param name="value">The byte[] to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteStringDirect(System.String)">
            <summary>
            Writes a non-null string directly to the stream without tokenization.
            </summary>
            <param name="value">The string to store. Must not be null.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteTokenizedObject(System.Object)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            The object will be serialized once and recreated at deserialization time.
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.WriteTokenizedObject(System.Object,System.Boolean)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            When recreateFromType is set to true, the object's Type will be stored and the object recreated using 
            Activator.GetInstance with a parameterless contructor. This is useful for stateless, factory-type classes.
            
            When recreateFromType is set to false, the object will be serialized once and recreated at deserialization time.
            
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
            <param name="recreateFromType">true if the object can be recreated using a parameterless constructor; 
            false if the object should be serialized as-is</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.encodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Encodes a TimeSpan into the fewest number of bytes.
            Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
            can also use this for .NET 2.0 DateTimeKind information.
            By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
            and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
            unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value">The TimeSpan to store.</param>
            <param name="partOfDateTime">True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan.</param>
            <param name="initialData">The intial data for the BitVector32 - contains DateTimeKind or 0</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.checkOptimizable(System.Boolean,System.String)">
            <summary>
            Checks whether an optimization condition has been met and throw an exception if not.
            
            This method has been made conditional on THROW_IF_NOT_OPTIMIZABLE being set at compile time.
            By default, this is set if DEBUG is set but could be set explicitly if exceptions are required and
            the evaluation overhead is acceptable. 
            If not set, then this method and all references to it are removed at compile time.
            
            Leave at the default for optimum usage.
            </summary>
            <param name="condition">An expression evaluating to true if the optimization condition is met, false otherwise.</param>
            <param name="message">The message to include in the exception should the optimization condition not be met.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.write7bitEncodedSigned32BitValue(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int32) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int32 value to encode.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.write7bitEncodedSigned64BitValue(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int64) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.write7bitEncodedUnsigned32BitValue(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(UInt32) for details of the values that are optimizable.
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.write7bitEncodedUnsigned64BitValue(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(ULong) for details of the values that are optimizable.
            </summary>
            <param name="value">The ULong value to encode.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Boolean[])">
            <summary>
            Internal implementation to store a non-null Boolean[].
            </summary>
            <remarks>
            Stored as a BitArray for optimization.
            </remarks>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Byte[])">
            <summary>
            Internal implementation to store a non-null Byte[].
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Char[])">
            <summary>
            Internal implementation to store a non-null Char[].
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non, null DateTime[] using a BitArray to 
            determine which elements are optimizable.
            </summary>
            <param name="values">The DateTime[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Decimal[])">
            <summary>
            Internal implementation to store a non-null Decimal[].
            </summary>
            <remarks>
            All elements are stored optimized.
            </remarks>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Double[])">
            <summary>
            Internal implementation to store a non-null Double[].
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Single[])">
            <summary>
            Internal implementation to store a non-null Single[].
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Guid[])">
            <summary>
            Internal implementation to store a non-null Guid[].
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Int16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Int32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Int64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.SByte[])">
            <summary>
            Internal implementation to store a non-null SByte[].
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.Int16[])">
            <summary>
            Internal implementation to store a non-null Int16[].
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.UInt16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.UInt16[])">
            <summary>
            Internal implementation to store a non-null UInt16[].
            </summary>
            <param name="values">The UIn16[] to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeObjectArray(System.Object[])">
            <summary>
            Writes the values in the non-null object[] into the stream.
            
            Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
            Other values are stored using WriteObject().
            
            This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeTypeCode(Slyce.Common.SerializedType)">
            <summary>
            Stores the specified SerializedType code into the stream.
            
            By using a centralized method, it is possible to collect statistics for the
            type of data being stored in DEBUG mode.
            
            Use the DumpTypeUsage() method to show a list of used SerializedTypes and
            the number of times each has been used. This method and the collection code
            will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode">The SerializedType to store.</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeTypedArray(System.Array,System.Boolean)">
            <summary>
            Internal implementation to write a non-null typed array into the stream.
            </summary>
            <remarks>
            Checks first to see if the element type is a primitive type and calls the 
            correct routine if so. Otherwise determines the best, optimized method
            to store the array contents.
            <para/>
            An array of object elements never stores its type.
            </remarks>
            <param name="value">The non-null typed array to store.</param>
            <param name="storeType">True if the type should be stored; false otherwise</param>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.isTypeRecreatable(System.Type)">
            <summary>
            Checks whether instances of a Type can be created.
            </summary>
            <remarks>
            A Value Type only needs to implement IOwnedDataSerializable. 
            A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type">The Type to check</param>
            <returns>true if the Type is recreatable; false otherwise.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.arrayElementsAreSameType(System.Object[],System.Type)">
            <summary>
            Checks whether each element in an array is of the same type.
            </summary>
            <param name="values">The array to check</param>
            <param name="elementType">The expected element type.</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.SerializationWriter.writeTypedArrayTypeCode(System.Collections.BitArray,System.Int32)">
            <summary>
            Writes the TypeCode for the Typed Array followed by the number of elements.
            </summary>
            <param name="optimizeFlags"></param>
            <param name="length"></param>
        </member>
        <member name="P:Slyce.Common.SerializationWriter.TypeSurrogates">
            <summary>
            Holds a list of optional IFastSerializationTypeSurrogate instances which
            SerializationWriter and SerializationReader will use to serialize objects
            not directly supported.
            It is important to use the same list on both client and server ends to ensure
            that the same surrogated-types are supported.
            </summary>
        </member>
        <member name="P:Slyce.Common.SerializationWriter.OptimizeForSize">
            <summary>
            Gets or Sets a boolean flag to indicate whether to optimize for size (default)
            by storing data as packed bits or sections where possible.
            Setting this value to false will turn off this optimization and store
            data directly which increases the speed.
            Note: This only affects optimization of data passed to the WriteObject method
            and direct calls to the WriteOptimized methods will always pack data into
            the smallest space where possible.
            </summary>
        </member>
        <member name="P:Slyce.Common.SerializationWriter.PreserveDecimalScale">
            <summary>
            Gets or Sets a boolean flag to indicate whether to preserve the scale within
            a Decimal value when it would have no effect on the represented value.
            Note: a 2m value and a 2.00m value represent the same value but internally they 
            are stored differently - the former has a value of 2 and a scale of 0 and
            the latter has a value of 200 and a scale of 2. 
            The scaling factor also preserves any trailing zeroes in a Decimal number. 
            Trailing zeroes do not affect the value of a Decimal number in arithmetic or 
            comparison operations. However, trailing zeroes can be revealed by the ToString 
            method if an appropriate format string is applied.
            From a serialization point of view, the former will take 2 bytes whereas the 
            latter would take 4 bytes, therefore it is preferable to not save the scale where
            it doesn't affect the represented value.
            </summary>
        </member>
        <member name="T:Slyce.Common.SerializationWriter.SingletonTypeWrapper">
            <summary>
            Private class used to wrap an object that is to be tokenized, and recreated at deserialization by its type.
            </summary>
        </member>
        <member name="T:Slyce.Common.SerializationWriter.UniqueStringList">
            <summary>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2006/10/uniquestringlis.html
            </summary>
        </member>
        <member name="T:Slyce.Common.SerializationReader">
             <summary>
             A SerializationReader instance is used to read stored values and objects from a byte array.
            
             Once an instance is created, use the various methods to read the required data.
             The data read MUST be exactly the same type and in the same order as it was written.
             </summary>
        </member>
        <member name="M:Slyce.Common.SerializationReader.#ctor(System.Byte[])">
            <summary>
            Creates a SerializationReader using a byte[] previous created by SerializationWriter
            
            A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data">The byte[] containining serialized data.</param>
        </member>
        <member name="M:Slyce.Common.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a SerializationReader based on the passed Stream.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadArrayList">
            <summary>
            Returns an ArrayList or null from the stream.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadBitArray">
            <summary>
            Returns a BitArray or null from the stream.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadBitVector32">
            <summary>
            Returns a BitVector32 value from the stream.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadBytesDirect(System.Int32)">
            <summary>
            Reads the specified number of bytes directly from the stream.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>A byte[] containing the read bytes</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadObject">
            <summary>
            Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadString">
            <summary>
            Called ReadOptimizedString().
            This override to hide base BinaryReader.ReadString().
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadStringDirect">
            <summary>
            Returns a string value from the stream.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadType">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadType(System.Boolean)">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedArrayList">
            <summary>
            Returns an ArrayList from the stream that was stored optimized.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedBitArray">
            <summary>
            Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedBitVector32">
            <summary>
            Returns a BitVector32 value from the stream that was stored optimized.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedDateTime">
            <summary>
            Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedDecimal">
            <summary>
            Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt32">
            <summary>
            Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt16">
            <summary>
            Returns an Int16 value from the stream that was stored optimized.
            </summary>
            <returns>An Int16 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt64">
            <summary>
            Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedObjectArray">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            </summary>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedObjectArrayPair(System.Object[]@,System.Object[]@)">
            <summary>
            Returns a pair of object[] arrays from the stream that were stored optimized.
            </summary>
            <returns>A pair of object[] arrays.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedString">
            <summary>
            Returns a string value from the stream that was stored optimized.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedType">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedType(System.Boolean)">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt16">
            <summary>
            Returns a UInt16 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt32">
            <summary>
            Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt64">
            <summary>
            Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadTypedArray">
            <summary>
            Returns a typed array from the stream.
            </summary>
            <returns>A typed array.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDictionary``2">
            <summary>
            Returns a new, simple generic dictionary populated with keys and values from the stream.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <returns>A new, simple, populated generic Dictionary.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Populates a pre-existing generic dictionary with keys and values from the stream.
            This allows a generic dictionary to be created without using the default constructor.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadList``1">
            <summary>
            Returns a generic List populated with values from the stream.
            </summary>
            <typeparam name="T">The list Type.</typeparam>
            <returns>A new generic List.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullable">
            <summary>
            Returns a Nullable struct from the stream.
            The value returned must be cast to the correct Nullable type.
            Synonym for ReadObject();
            </summary>
            <returns>A struct value or null</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableBoolean">
            <summary>
            Returns a Nullable Boolean from the stream.
            </summary>
            <returns>A Nullable Boolean.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableByte">
            <summary>
            Returns a Nullable Byte from the stream.
            </summary>
            <returns>A Nullable Byte.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableChar">
            <summary>
            Returns a Nullable Char from the stream.
            </summary>
            <returns>A Nullable Char.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableDateTime">
            <summary>
            Returns a Nullable DateTime from the stream.
            </summary>
            <returns>A Nullable DateTime.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableDecimal">
            <summary>
            Returns a Nullable Decimal from the stream.
            </summary>
            <returns>A Nullable Decimal.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableDouble">
            <summary>
            Returns a Nullable Double from the stream.
            </summary>
            <returns>A Nullable Double.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableGuid">
            <summary>
            Returns a Nullable Guid from the stream.
            </summary>
            <returns>A Nullable Guid.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableInt16">
            <summary>
            Returns a Nullable Int16 from the stream.
            </summary>
            <returns>A Nullable Int16.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableInt32">
            <summary>
            Returns a Nullable Int32 from the stream.
            </summary>
            <returns>A Nullable Int32.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableInt64">
            <summary>
            Returns a Nullable Int64 from the stream.
            </summary>
            <returns>A Nullable Int64.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableSByte">
            <summary>
            Returns a Nullable SByte from the stream.
            </summary>
            <returns>A Nullable SByte.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableSingle">
            <summary>
            Returns a Nullable Single from the stream.
            </summary>
            <returns>A Nullable Single.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableTimeSpan">
            <summary>
            Returns a Nullable TimeSpan from the stream.
            </summary>
            <returns>A Nullable TimeSpan.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableUInt16">
            <summary>
            Returns a Nullable UInt16 from the stream.
            </summary>
            <returns>A Nullable UInt16.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableUInt32">
            <summary>
            Returns a Nullable UInt32 from the stream.
            </summary>
            <returns>A Nullable UInt32.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadNullableUInt64">
            <summary>
            Returns a Nullable UInt64 from the stream.
            </summary>
            <returns>A Nullable UInt64.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadByteArray">
            <summary>
            Returns a Byte[] from the stream.
            </summary>
            <returns>A Byte instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadCharArray">
            <summary>
            Returns a Char[] from the stream.
            </summary>
            <returns>A Char[] value; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDoubleArray">
            <summary>
            Returns a Double[] from the stream.
            </summary>
            <returns>A Double[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadGuidArray">
            <summary>
            Returns a Guid[] from the stream.
            </summary>
            <returns>A Guid[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadInt16Array">
            <summary>
            Returns an Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadObjectArray">
            <summary>
            Returns an object[] or null from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadObjectArray(System.Type)">
            <summary>
            Returns an object[] or null from the stream.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadSingleArray">
            <summary>
            Returns a Single[] from the stream.
            </summary>
            <returns>A Single[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadSByteArray">
            <summary>
            Returns an SByte[] from the stream.
            </summary>
            <returns>An SByte[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadStringArray">
            <summary>
            Returns a string[] or null from the stream.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadInt32Array">
            <summary>
            Returns an Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadInt64Array">
            <summary>
            Returns an Int64[] from the stream.
            </summary>
            <returns>An Int64[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedStringArray">
            <summary>
            Returns a string[] from the stream that was stored optimized.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadUInt32Array">
            <summary>
            Returns a UInt[] from the stream.
            </summary>
            <returns>A UInt[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt16Array">
            <summary>
            Returns a Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt32Array">
            <summary>
            Returns a Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedInt64Array">
            <summary>
            Returns a Int64[] from the stream.
            </summary>
            <returns>A Int64[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt32Array">
            <summary>
            Returns a UInt32[] from the stream.
            </summary>
            <returns>A UInt32[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOptimizedUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadOwnedData(Slyce.Common.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows an existing object, implementing IOwnedDataSerializable, to 
            retrieve its owned data from the stream.
            </summary>
            <param name="target">Any IOwnedDataSerializable object.</param>
            <param name="context">An optional, arbitrary object to allow context to be provided.</param>
        </member>
        <member name="M:Slyce.Common.SerializationReader.ReadTokenizedObject">
            <summary>
            Returns the object associated with the object token read next from the stream.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.decodeTimeSpan(System.Byte)">
            <summary>
            Returns a TimeSpan decoded from packed data.
            This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
            <remarks>
            This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
            next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
            which are never set for a Time portion of a DateTime.
            </remarks>
            </summary>
            <param name="initialByte">The first of two always-present bytes.</param>
            <returns>A decoded TimeSpan</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readTypedArrayOptimizeFlags(Slyce.Common.SerializedType)">
            <summary>
            Creates a BitArray representing which elements of a typed array
            are serializable.
            </summary>
            <param name="serializedType">The type of typed array.</param>
            <returns>A BitArray denoting which elements are serializable.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.processObject(Slyce.Common.SerializedType)">
            <summary>
            Returns an object based on supplied SerializedType.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.processArrayTypes(Slyce.Common.SerializedType,System.Type)">
            <summary>
            Determine whether the passed-in type code refers to an array type
            and deserializes the array if it is.
            Returns null if not an array type.
            </summary>
            <param name="typeCode">The SerializedType to check.</param>
            <param name="defaultElementType">The Type of array element; null if to be read from stream.</param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readTokenizedString(System.Int32)">
            <summary>
            Returns the string value associated with the string token read next from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readTypeCode">
            <summary>
            Returns the SerializedType read next from the stream.
            </summary>
            <returns>A SerializedType value.</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readBooleanArray">
            <summary>
            Internal implementation returning a Bool[].
            </summary>
            <returns>A Bool[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readByteArray">
            <summary>
            Internal implementation returning a Byte[].
            </summary>
            <returns>A Byte[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readCharArray">
            <summary>
            Internal implementation returning a Char[].
            </summary>
            <returns>A Char[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readDecimalArray">
            <summary>
            Internal implementation returning a Decimal[].
            </summary>
            <returns>A Decimal[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readDoubleArray">
            <summary>
            Internal implementation returning a Double[].
            </summary>
            <returns>A Double[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readGuidArray">
            <summary>
            Internal implementation returning a Guid[].
            </summary>
            <returns>A Guid[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readSByteArray">
            <summary>
            Internal implementation returning an SByte[].
            </summary>
            <returns>An SByte[].</returns>
        </member>
        <member name="M:Slyce.Common.SerializationReader.readSingleArray">
            <summary>
            Internal implementation returning a Single[].
            </summary>
            <returns>A Single[].</returns>
        </member>
        <member name="P:Slyce.Common.SerializationReader.BytesRemaining">
            <summary>
            Returns the number of bytes or serialized remaining to be processed.
            Useful for checking that deserialization is complete.
            
            Warning: Retrieving the Position in certain stream types can be expensive,
            e.g. a FileStream, so use sparingly unless known to be a MemoryStream.
            </summary>
        </member>
        <member name="T:Slyce.Common.OptimizationException">
            <summary>
            Exception thrown when a value being optimized does not meet the required criteria for optimization.
            </summary>
        </member>
        <member name="T:Slyce.Common.IOwnedDataSerializableAndRecreatable">
            <summary>
            Allows a class to specify that it can be recreated during deserialization using a default constructor
            and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="T:Slyce.Common.IOwnedDataSerializable">
            <summary>
            Allows a class to save/retrieve their internal data to/from an existing SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:Slyce.Common.IOwnedDataSerializable.SerializeOwnedData(Slyce.Common.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:Slyce.Common.IOwnedDataSerializable.DeserializeOwnedData(Slyce.Common.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="T:Slyce.Common.IFastSerializationTypeSurrogate">
            <summary>
            Interface to allow helper classes to be used to serialize objects
            that are not directly supported by SerializationWriter/SerializationReader
            </summary>
        </member>
        <member name="M:Slyce.Common.IFastSerializationTypeSurrogate.SupportsType(System.Type)">
            <summary>
            Allows a surrogate to be queried as to whether a particular type is supported
            </summary>
            <param name="type">The type being queried</param>
            <returns>true if the type is supported; otherwise false</returns>
        </member>
        <member name="M:Slyce.Common.IFastSerializationTypeSurrogate.Serialize(Slyce.Common.SerializationWriter,System.Object)">
            <summary>
            FastSerializes the object into the SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter into which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="M:Slyce.Common.IFastSerializationTypeSurrogate.Deserialize(Slyce.Common.SerializationReader,System.Type)">
            <summary>
            Deserializes an object of the supplied type from the SerializationReader.
            </summary>
            <param name="reader">The SerializationReader containing the serialized object.</param>
            <param name="type">The type of object required to be deserialized.</param>
            <returns></returns>
        </member>
        <member name="T:Slyce.Common.SerializedType">
            <summary>
            Stores information about a type or type/value.
            Internal use only.
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.EDITOR_BACK_COLOR_NORMAL">
            <summary>
            The normal background colour of text
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.EDITOR_BACK_COLOR_FADED">
            <summary>
            The background colour of text when it is set to faded. By default this is
            the script language text, but the user can switch this.
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.ASP_DIRECTIVE_COLOUR">
            <summary>
            The colour of the &lt;% and %&gt; tags.
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.languagesMap">
            <summary>
            Dictionary containing mapping from a file extension (.txt) to a syntax language.
            </summary>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.LanguageNameFromEnum(Slyce.Common.TemplateContentLanguage)">
            <summary>
            Gets the display name for the given language.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetLanguageFromFileName(System.String)">
            <summary>
            Tries to determine the language type of the file from its file extension. If it cannot figure it out,
            returns PlainText;
            </summary>
            <param name="filename">The filename of the file to get a language for.</param>
            <returns>The language of the file if one is found, or PlainText if the file extension is not in the list of known file types.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetSyntaxLanguageFromFileName(System.String)">
            <summary>
            Gets the Actipro DynamicSyntaxLanguage for the given file, if one is available.
            Otherwise gets the syntax language for PlainText.
            </summary>
            <param name="filename">The filename to get the language for.</param>
            <returns>The Actipro DynamicSyntaxLanguage for the given file. If no suitable language can be found, the PlainText language is returned.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.DeleteResources">
            <summary>
            Deletes all resource files written to disk
            </summary>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetDynamicLanguage(Slyce.Common.TemplateContentLanguage)">
            <summary>
            Gets a DynamicSyntaxLanguage instance given a Languages enum.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetScriptingLanguage(Slyce.Common.SyntaxEditorHelper.ScriptLanguageTypes)">
            <summary>
            Converts the given ScriptLanguageTypes enum value to a Languages enum value.
            </summary>
            <param name="scriptLanguage"></param>
            <returns></returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.SetupEditorTemplateAndScriptLanguages(ActiproSoftware.SyntaxEditor.SyntaxEditor,Slyce.Common.TemplateContentLanguage,Slyce.Common.SyntaxEditorHelper.ScriptLanguageTypes)">
            <summary>
            Loads two languages and creates a state transition from XML to C# within ASP-style directives.
            </summary>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetTemplateLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream,System.Int32@,System.Int32@)">
            <summary>
            Gets the start and end offsets of the current template language block.
            </summary>
            <param name="stream">The stream to search.</param>
            <param name="newStart">The variable to put the start offset in.</param>
            <param name="newEnd">The variable to put the end offset in.</param>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetEndOfTemplateLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Helper method to find the end of a template language block.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The end offset of the current template lanugage block, excluding the &lt;% token. </returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetStartOfTemplateLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Helper method to find the start of a template language block.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The start offset of the current template lanugage block, excluding the %> token. </returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetEndOfScriptLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Helper method to find the end of a script language block.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The end offset of the current script lanugage block, excluding the %> token. </returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetStartOfScriptLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Helper method to find the start of a script language block.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The start offset of the current script lanugage block, excluding the &lt;% token. </returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetStartOfLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream,System.String,System.String)">
            <summary>
            Gets the offset of the start of the specified language. If the stream is not currently
            in that language, the result is meaningless.
            </summary>
            <param name="stream">The stream to search.</param>
            <param name="language">The language we are currently in and should find the start of.</param>
            <param name="startTokenKey">The token which delimits this language block. If used, stops
            the delimiters being counted as part of the language block.</param>
            <returns>The offset at which the language starts.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetEndOfLanguageBlock(ActiproSoftware.SyntaxEditor.TextStream,System.String,System.String)">
            <summary>
            Gets the offset of the end of the specified language. If the stream is not currently
            in that language, the result is meaningless.
            </summary>
            <param name="stream">The stream to search.</param>
            <param name="language">The language we are currently in and should find the end of.</param>
            <param name="endTokenKey">The token which delimits this language block. If used, stops
            the delimiters being counted as part of the language block.</param>
            <returns>The offset at which the language ends.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.IsEntireLineOneLanguage(ActiproSoftware.SyntaxEditor.DocumentLine,ActiproSoftware.SyntaxEditor.TextStream,System.String)">
            <summary>
            Checks the given line and determines if it is one single language.
            </summary>
            <param name="line">The line to check.</param>
            <param name="stream">The TextStream from the Document the line belongs to. We
            need this because the line does not have a reference to its parent Document.</param>
            <param name="language">The text representation of the language. We compare this against
            stream.Token.Language.Tag.ToString().</param>
            <returns>True if the line contains one language, false if it contains two or more.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetFirstStartScriptTag(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Gets the first index of ASPDirectiveStartToken from the given stream.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The index of the first ASP start token, or -1 if there isn't one
            after the stream's current offset.</returns>
        </member>
        <member name="M:Slyce.Common.SyntaxEditorHelper.GetFirstEndScriptTag(ActiproSoftware.SyntaxEditor.TextStream)">
            <summary>
            Gets the first index of ASPDirectiveEndToken from the given stream.
            </summary>
            <param name="stream">The stream to search.</param>
            <returns>The index of the first ASP end token, or -1 if there isn't one
            after the stream's current offset.</returns>
        </member>
        <member name="T:Slyce.Common.SyntaxEditorHelper.ScriptLanguageTypes">
            <summary>
             Enum representing valid scripting languages.
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.ScriptLanguageTypes.CSharp">
            <summary>
            C# script language type
            </summary>
        </member>
        <member name="F:Slyce.Common.SyntaxEditorHelper.ScriptLanguageTypes.VbNet">
            <summary>
            VB.Net script language type.
            </summary>
        </member>
        <member name="T:Slyce.Common.EventExtensions.EventDisabler">
            <summary>
            Use this class to wrap code blocks up that shouldn't raise events.
            </summary>
            <example>
            using(new EventDisabler(this)) { tbName.Text = "asd"; }
            </example>
        </member>
        <member name="F:Slyce.Common.Controls.SystemTrayPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.SystemTrayPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Slyce.Common.Controls.SystemTrayPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.SystemTrayPopup.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="headingText"></param>
            <param name="text"></param>
        </member>
        <member name="M:Slyce.Common.Controls.SystemTrayPopup.SetOpacities(System.Double,System.Double,System.Double)">
            <summary>
            Sets the opacity values.
            </summary>
            <param name="slide">Opacity during 'slide'.</param>
            <param name="final">Opacity at final display.</param>
            <param name="focused"></param>
        </member>
        <member name="M:Slyce.Common.RelativePaths.RelativeToAbsolutePath(System.String,System.String)">
            <summary>
            Converts a given base and relative path to an absolute path
            </summary>
            <param name="basePath">The base directory path</param>
            <param name="relativePath">A path to the base directory path</param>
            <returns>An absolute path</returns>
        </member>
        <member name="T:Slyce.Common.ObservableTraceListener">
            <summary>
            Class for logging trace calls, and keeping track of calls.
            </summary>
        </member>
        <member name="M:Slyce.Common.ObservableTraceListener.#ctor">
            <summary>
            Creates a TraceListener with the default maximum size of 10000 characters.
            </summary>
        </member>
        <member name="M:Slyce.Common.ObservableTraceListener.#ctor(System.String)">
            <summary>
            Creates a TraceListener with the default maximum size of 10000 characters, with the
            given name.
            </summary>
            ///<param name="name">The name of the System.Diagnostics.TraceListener.</param>
        </member>
        <member name="M:Slyce.Common.ObservableTraceListener.#ctor(System.Int32)">
            <summary>
             Creates a TraceListener with the given maximum size and name.
            </summary>
            <param name="maxCapacity">The maximum number of characters this listener will hold.</param>
        </member>
        <member name="M:Slyce.Common.ObservableTraceListener.#ctor(System.String,System.Int32)">
            <summary>
             Creates a TraceListener with the given maximum size and name.
            </summary>
            <param name="name">The name of the System.Diagnostics.TraceListener.</param>
            <param name="maxCapacity">The maximum number of characters this listener will hold.</param>
        </member>
        <member name="P:Slyce.Common.ObservableTraceListener.MaximumCapacity">
            <summary>
            The maximum number of characters stored by the TraceListener.
            </summary>
        </member>
        <member name="E:Slyce.Common.ObservableTraceListener.TraceUpdated">
            <summary>
            Fired when the TraceListener recieves a message.
            </summary>
        </member>
        <member name="T:Slyce.Common.TraceEventArgs">
            <summary>
            Contains the new text that was added.
            </summary>
        </member>
        <member name="M:Slyce.Common.Controls.DistinctStatus.Clear">
            <summary>
            Clears all controls and data.
            </summary>
        </member>
    </members>
</doc>
