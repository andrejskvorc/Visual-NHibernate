<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.NetMap.Visualization</name>
    </assembly>
    <members>
        <member name="T:Microsoft.NetMap.Visualization.IEdgeDrawer">
             <summary>
             Supports edge drawing.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for drawing the edges
            	of a graph.
            
             <para>
             An implementation is typically meant to be used with a corresponding
             implementation of the <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/> interface, although this
             isn't a requirement.  An edge drawer can determine the type of the vertex
             drawer in use by looking at the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.GraphDrawer"/>
             property on the <see cref="T:Microsoft.NetMap.Visualization.DrawContext"/> object passed to <see cref="M:Microsoft.NetMap.Visualization.IEdgeDrawer.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)"/>.  If the vertex drawer is not of the expected
             corresponding type, the edge drawer should revert to some sensible, if not
             ideal, default behavior.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IEdgeDrawer.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's edges.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IEdgeDrawer.RedrawRequired">
             <summary>
            	Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
            	The implementation must fire this event when a change is made to the
             object that might affect the appearance of the graph.
            
             <para>
             The object owner should handle the event by redrawing the graph.  The
             graph does not need to be laid out again.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IEdgeDrawer.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when a change is made to the
             object that might affect the layout of the graph.
            
             <para>
            	The object owner should lay out the graph and redraw it in response to
             the event.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer">
             <summary>
            	Draws a graph onto a <see cref="T:System.Drawing.Bitmap"/> or <see cref="T:System.Drawing.Graphics"/>
             object.  Allows vertices and edges to be drawn as selected.
             </summary>
            
             <remarks>
            	<see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> is one of several classes provided
             with the NetMap system that draw a graph, which is a set of vertices
             connected by edges.
            
             <para>
            	The following table summarizes the graph-drawing classes:
             </para>
            
            	<list type="table">
            
            	<listheader>
             <term>Class</term>
             <term>For Use In</term>
             <term>Features</term>
             <term>Required NetMap Assemblies</term>
            	</listheader>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.GraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Same as <see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/>, plus vertices and edges can be
             drawn as selected.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term>NetMapControl</term>
            	<term>
            	Windows Forms applications
            	</term>
            	<term>
             Wraps a <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> in a Windows Forms
             control.
            	</term>
            	<term>
            	Core.dll, Visualization.dll, Control.dll
            	</term>
            	</item>
            
            	</list>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> works in conjunction with its
             default <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> objects to allow vertices and edges to
             be selected, and to draw selected vertices and edges in a special manner.
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> uses a different color and
             radius, and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> uses a different color
             and width.
             </para>
            
             <para>
             Use <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/> and <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/> to mark vertices and edges as selected.  Use
             <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertex(Microsoft.NetMap.Core.IVertex)"/> and <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectEdge(Microsoft.NetMap.Core.IEdge)"/> to unmark
             them.  Call one of the <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)"/> or <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Bitmap,System.Boolean)"/> methods to draw the entire graph.  If
             you change the selected state of a vertex or edge, you can either draw the
             entire graph again or call <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Boolean)"/> or <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Boolean)"/> to redraw only the vertices
             and edges that you changed.
             </para>
            
             </remarks>
            
            	<example>
            	Here is sample C# code that populates a graph with several vertices and
             edges, adds metadata to the vertices and edges, selects a vertex and edge,
             sets the graph colors, and draws the graph onto a bitmap.
            
             <code>
            
             // Create an object for drawing graphs.
            
             MultiSelectionGraphDrawer oMultiSelectionGraphDrawer =
                 new MultiSelectionGraphDrawer();
            
             // The object owns an empty graph.  Get the graph's vertex and edge
             // collections.
            
             IGraph oGraph = oMultiSelectionGraphDrawer.Graph;
             IVertexCollection oVertices = oGraph.Vertices;
             IEdgeCollection oEdges = oGraph.Edges;
            
             // Create some vertices and add them to the graph.
            
             IVertex oVertex1 = oVertices.Add();
             IVertex oVertex2 = oVertices.Add();
             IVertex oVertex3 = oVertices.Add();
            
             // Add some metadata to the vertices.  You can use the Key property to
             // add a single piece of metadata, or the SetValue() method to add
             // arbitrary key/value pairs.
            
             oVertex1.Tag = "This is vertex 1.";
             oVertex2.Tag = "This is vertex 2.";
             oVertex3.Tag = "This is vertex 3.";
            
             // Connect some of the vertices with undirected edges.
            
             IEdge oEdge1 = oEdges.Add(oVertex1, oVertex2);
             IEdge oEdge2 = oEdges.Add(oVertex2, oVertex3);
            
             // Add some metadata to the edges.
            
             oEdge1.SetValue("Weight", 5);
             oEdge2.SetValue("Weight", 3);
            
             // Select a vertex and an edge.
            
             MultiSelectionGraphDrawer.SelectVertex(oVertex1);
             MultiSelectionGraphDrawer.SelectEdge(oEdge2);
            
             // Set the graph's colors.
            
             oMultiSelectionGraphDrawer.BackColor = Color.White;
            
             // The MultiSelectionGraphDrawer's default vertex drawer is a
             // VertexDrawer object.
            
             VertexDrawer oVertexDrawer =
                 (VertexDrawer)oMultiSelectionGraphDrawer.VertexDrawer;
            
             oVertexDrawer.Color = Color.Black;
             oVertexDrawer.SelectedColor = Color.Red;
            
             // The MultiSelectionGraphDrawer's default edge drawer is an EdgeDrawer
             // object.
            
             EdgeDrawer oEdgeDrawer = (EdgeDrawer)oMultiSelectionGraphDrawer.EdgeDrawer;
            
             oEdgeDrawer.Color = Color.Black;
             oEdgeDrawer.SelectedColor = Color.Red;
            
             // Create a bitmap and draw the graph onto it.
            
             Bitmap oBitmap = new Bitmap(400, 200);
            
             oMultiSelectionGraphDrawer.Draw(oBitmap, true);
            
             // Do something with the bitmap...
            
             </code>
            
             </example>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer">
             <summary>
            	Draws a graph onto a <see cref="T:System.Drawing.Bitmap"/> or <see cref="T:System.Drawing.Graphics"/>
             object in either a synchronous or asynchronous manner.
             </summary>
            
             <remarks>
            	<see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/> is one of several classes provided with the
             NetMap system that draw a graph, which is a set of vertices connected by
             edges.
            
             <para>
            	The following table summarizes the graph-drawing classes:
             </para>
            
            	<list type="table">
            
            	<listheader>
             <term>Class</term>
             <term>For Use In</term>
             <term>Features</term>
             <term>Required NetMap Assemblies</term>
            	</listheader>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.GraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Same as <see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/>, plus vertices and edges can be
             drawn as selected.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term>NetMapControl</term>
            	<term>
            	Windows Forms applications
            	</term>
            	<term>
             Wraps a <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> in a Windows Forms
             control.
            	</term>
            	<term>
            	Core.dll, Visualization.dll, Control.dll
            	</term>
            	</item>
            
            	</list>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/> draws a graph onto a <see cref="T:System.Drawing.Bitmap"/>
             or <see cref="T:System.Drawing.Graphics"/> object using <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout"/>, <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> objects by default.  The graph can be
             customized by setting the <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.Layout"/>, <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> properties to
             alterative objects, or by deriving a class from this class and overriding
             any of its methods.
             </para>
            
             </remarks>
            
            	<example>
            	Here is sample C# code that populates a graph with several vertices and
             edges, adds metadata to the vertices and edges, sets the graph colors, and
             draws the graph onto a bitmap in an asynchronous manner.
            
             <code>
             TODO: Add asynchronous code.
             </code>
            
             </example>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.GraphDrawer">
             <summary>
            	Draws a graph onto a <see cref="T:System.Drawing.Bitmap"/> or <see cref="T:System.Drawing.Graphics"/>
             object.
             </summary>
            
             <remarks>
            	<see cref="T:Microsoft.NetMap.Visualization.GraphDrawer"/> is one of several classes provided with the
             NetMap system that draw a graph, which is a set of vertices connected by
             edges.
            
             <para>
            	The following table summarizes the graph-drawing classes:
             </para>
            
            	<list type="table">
            
            	<listheader>
             <term>Class</term>
             <term>For Use In</term>
             <term>Features</term>
             <term>Required NetMap Assemblies</term>
            	</listheader>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.GraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Can use custom layouts, vertex drawers, and edge drawers.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term><see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/></term>
            	<term>
            	Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
            	</term>
            	<term>
             Same as <see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/>, plus vertices and edges can be
             drawn as selected.
            	</term>
            	<term>
            	Core.dll, Visualization.dll
            	</term>
            	</item>
            
            	<item>
            	<term>NetMapControl</term>
            	<term>
            	Windows Forms applications
            	</term>
            	<term>
             Wraps a <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> in a Windows Forms
             control.
            	</term>
            	<term>
            	Core.dll, Visualization.dll, Control.dll
            	</term>
            	</item>
            
            	</list>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.GraphDrawer"/> draws a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             <see cref="T:System.Drawing.Graphics"/> object using <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout"/>, <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> objects by default.  The graph can be
             customized by setting the <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.Layout"/>, <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> properties to
             alterative objects, or by deriving a class from this class and overriding
             any of its methods.
             </para>
            
             </remarks>
            
            	<example>
            	Here is sample C# code that populates a graph with several vertices and
             edges, adds metadata to the vertices and edges, sets the graph colors, and
             draws the graph onto a bitmap.
            
             <code>
            
             // Create an object for drawing graphs.
            
             GraphDrawer oGraphDrawer = new GraphDrawer();
            
             // The object owns an empty graph.  Get the graph's vertex and edge
             // collections.
            
             IGraph oGraph = oGraphDrawer.Graph;
             IVertexCollection oVertices = oGraph.Vertices;
             IEdgeCollection oEdges = oGraph.Edges;
            
             // Create some vertices and add them to the graph.
            
             IVertex oVertex1 = oVertices.Add();
             IVertex oVertex2 = oVertices.Add();
             IVertex oVertex3 = oVertices.Add();
            
             // Add some metadata to the vertices.  You can use the Key property to
             // add a single piece of metadata, or the SetValue() method to add
             // arbitrary key/value pairs.
            
             oVertex1.Tag = "This is vertex 1.";
             oVertex2.Tag = "This is vertex 2.";
             oVertex3.Tag = "This is vertex 3.";
            
             // Connect some of the vertices with undirected edges.
            
             IEdge oEdge1 = oEdges.Add(oVertex1, oVertex2);
             IEdge oEdge2 = oEdges.Add(oVertex2, oVertex3);
            
             // Add some metadata to the edges.
            
             oEdge1.SetValue("Weight", 5);
             oEdge2.SetValue("Weight", 3);
            
             // Set the graph's colors.
            
             oGraphDrawer.BackColor = Color.DarkBlue;
            
             // The GraphDrawer's default vertex drawer is a VertexDrawer object.
            
             VertexDrawer oVertexDrawer = (VertexDrawer)oGraphDrawer.VertexDrawer;
            
             oVertexDrawer.Color = Color.White;
            
             // The GraphDrawer's default edge drawer is an EdgeDrawer object.
            
             EdgeDrawer oEdgeDrawer = (EdgeDrawer)oGraphDrawer.EdgeDrawer;
            
             oEdgeDrawer.Color = Color.White;
            
             // Create a bitmap and draw the graph onto it.
            
             Bitmap oBitmap = new Bitmap(400, 200);
            
             oGraphDrawer.Draw(oBitmap);
            
             // Do something with the bitmap...
            
             </code>
            
             </example>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.GraphDrawerBase">
             <summary>
            	Base class for graph drawers.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> implementations.  Its implementations of the <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> public methods provide error checking but usually
             defer the actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.DrawerBase">
             <summary>
             Base class for classes that perform drawing operations.
             </summary>
            
             <remarks>
            	This class implements the <see cref="T:System.IDisposable"/> interface.  The
             derived class should override <see cref="M:Microsoft.NetMap.Visualization.DrawerBase.DisposeManagedObjects"/> if it
             maintains managed objects that should be disposed.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.VisualizationBase">
            <summary>
            Base class for most classes in the <see cref="N:Microsoft.NetMap.Visualization"/> namespace.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VisualizationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.VisualizationBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VisualizationBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VisualizationBase.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.NetMap.Visualization.VisualizationBase.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.NetMap.Visualization.VisualizationBase.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
            
             <para>
             The <see cref="T:Microsoft.NetMap.Core.NetMapBase"/> implementation of this property cannot be
             used because it's marked as internal.  The reason it's internal is
             explained in the comments for the <see cref="P:Microsoft.NetMap.Visualization.VisualizationBase.ArgumentChecker"/> class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.#ctor">
            <summary>
            Initializes a new instance of the DrawerBase class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.Finalize">
            <summary>
            DrawerBase destructor.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.Dispose">
             <summary>
             Dispose method.
             </summary>
            
             <remarks>
            	Performs application-defined tasks associated with freeing, releasing,
             or resetting unmanaged resources.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.FireRedrawRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NetMap.Visualization.DrawerBase.RedrawRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.FireLayoutRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NetMap.Visualization.DrawerBase.LayoutRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.Dispose(System.Boolean)">
             <summary>
             Dispose method.
             </summary>
            
             <remarks>
            	Performs application-defined tasks associated with freeing, releasing,
             or resetting unmanaged resources.
             </remarks>
            
             <param name="bDisposing">
            	See IDisposable.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.DisposeManagedObjects">
             <summary>
             Disposes of managed objects used for drawing.
             </summary>
            
             <remarks>
             The derived class should override this method if it maintains managed
             objects used for drawing.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DrawerBase.m_bDisposed">
            Used to implement IDispose.
        </member>
        <member name="E:Microsoft.NetMap.Visualization.DrawerBase.RedrawRequired">
             <summary>
            	Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
            	The event is fired when a change is made to the object that might
             affect the appearance of the graph.  The object owner should redraw the
             graph but does not have to lay out the graph again.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.DrawerBase.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The event is fired when any change is made to the object that might
             affect the layout of the graph.  The owner should lay out the graph and
             redraw it in response to the event.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.IGraphDrawer">
             <summary>
             Supports graph drawing.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for drawing a graph.
            
             <para>
            	The implementation will typically draw a graph by laying it out via the
            	<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IGraphDrawer.Layout"/>
             object, drawing the edges via repeated calls to the <see cref="M:Microsoft.NetMap.Visualization.IEdgeDrawer.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IGraphDrawer.EdgeDrawer"/>
             object, and drawing the vertices via repeated calls to the <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IGraphDrawer.VertexDrawer"/> object.  The order is important: The edges and
             vertices can't be drawn before <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> sets the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on the vertices, and the vertices
             are drawn after the edges so that the vertices cover the ends of the edges.
             </para>
            
             <para>
             The interface does not define any draw methods, because the arguments
             passed to such methods vary with the implementation.  The implementation
             might draw on a <see cref="T:System.Drawing.Bitmap"/> or a <see cref="T:System.Drawing.Graphics"/> object,
             for example.  It's conceivable that the graph drawer might not even draw
             directly on a visible surface; an implementation might "draw" to a VML
             file, for example.
             </para>
            
             <para>
             If your graph drawer uses an asynchronous layout, you should consider
             implementing the <see cref="T:Microsoft.NetMap.Visualization.IAsyncGraphDrawer"/> interface instead.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IGraphDrawer.GetVertexFromPoint(System.Drawing.Point,Microsoft.NetMap.Core.IVertex@)">
             <overloads>
             Gets the vertex containing a specified point.
             </overloads>
            
             <summary>
             Gets the vertex containing a specified <see cref="T:System.Drawing.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IGraphDrawer.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IGraphDrawer.GetVertexFromPoint(System.Int32,System.Int32,Microsoft.NetMap.Core.IVertex@)">
             <summary>
             Gets the vertex containing a specified coordinate pair.
             </summary>
            
             <param name="x">
             X-coordinate of the point to get a vertex for.
             </param>
            
             <param name="y">
             Y-coordinate of the point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains the point
             (<paramref name="x"/>, <paramref name="y"/>).  If there is such a
             vertex, the vertex is stored at <paramref name="vertex"/> and true is
            	returned.  Otherwise, <paramref name="vertex"/> is set to null and
            	false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IGraphDrawer.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IGraphDrawer.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.NetMap.Core.IGraph"/>.
             </value>
            
             <remarks>
            	An exception is thrown if this property is set to a graph that is
             already owned by another graph drawer.  If you want to simultaneously
             draw the same graph with two different graph drawers, make a copy of
             the graph using IGraph.<see cref="M:Microsoft.NetMap.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IGraphDrawer.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IGraphDrawer.VertexDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's vertices.
             </summary>
            
             <value>
             The object to use to draw the graph's vertices, as an <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IGraphDrawer.EdgeDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's edges.
             </summary>
            
             <value>
             The object to use to draw the graph's edges, as an <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/>.
             </value>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IGraphDrawer.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a vertex
             being added to the graph.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IGraphDrawer.RedrawRequired">
             <summary>
            	Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
            	The implementation fires this event when any change is made to the
             object that might affect the appearance of the graph.
            
             <para>
             The object owner should handle the event by redrawing the graph.  The
             graph does not need to be laid out again.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.GraphDrawerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.Draw(System.Drawing.Bitmap)">
             <overloads>
             Lays out and draws the graph.
             </overloads>
            
             <summary>
             Lays out and draws the graph within the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	<see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.GetVertexFromPoint(System.Drawing.Point,Microsoft.NetMap.Core.IVertex@)">
             <overloads>
             Gets the vertex containing a specified point.
             </overloads>
            
             <summary>
             Gets the vertex containing a specified <see cref="T:System.Drawing.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.GetVertexFromPoint(System.Int32,System.Int32,Microsoft.NetMap.Core.IVertex@)">
             <summary>
             Gets the vertex containing a specified coordinate pair.
             </summary>
            
             <param name="x">
             X-coordinate of the point to get a vertex for.
             </param>
            
             <param name="y">
             Y-coordinate of the point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains the point
             (<paramref name="x"/>, <paramref name="y"/>).  If there is such a
             vertex, the vertex is stored at <paramref name="vertex"/> and true is
            	returned.  Otherwise, <paramref name="vertex"/> is set to null and
            	false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.DrawCore(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.SetSmoothingModeForVerticesAndEdges(System.Drawing.Graphics)">
             <summary>
             Sets the SmoothingMode on a <see cref="T:System.Drawing.Graphics"/> object for drawing
             vertices and edges.
             </summary>
            
             <param name="oGraphics">
             <see cref="T:System.Drawing.Graphics"/> object to set the Smoothing mode on.
             </param>
            
             <returns>
             The previous SmoothingMode.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.DrawNoLayout(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph without laying it out.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             It's assumed that the graph has been laid out before this method is
             called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.DrawBackground(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph's background.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method draws a solid background using <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.BackColor"/>.
             A derived class may override this method to customize the background.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.PreDrawVertices(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Gives the vertex drawer a chance to do any pre-drawing calculations
             and to change vertex locations.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.DrawEdges(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph's edges.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method draws each edge in the graph's Edges collection.  A derived
             class may override this method to customize the edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.DrawVertices(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph's vertices.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method draws each vertex in the graph's Vertices collection.  A
             derived class may override this method to customize the vertices.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.ConnectGraphEvents(Microsoft.NetMap.Core.IGraph)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NetMap.Core.IGraph"/> object's events.
             </summary>
            
             <param name="oGraph">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.ConnectLayoutEvents(Microsoft.NetMap.Visualization.ILayout)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/> object's events.
             </summary>
            
             <param name="oLayout">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.ConnectVertexDrawerEvents(Microsoft.NetMap.Visualization.IVertexDrawer)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/> object's
             events.
             </summary>
            
             <param name="oVertexDrawer">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.ConnectEdgeDrawerEvents(Microsoft.NetMap.Visualization.IEdgeDrawer)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/> object's
             events.
             </summary>
            
             <param name="oEdgeDrawer">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.OnChildLayoutRequired(System.Object,System.EventArgs)">
             <summary>
             Handles the LayoutRequired event on several child objects.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.OnChildRedrawRequired(System.Object,System.EventArgs)">
             <summary>
             Handles the RedrawRequired event on several child objects.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.OnVertexAddedOrRemoved(System.Object,Microsoft.NetMap.Core.VertexEventArgs)">
             <summary>
             Handles the <see cref="E:Microsoft.NetMap.Core.IVertexCollection.VertexAdded"/> and <see cref="E:Microsoft.NetMap.Core.IVertexCollection.VertexRemoved"/>
             events.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oVertexEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.OnEdgeAddedOrRemoved(System.Object,Microsoft.NetMap.Core.EdgeEventArgs)">
             <summary>
             Handles the <see cref="E:Microsoft.NetMap.Core.IEdgeCollection.EdgeAdded"/> and <see cref="E:Microsoft.NetMap.Core.IEdgeCollection.EdgeRemoved"/>
             events.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEdgeEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GraphDrawerBase.m_oGraph">
            Graph to draw.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GraphDrawerBase.m_oLayout">
            Object to use to lay out the graph.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GraphDrawerBase.m_oVertexDrawer">
            Object to use to draw the graph's vertices.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GraphDrawerBase.m_oEdgeDrawer">
            Object to use to draw the graph's edges.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GraphDrawerBase.m_oBackColor">
            Background color.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.GraphDrawerBase.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.NetMap.Core.IGraph"/>.  The default value is a
             <see cref="P:Microsoft.NetMap.Visualization.GraphDrawerBase.Graph"/> with mixed <see cref="P:Microsoft.NetMap.Core.IGraph.Directedness"/>, no
             <see cref="P:Microsoft.NetMap.Core.IGraph.Restrictions"/>, no vertices, and no edges.
             </value>
            
             <remarks>
            	An exception is thrown if this property is set to a graph that is
             already owned by another graph drawer.  If you want to simultaneously
             draw the same graph with two different graph drawers, make a copy of
             the graph using IGraph.<see cref="M:Microsoft.NetMap.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.GraphDrawerBase.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.
             The default value is a <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout"/>
             object.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.GraphDrawerBase.VertexDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's vertices.
             </summary>
            
             <value>
             The object to use to draw the graph's vertices, as an <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/>.  The default value is a <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> object.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.GraphDrawerBase.EdgeDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's edges.
             </summary>
            
             <value>
             The object to use to draw the graph's edges, as an <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/>.  The default value is an <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> object.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.GraphDrawerBase.BackColor">
             <summary>
             Gets or sets the graph's background color.
             </summary>
            
             <value>
             The graph's background color, as a <see cref="T:System.Drawing.Color"/>.  The default
             value is SystemColors.<see cref="P:System.Drawing.SystemColors.Window"/>.
             </value>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawer.#ctor">
            <summary>
            Initializes a new instance of the GraphDrawer class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawer.DrawCurrentLayout(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Draws the graph without laying it out.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             It's assumed that the graph has been laid out before this method is
             called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawer.DrawCore(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             The arguments have already been checked for validity.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawer.DrawAfterOptionalLayout(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Optionally lays out and then draws the graph within a specified
             rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <param name="layOutGraph">
             true to lay out the graph before drawing it.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GraphDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.IAsyncGraphDrawer">
             <summary>
             Supports graph drawing using an event-based asynchronous pattern.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for drawing a graph
            	in either a synchronous or asynchronous manner.
            
             <para>
             Neither this interface nor its base <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> interface
             define any Draw methods, because the arguments passed to such methods vary
             with the implementation.  The implementation might draw on a <see cref="T:System.Drawing.Bitmap"/> or a <see cref="T:System.Drawing.Graphics"/> object, for example.  It's
             conceivable that the graph drawer might not even draw directly on a visible
             surface; an implementation might "draw" to a VML file, for example.
             </para>
            
             <para>
             The implemention must define at least one synchronouos Draw method, along
             with an asynchronous DrawAsync counterpart that follows the guidelines
             outlined in the article "Multithreaded Programming with the Event-based
             Asynchronous Pattern" in the .NET Framework Developer's Guide.  The
             DrawAsync method starts the drawing on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the drawing is complete, an
             error occurs, or the drawing is cancelled.  <see cref="M:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncCancel"/>
             cancels the drawing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.GetVertexFromPoint(System.Drawing.Point,Microsoft.NetMap.Core.IVertex@)">
             <overloads>
             Gets the vertex containing a specified point.
             </overloads>
            
             <summary>
             Gets the vertex containing a specified <see cref="T:System.Drawing.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.GetVertexFromPoint(System.Int32,System.Int32,Microsoft.NetMap.Core.IVertex@)">
             <summary>
             Gets the vertex containing a specified coordinate pair.
             </summary>
            
             <param name="x">
             X-coordinate of the point to get a vertex for.
             </param>
            
             <param name="y">
             Y-coordinate of the point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains the point
             (<paramref name="x"/>, <paramref name="y"/>).  If there is such a
             vertex, the vertex is stored at <paramref name="vertex"/> and true is
            	returned.  Otherwise, <paramref name="vertex"/> is set to null and
            	false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncCancel">
             <summary>
             Cancels the drawing started by a DrawAsync method.
             </summary>
            
             <remarks>
             The drawing may or may not cancel, but the <see cref="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a drawing is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.NetMap.Core.IGraph"/>.
             </value>
            
             <remarks>
            	An exception is thrown if this property is set to a graph that is
             already owned by another graph drawer.  If you want to simultaneously
             draw the same graph with two different graph drawers, make a copy of
             the graph using IGraph.<see cref="M:Microsoft.NetMap.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.
             </value>
            
             <remarks>
             The object must implement <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/> as well as <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.  An exception is thrown if the object does not
             implement <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/>.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.VertexDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's vertices.
             </summary>
            
             <value>
             The object to use to draw the graph's vertices, as an <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.EdgeDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's edges.
             </summary>
            
             <value>
             The object to use to draw the graph's edges, as an <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncIterationCompleted">
             <summary>
            	Occurs when a drawing started by a DrawAsync method completes one
             iteration.
             </summary>
            
             <remarks>
             If the <see cref="P:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.Layout"/> uses an iterative algorithm in which the
             graph is laid out and drawn multiple times before it reaches its final
             layout, this event fires after each iteration is completed.
            
             <para>
             The event fires on the thread on which the DrawAsync method was called.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.DrawAsyncCompleted">
             <summary>
            	Occurs when a drawing started by a DrawAsync method completes,
             is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which the DrawAsync method was called.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a vertex
             being added to the graph.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncGraphDrawer.RedrawRequired">
             <summary>
            	Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
            	The implementation fires this event when any change is made to the
             object that might affect the appearance of the graph.  It does not fire
             when a graph is being drawn asynchronously and the drawing completes
             one iteration.
            
             <para>
             The object owner should handle the event by redrawing the graph.  The
             graph does not need to be laid out again.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.AsyncGraphDrawer"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Draw(System.Drawing.Bitmap)">
             <overloads>
             Lays out and draws the graph.
             </overloads>
            
             <summary>
             Draws the graph within the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	<see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Lays out and draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.GetVertexFromPoint(System.Drawing.Point,Microsoft.NetMap.Core.IVertex@)">
             <overloads>
             Gets the vertex containing a specified point.
             </overloads>
            
             <summary>
             Gets the vertex containing a specified <see cref="T:System.Drawing.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.GetVertexFromPoint(System.Int32,System.Int32,Microsoft.NetMap.Core.IVertex@)">
             <summary>
             Gets the vertex containing a specified coordinate pair.
             </summary>
            
             <param name="x">
             X-coordinate of the point to get a vertex for.
             </param>
            
             <param name="y">
             Y-coordinate of the point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.NetMap.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains the point
             (<paramref name="x"/>, <paramref name="y"/>).  If there is such a
             vertex, the vertex is stored at <paramref name="vertex"/> and true is
            	returned.  Otherwise, <paramref name="vertex"/> is set to null and
            	false is returned.
            
            	<para>
             The graph should be drawn before this method is used.  If the graph
             hasn't been drawn, the return value is unpredictable.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsync(System.Drawing.Bitmap)">
             <overloads>
             Asynchronously lays out and draws the graph.
             </overloads>
            
             <summary>
             Lays out and draws the graph within the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <remarks>
             This method starts laying out and drawing the graph on a worker thread
             and returns immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire repeatedly while
             the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event
             fires when the drawing is complete, an error occurs, or the drawing is
             cancelled.  <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsync(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Asynchronously lays out and draws the graph within a specified
             rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	<see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             This method starts laying out and drawing the graph on a worker thread
             and returns immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire repeatedly while
             the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event
             fires when the drawing is complete, an error occurs, or the drawing is
             cancelled.  <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsync(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Asynchronously lays out and draws the graph within a specified
             rectangle of a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             This method starts laying out and drawing the graph on a worker thread
             and returns immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire repeatedly while
             the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event
             fires when the drawing is complete, an error occurs, or the drawing is
             cancelled.  <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel">
             <summary>
             Cancels the drawing started by a DrawAsync method.
             </summary>
            
             <remarks>
             The drawing may or may not cancel, but the <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a drawing is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.ConnectLayoutEvents(Microsoft.NetMap.Visualization.ILayout)">
             <summary>
             Connects event handlers to an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/> object's events.
             </summary>
            
             <param name="oLayout">
             Object whose events need to be handled.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.CheckBusy(System.String)">
             <summary>
             Throws an exception if a drawing is in progress.
             </summary>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.FireDrawAsyncIterationCompleted">
            <summary>
            Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event if
            appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.FireDrawAsyncCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
            	Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event if appropriate.
             </summary>
            
             <param name="oAsyncCompletedEventArgs">
             An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Layout_LayOutGraphIterationCompleted(System.Object,System.EventArgs)">
             <summary>
             Handles the <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphIterationCompleted"/>
             event.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Layout_LayOutGraphCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
             Handles the <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphCompleted"/> event.
             </summary>
            
             <param name="oSender">
             Standard event argument.
             </param>
            
             <param name="oAsyncCompletedEventArgs">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncGraphDrawer.m_bIsBusy">
            true if an asynchronous drawing is in progress.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncGraphDrawer.m_oDrawContext">
            Provides access to objects needed for asynchronous drawing, or null if
            no asynchronous drawing is in progress.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncGraphDrawer.m_oGraphicsState">
            Original state of the Graphics object in m_oDrawContext, or null if no
            asynchronous drawing is in progress.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncGraphDrawer.m_bDisposeGraphics">
            true if the Graphics object in m_oDrawContext must be disposed when
            done drawing.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.NetMap.Core.IGraph"/>.  The default value is a
             <see cref="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Graph"/> with mixed <see cref="P:Microsoft.NetMap.Core.IGraph.Directedness"/>, no
             <see cref="P:Microsoft.NetMap.Core.IGraph.Restrictions"/>, no vertices, and no edges.
             </value>
            
             <remarks>
            	An exception is thrown if this property is set to a graph that is
             already owned by another graph drawer.  If you want to simultaneously
             draw the same graph with two different graph drawers, make a copy of
             the graph using IGraph.<see cref="M:Microsoft.NetMap.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
            
             <para>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.
             </value>
            
             <remarks>
             The object must implement <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/> as well as <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>.  An exception is thrown if the object does not
             implement <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/>.
            
             <para>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous drawing is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous drawing is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted">
             <summary>
            	Occurs when a drawing started by a DrawAsync method completes one
             iteration.
             </summary>
            
             <remarks>
             If the <see cref="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.Layout"/> uses an iterative algorithm in which the
             graph is laid out and drawn multiple times before it reaches its final
             layout, this event fires after each iteration is completed.
            
             <para>
             The event fires on the thread on which the DrawAsync method was called.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted">
             <summary>
            	Occurs when a drawing started by a DrawAsync method completes,
             is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which the DrawAsync method was called.
            
             <para>
             If the drawing was cancelled by <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/>, the
             AsyncCompletedEventArgs.<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property is set to true.
             If an exception is thrown during drawing, the
             AsyncCompletedEventArgs.<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>
             property is set to the exception.  If you want to determine whether the
             drawing successfully completed, you must check both of these
             properties.
             </para>
            
             <para>
             Do not check for errors by putting a try/catch block around the
             DrawAsync call.  Check the AsyncCompletedEventArgs.<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property instead.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.AsyncGraphDrawer.AsyncLayout">
             <summary>
             Gets the object to use to lay out the graph asynchronously.
             </summary>
            
             <value>
             The object to use to lay out the graph asynchronously, as an <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/>.
             </value>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectedValue">
            <summary>
            Value to pass to <see cref="M:Microsoft.NetMap.Core.GraphVertexEdgeBase.SetValue(System.String,System.Object)"/> to select
            a vertex or edge.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap)">
             <overloads>
             Draws the graph.
             </overloads>
            
             <summary>
             Draws the graph onto the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>,
             as unselected.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <remarks>
             All vertices and edges are drawn as unselected.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>, as unselected.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	<see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             All vertices and edges are drawn as unselected.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object, as unselected.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             All vertices and edges are drawn as unselected.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)">
             <summary>
             Draws the graph onto the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	Rectangle to draw within.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Draws the graph onto a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             An exception is thrown if an asynchronous drawing is in progress.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Bitmap)">
             <overloads>
             Asynchronously draws the graph.
             </overloads>
            
             <summary>
             Draws the graph within the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>,
             as unselected.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Asynchronously draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>, as unselected.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	<see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
             Asynchronously draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Graphics"/> object, as unselected.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Bitmap,System.Boolean)">
             <summary>
             Asynchronously draws the graph onto the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Asynchronously draws the graph within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.
             </param>
            
             <param name="graphRectangle">
            	Rectangle to draw within.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawAsync(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Asynchronously draws the graph onto a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.
             </param>
            
             <param name="drawSelection">
            	If true and there are selected vertices or edges, those vertices and
             edges are drawn as selected.  Otherwise, all vertices and edges are
             drawn as unselected.
             </param>
            
             <remarks>
             This method starts drawing the graph on a worker thread and returns
             immediately.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncIterationCompleted"/> event may fire
             repeatedly while the drawing is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCompleted"/> event fires when the
             drawing is complete, an error occurs, or the drawing is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.AsyncGraphDrawer.DrawAsyncCancel"/> cancels the drawing.
            
             <para>
             An exception is thrown if an asynchronous drawing is already in
             progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Boolean)">
             <overloads>
             Redraws a vertex.
             </overloads>
            
             <summary>
             Redraws a vertex onto the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="vertex">
             Vertex to redraw.
             </param>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.  Should be the same bitmap that was
             used when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="vertex"/> is selected, it is drawn as
             selected.  Otherwise, it is drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single vertex within a graph that was
             drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)"/>.  This is useful when you
             change the selected state of a vertex and you don't want to redraw the
             entire graph.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Redraws a vertex within a specified rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="vertex">
             Vertex to redraw.
             </param>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.  Should be the same bitmap that was
             used when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.  Should be the same rectangle that was used
             when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="vertex"/> is selected, it is drawn as
             selected.  Otherwise, it is drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single vertex within a graph that was
             drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.  This is
             useful when you change the selected state of a vertex and you don't
             want to redraw the entire graph.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Redraws a vertex onto a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="vertex">
             Vertex to redraw.
             </param>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.  Should be connected to
             the same drawing surface that was used when the entire graph was drawn
             by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.  Should be the same rectangle that was used
             when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="vertex"/> is selected, it is drawn as
             selected.  Otherwise, it is drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single vertex within a graph that was
             drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.  This is
             useful when you change the selected state of a vertex and you don't
             want to redraw the entire graph.
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Boolean)">
             <overloads>
             Redraws an edge.
             </overloads>
            
             <summary>
             Redraws an edge onto the entire rectangle of a <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="edge">
             Edge to redraw.
             </param>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.  Should be the same bitmap that was
             used when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="edge"/> or its vertices are selected, they
             are drawn as selected.  Otherwise, they are drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single edge within a graph that was
             drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Boolean)"/>.  This is useful when you
             change the selected state of an edge and you don't want to redraw the
             entire graph.
            
             <para>
             Because drawing a single edge may cover up the edge's vertices, this
             method redraws the edge's vertices after redrawing the edge.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Redraws an edge within a specified rectangle of a
             <see cref="T:System.Drawing.Bitmap"/>.
             </summary>
            
             <param name="edge">
             Edge to redraw.
             </param>
            
             <param name="bitmap">
             <see cref="T:System.Drawing.Bitmap"/> to draw onto.  Should be the same bitmap that was
             used when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.  Should be the same rectangle that was used
             when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="edge"/> or its vertices are selected, they
             are drawn as selected.  Otherwise, they are drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single edge within a graph that was drawn
             by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)"/>.  This is useful
             when you change the selected state of an edge and you don't want to
             redraw the entire graph.
            
             <para>
             Because drawing a single edge may cover up the edge's vertices, this
             method redraws the edge's vertices after redrawing the edge.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Redraws an edge onto a <see cref="T:System.Drawing.Graphics"/> object.
             </summary>
            
             <param name="edge">
             Edge to redraw.
             </param>
            
             <param name="graphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.  Should be connected to
             the same drawing surface that was used when the entire graph was drawn
             by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="graphRectangle">
             Rectangle to draw within.  Should be the same rectangle that was used
             when the entire graph was drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.
             </param>
            
             <param name="drawSelection">
            	If true and <paramref name="edge"/> or its vertices are selected, they
             are drawn as selected.  Otherwise, they are drawn as unselected.
             </param>
            
             <remarks>
             Use this method to redraw a single edge within a graph that was
             drawn by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)"/>.  This is
             useful when you change the selected state of an edge and you don't
             want to redraw the entire graph.
            
             <para>
             Because drawing a single edge may cover up the edge's vertices, this
             method redraws the edge's vertices after redrawing the edge.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)">
             <overloads>
             Changes the selected state of a vertex.
             </overloads>
            
             <summary>
             Selects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to select, as an <see cref="T:Microsoft.NetMap.Core.IVertex"/>.
             </param>
            
             <remarks>
             This method adds a "selected" flag to <paramref name="vertex"/>.  It
             does not redraw <paramref name="vertex"/>.  You must either draw the
             entire graph again, or call <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Boolean)"/> to redraw only
             <paramref name="vertex"/>.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertex(Microsoft.NetMap.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.VertexIsSelected(Microsoft.NetMap.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex,System.Boolean)">
             <summary>
             Selects or deselects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to select or deselect, as an <see cref="T:Microsoft.NetMap.Core.IVertex"/>.
             </param>
            
             <param name="select">
             true to select <paramref name="vertex"/>, false to deselect it.
             </param>
            
             <remarks>
             If <paramref name="select"/> is true, this method adds a "selected"
             flag to <paramref name="vertex"/>.  Otherwise, the flag is removed if
             it exists.
            
             <para>
             This method does not redraw <paramref name="vertex"/>.  You must
             either draw the entire graph again, or call <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Boolean)"/> to redraw only
             <paramref name="vertex"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertex(Microsoft.NetMap.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.VertexIsSelected(Microsoft.NetMap.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertex(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Deselects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to deselect, as an <see cref="T:Microsoft.NetMap.Core.IVertex"/>.
             </param>
            
             <remarks>
             This method removes the "selected" flag from <paramref name="vertex"/>, if the flag exists.  It does not redraw <paramref name="vertex"/>.  You must either draw the entire graph again, or call
             <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawVertex(Microsoft.NetMap.Core.IVertex,System.Drawing.Bitmap,System.Boolean)"/> to redraw only
             <paramref name="vertex"/>.
            
             <para>
             If <paramref name="vertex"/> is not selected, this method does
             nothing.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.VertexIsSelected(Microsoft.NetMap.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.VertexIsSelected(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Determines whether a vertex is selected.
             </summary>
            
             <param name="vertex">
             Vertex to check, as an <see cref="T:Microsoft.NetMap.Core.IVertex"/>.
             </param>
            
             <returns>
             true if <paramref name="vertex"/> is selected, false if it is not.
             </returns>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertex(Microsoft.NetMap.Core.IVertex)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)">
             <overloads>
             Changes the selected state of an edge.
             </overloads>
            
             <summary>
             Selects an edge.
             </summary>
            
             <param name="edge">
             Edge to select, as an <see cref="T:Microsoft.NetMap.Core.IEdge"/>.
             </param>
            
             <remarks>
             This method adds a "selected" flag to <paramref name="edge"/>.  It
             does not redraw <paramref name="edge"/>.  You must either draw the
             entire graph again, or call <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Boolean)"/> to redraw only
             <paramref name="edge"/>.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectEdge(Microsoft.NetMap.Core.IEdge)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.EdgeIsSelected(Microsoft.NetMap.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge,System.Boolean)">
             <summary>
             Selects or deselects an edge.
             </summary>
            
             <param name="edge">
             Edge to select or deselect, as an <see cref="T:Microsoft.NetMap.Core.IEdge"/>.
             </param>
            
             <param name="select">
             true to select <paramref name="edge"/>, false to deselect it.
             </param>
            
             <remarks>
             If <paramref name="select"/> is true, this method adds a "selected"
             flag to <paramref name="edge"/>.  Otherwise, the flag is removed if
             it exists.
            
             <para>
             This method does not redraw <paramref name="edge"/>.  You must either
             draw the entire graph again, or call <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Boolean)"/> to redraw only <paramref name="edge"/>.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectEdge(Microsoft.NetMap.Core.IEdge)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.EdgeIsSelected(Microsoft.NetMap.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectEdge(Microsoft.NetMap.Core.IEdge)">
             <summary>
             Deselects an edge.
             </summary>
            
             <param name="edge">
             Edge to deselect, as an <see cref="T:Microsoft.NetMap.Core.IEdge"/>.
             </param>
            
             <remarks>
             This method removes the "selected" flag from <paramref name="edge"/>, if the flag exists.  It does not redraw <paramref name="edge"/>.  You must either draw the entire graph again, or call
             <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.RedrawEdge(Microsoft.NetMap.Core.IEdge,System.Drawing.Bitmap,System.Boolean)"/> to redraw only
             <paramref name="edge"/>.
            
             <para>
             If <paramref name="edge"/> is not selected, this method does nothing.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.EdgeIsSelected(Microsoft.NetMap.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.EdgeIsSelected(Microsoft.NetMap.Core.IEdge)">
             <summary>
             Determines whether an edge is selected.
             </summary>
            
             <param name="edge">
             Edge to check, as an <see cref="T:Microsoft.NetMap.Core.IEdge"/>.
             </param>
            
             <returns>
             true if <paramref name="edge"/> is selected, false if it is not.
             </returns>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/>
             <seealso cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectEdge(Microsoft.NetMap.Core.IEdge)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertexOrEdge(Microsoft.NetMap.Core.IMetadataProvider,System.Boolean)">
             <summary>
             Selects or deselects a vertex or edge.
             </summary>
            
             <param name="vertexOrEdge">
             Vertex or edge to select or deselect, as an <see cref="T:Microsoft.NetMap.Core.IMetadataProvider"/>.
             </param>
            
             <param name="select">
             true to select <paramref name="vertexOrEdge"/>, false to deselect it.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertexOrEdge(Microsoft.NetMap.Core.IMetadataProvider)">
             <overloads>
             Changes the selected state of a vertex or edge.
             </overloads>
            
             <summary>
             Selects a vertex or edge.
             </summary>
            
             <param name="vertexOrEdge">
             Vertex or edge to select, as an <see cref="T:Microsoft.NetMap.Core.IMetadataProvider"/>.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DeselectVertexOrEdge(Microsoft.NetMap.Core.IMetadataProvider)">
             <summary>
             Deselects a vertex or edge.
             </summary>
            
             <param name="vertexOrEdge">
             Vertex or edge to deselect, as an <see cref="T:Microsoft.NetMap.Core.IMetadataProvider"/>.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.VertexOrEdgeIsSelected(Microsoft.NetMap.Core.IMetadataProvider)">
             <summary>
             Determines whether a vertex or edge is selected.
             </summary>
            
             <param name="vertexOrEdge">
             Vertex or edge to check, as an <see cref="T:Microsoft.NetMap.Core.IMetadataProvider"/>.
             </param>
            
             <returns>
             true if <paramref name="vertexOrEdge"/> is selected, false if it is
             not.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.CheckVertexOrEdge(System.String,System.String,Microsoft.NetMap.Core.IMetadataProvider)">
             <summary>
             Throws an exception if a vertex or edge argument passed to one of the
             static vertex/edge selection methods is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument.
             </param>
            
             <param name="oVertexOrEdge">
             Vertex or edge to check, as an <see cref="T:Microsoft.NetMap.Core.IMetadataProvider"/>.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawEdges(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph's edges.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method draws each edge in the graph's Edges collection.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.DrawVertices(Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws the graph's vertices.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method draws each vertex in the graph's Vertices collection.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.CreateDrawContext(System.Drawing.Graphics,System.Drawing.Rectangle)">
             <summary>
            	Creates a <see cref="T:Microsoft.NetMap.Visualization.DrawContext"/> object for use when redrawing a
             vertex or edge.
             </summary>
            
             <param name="oGraphics">
             <see cref="T:System.Drawing.Graphics"/> object to draw onto.
             </param>
            
             <param name="oGraphRectangle">
             <see cref="T:System.Drawing.Rectangle"/> to draw within.
             </param>
            
             <returns>
             A new <see cref="T:Microsoft.NetMap.Visualization.DrawContext"/> object.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SetUseSelection(System.Boolean)">
             <summary>
             Sets the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> properties if possible.
             </summary>
            
             <param name="bUseSelection">
             true if the selected state of a vertex or edge should be used.
             </param>
            
             <remarks>
             If the current vertex drawer is a <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, this method sets its <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> property to <paramref name="bUseSelection"/>.
            
             <para>
             If the current edge drawer is an <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/>, this method sets its <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> property to <paramref name="bUseSelection"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.m_bDrawSelection">
            true if selected vertices and edges should be drawn as selected, false
            if all vertices and edges should be drawn as unselected.
        </member>
        <member name="T:Microsoft.NetMap.Visualization.EdgeDrawer">
             <summary>
            	Draws an edge as a simple line.
             </summary>
            
             <remarks>
            	This class draws an edge as a simple line connecting the edge's vertices.
             It is meant to be used with <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>, whose <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> is taken into account when the edge is drawn.
             If a vertex drawer other than <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> is used, the edge
             is drawn between the centers of the edge's vertices.
            
             <para>
             This class works in conjunction with <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> to draw edges as either selected or
             unselected.  If an edge has been marked as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/>, it is drawn using
             <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>.  Otherwise,
             <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> are used.  Set the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> property to false to force all edges to be drawn as
             unselected.
             </para>
            
             <para>
             If this class is used by a graph drawer other than <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/>, all edges are drawn as unselected.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.EdgeDrawerBase">
             <summary>
            	Base class for edge drawers.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/> implementations.  Its implementations of the <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
            
             <para>
             If an edge has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.Hide"/> key, the edge
             isn't drawn.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's edges.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.DrawEdgeCore(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's edges.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.SelfLoopBezierWidth">
            Offsets of the control points of the Bezier curve used to draw a
            self-loop.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.SelfLoopBezierHeight">
            
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleSelfLoopBezierWidth">
            Offsets of the control points of the Bezier curve used to draw a
            self-loop on a rectangular vertex.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleSelfLoopBezierHeight">
            
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleSelfLoopBezierPoint3Offset">
            Offset of point 3 from point 0 in the Bezier curve used to draw a self-
            loop on a rectangular vertex.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.#ctor">
            <summary>
            Initializes a new instance of the EdgeDrawer class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.DrawEdgeCore(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's edges.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.DrawSelfLoop(System.Drawing.Pen,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge that is a self-loop.
             </summary>
            
             <param name="pen">
             Pen to use.
             </param>
            
             <param name="vertex">
             Vertex that the edge connects to itself.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetActualColor(Microsoft.NetMap.Core.IEdge,System.Boolean)">
             <summary>
             Gets the actual color to use for an edge.
             </summary>
            
             <param name="edge">
             The edge to get the actual color for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="edge"/> should be shown as selected.
             </param>
            
             <returns>
             The actual color to use.
             </returns>
            
             <remarks>
             This base class uses either <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/> or <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/> as the actual edge color.  A derived class can
             use an actual color that differs from this by overriding this virtual
             method.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetActualWidth(Microsoft.NetMap.Core.IEdge,System.Boolean)">
             <summary>
             Gets the actual width to use for an edge.
             </summary>
            
             <param name="edge">
             The edge to get the actual width for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="edge"/> should be shown as selected.
             </param>
            
             <returns>
             The actual width to use.
             </returns>
            
             <remarks>
             This base class uses either <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> or <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/> as the actual edge width.  A derived class can
             use an actual width that differs from this by overriding this virtual
             method.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetPen(Microsoft.NetMap.Core.IEdge,System.Boolean,System.Boolean)">
             <summary>
             Gets a pen to use to draw the edge.
             </summary>
            
             <param name="oEdge">
             The edge to draw.
             </param>
            
             <param name="bShowArrow">
             true if the pen should include an arrow on the front-vertex end of the
             edge.
             </param>
            
             <param name="bShowAsSelected">
             true if the edge should be shown as selected.
             </param>
            
             <returns>
             The pen to use to draw the edge.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetVertexRadius(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.Single@)">
             <summary>
             Gets the radius of one of the edge's vertices, if possible.
             </summary>
            
             <param name="oVertex">
             One of the edge's vertices.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="fVertexRadius">
             Where the radius gets stored if true is returned.
             </param>
            
             <returns>
             true if the radius was obtained, false if not.
             </returns>
            
             <remarks>
             If a <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> is being used, this method stores the
             actual radius of <paramref name="oVertex"/> at <paramref name="fVertexRadius"/> and returns true.  false is returned otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetVertexShape(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,Microsoft.NetMap.Visualization.VertexDrawer.VertexShape@)">
             <summary>
             Gets the shape of one of the edge's vertices, if possible.
             </summary>
            
             <param name="oVertex">
             One of the edge's vertices.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="eVertexShape">
             Where the shape gets stored if true is returned.
             </param>
            
             <returns>
             true if the shape was obtained, false if not.
             </returns>
            
             <remarks>
             If a <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> is being used, this method stores its
             actual shape at <paramref name="eVertexShape"/> and returns true.
             false is returned otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetEdgeEndpoints(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.Drawing.PointF@,System.Drawing.PointF@)">
             <summary>
             Gets the endpoints of the edge.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="edgeEndpoint1">
             Where the edge's first endpoint gets stored.
             </param>
            
             <param name="edgeEndpoint2">
             Where the edge's second endpoint gets stored.
             </param>
            
             <remarks>
             The edge's first endpoint is the endpoint on the <paramref
             name="vertex1" /> side of the edge.  The edge's second endpoint is the
             endpoint on the <paramref name="vertex2" /> side of the edge.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetEdgeEndpoint1(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Gets the first endpoint of the edge.
             </summary>
            
             <param name="oVertex1">
             The edge's first vertex.
             </param>
            
             <param name="oVertex2">
             The edge's second vertex.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The edge's first endpoint, which is the endpoint on the <paramref
             name="oVertex1" /> side of the edge.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetEdgeEndpoint2(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Gets the second endpoint of the edge.
             </summary>
            
             <param name="oVertex1">
             The edge's first vertex.
             </param>
            
             <param name="oVertex2">
             The edge's second vertex.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The edge's second endpoint, which is the endpoint on the <paramref
             name="oVertex2" /> side of the edge.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetEdgeEndpointByDistance(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
             <summary>
             Gets an edge endpoint that is a specified distance from a specified
             vertex.
             </summary>
            
             <param name="oVertexALocation">
             Location of one of the edge's vertices.
             </param>
            
             <param name="oVertexBLocation">
             Location of the edge's other vertex.
             </param>
            
             <param name="fEndpointDistanceFromVertexB">
             Distance from VertexB to the endpoint.
             </param>
            
             <returns>
             The endpoint on the VertexB end of the edge.  The endpoint is computed
             to be <paramref name="fEndpointDistanceFromVertexB" /> units away from
             VertexB's location.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.EdgeShouldBeDrawnSelected(Microsoft.NetMap.Core.IEdge)">
             <summary>
             Determines whether an edge should be drawn as selected.
             </summary>
            
             <param name="oEdge">
             The edge to check.
             </param>
            
             <returns>
             true if <paramref name="oEdge"/> should be drawn as selected.
             </returns>
            
             <remarks>
             The selected state of <paramref name="oEdge"/> as well as the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> property are used to determine whether <paramref name="oEdge"/> should be drawn as selected.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetNearestPointOnVertexRectangle(System.Drawing.PointF,System.Drawing.RectangleF)">
             <summary>
             Gets a point on a vertex rectangle that is nearest to a specified point.
             </summary>
            
             <param name="oPointF">
             Specified point.
             </param>
            
             <param name="oVertexRectangleF">
             A vertex rectangle to find a point on.
             </param>
            
             <returns>
             A point on <paramref name="oVertexRectangle" /> that is nearest
             <paramref name="oPoint" />.
             </returns>
            
             <remarks>
             This is meant for use by derived classes that draw a vertex as a
             rectangle.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetNearestPointOnVertexDiamond(System.Drawing.PointF,Microsoft.NetMap.Core.IVertex,System.Single)">
             <summary>
             Gets a point on a vertex diamond that is nearest to a specified point.
             </summary>
            
             <param name="oPointF">
             Specified point.
             </param>
            
             <param name="oVertex">
             The vertex that a nearest point should be found for.  It's assumed that
             the vertex is drawn as a diamond or solid diamond.
             </param>
            
             <param name="fVertexRadius">
             One half the width of the vertex diamond.
             </param>
            
             <returns>
             The point on the diamond that is nearest to <paramref name="oPoint" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetNearestPointOnVertexTriangle(System.Drawing.PointF,Microsoft.NetMap.Core.IVertex,System.Single)">
             <summary>
             Gets a point on a vertex triangle that is nearest to a specified point.
             </summary>
            
             <param name="oPointF">
             Specified point.
             </param>
            
             <param name="oVertex">
             The vertex that a nearest point should be found for.  It's assumed that
             the vertex is drawn as a triangle or solid triangle.
             </param>
            
             <param name="fVertexRadius">
             One half of the width of the square that bounds the triangle.
             </param>
            
             <returns>
             The point on the triangle that is nearest to <paramref name="oPoint" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetNearestPoint(System.Drawing.PointF,System.Drawing.PointF[])">
             <summary>
             Gets a point is nearest to a specified point.
             </summary>
            
             <param name="oPointF">
             Specified point.
             </param>
            
             <param name="aoOtherPoints">
             Array of other points.
             </param>
            
             <returns>
             The point in <paramref name="aoOtherPoints" /> that is nearest
             to <paramref name="oPoint" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.GetPointsOnVertexRectangle(System.Drawing.RectangleF)">
             <summary>
             Gets an array of points on a vertex rectangle's edge to consider as an
             edge's second endpoint.
             </summary>
            
             <param name="oVertexRectangleF">
             Rectangle to get points for.
             </param>
            
             <returns>
             An array of points to consider as an edge's second endpoint.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.DrawSelfLoopOnVertexRectangle(System.Drawing.Pen,Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge that is a self-loop on a vertex drawn as a rectangle.
             </summary>
            
             <param name="oPen">
             Pen to use.
             </param>
            
             <param name="oVertex">
             Vertex that the edge connects to itself.
             </param>
            
             <param name="oVertexRectangle">
             The vertex's rectangle.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This is meant for use by derived classes that draw a vertex as a
             rectangle.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.DrawSelfLoopOnVertexTriangle(System.Drawing.Pen,Microsoft.NetMap.Core.IVertex,System.Single,Microsoft.NetMap.Visualization.DrawContext,Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge)">
             <summary>
             Draws an edge that is a self-loop on a vertex drawn as a triangle.
             </summary>
            
             <param name="oPen">
             Pen to use.
             </param>
            
             <param name="oVertex">
             Vertex that the edge connects to itself.
             </param>
            
             <param name="fVertexRadius">
             Radius of the vertex, or zero if the radius couldn't be obtained.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="eFarthestEdge">
             Edge of the graph rectangle that is farthest from the vertex.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.CreateDrawingObjects">
            <summary>
            Creates the objects used to draw edges.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.DisposeManagedObjects">
            <summary>
            Disposes of managed objects used for drawing.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EdgeDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.MinimumWidth">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/> properties.  The value is 1.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.MaximumWidth">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/> properties.  The value is 20.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.MinimumRelativeArrowSize">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.RelativeArrowSize"/> property.  The
            value is 0.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.MaximumRelativeArrowSize">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.RelativeArrowSize"/> property.  The
            value is 20.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_bUseSelection">
            true if edges marked as selected should be drawn as selected, false to
            draw all edges as unselected.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_iWidth">
            Width of an unselected edge.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_iSelectedWidth">
            Width of a selected edge.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_bDrawArrowOnDirectedEdge">
            true to draw an arrow on directed edges.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_fRelativeArrowSize">
            Width and height of the arrow drawn by m_oDirectedEndCap.  Note that
            these dimensions get automatically scaled to the pen width; see the
            AdjustableArrowCap.WidthScale property.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_oColor">
            Color of an unselected edge.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_oSelectedColor">
            Color of a selected edge.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_oUndirectedPen">
            Pen used to draw undirected edges.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_oDirectedPen">
            Pen used to draw directed edges.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.m_oDirectedEndCap">
            Arrow line cap to use on the front-vertex end of lines drawn by
            m_oDirectedPen.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection">
             <summary>
             Gets or sets a flag indicating whether the selected state of an edge
             should be used.
             </summary>
            
             <value>
             If true, an edge is drawn using either <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> or <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>, depending on whether the edge has been marked
             as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/>.  If false, <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> are used regardless of whether
             the edge has been marked as selected.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color">
             <summary>
             Gets or sets the color of an edge that is not selected.
             </summary>
            
             <value>
            	The color of an unselected edge, as a <see cref="T:System.Drawing.Color"/>.  The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> for details on selected vs. unselected
             edges.
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor">
             <summary>
             Gets or sets the color of an edge that is selected.
             </summary>
            
             <value>
            	The color of a selected edge, as a <see cref="T:System.Drawing.Color"/>.  The default value is <see cref="P:System.Drawing.Color.Red"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> for details on selected vs. unselected
             edges.
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width">
             <summary>
             Gets or sets the width of an edge that is not selected.
             </summary>
            
             <value>
            	The width of the edge, as an <see cref="T:System.Int32"/>.  Must be between
             <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MaximumWidth"/>, inclusive.
             The default value is 1.
             </value>
            
             <remarks>
             The units are determined by the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Graphics"/>
             object passed to the <see cref="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)"/> method.
            
             <para>
             See <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> for details on selected vs. unselected
             edges.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth">
             <summary>
             Gets or sets the width of an edge that is selected.
             </summary>
            
             <value>
            	The width of the edge, as an <see cref="T:System.Int32"/>.  Must be between
             <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MinimumWidth"/> and <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MaximumWidth"/>, inclusive.
             The default value is 2.
             </value>
            
             <remarks>
             The units are determined by the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Graphics"/>
             object passed to the <see cref="M:Microsoft.NetMap.Visualization.EdgeDrawerBase.DrawEdge(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Visualization.DrawContext)"/> method.
            
             <para>
             See <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> for details on selected vs. unselected
             edges.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.DrawArrowOnDirectedEdge">
             <summary>
             Gets or sets a flag that determines whether an arrow should be drawn on
             directed edges.
             </summary>
            
             <value>
             true to draw an arrow on directed edges, false otherwise.  The default
             value is true.
             </value>
            
             <remarks>
             By default, an edge with <see cref="P:Microsoft.NetMap.Core.IEdge.IsDirected"/> set to true is
             drawn with an arrow pointing to the front vertex.  If this property is
             set to false, the arrow is not drawn.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.EdgeDrawer.RelativeArrowSize">
             <summary>
             Gets or sets the relative size of arrow heads on directed edges.
             </summary>
            
             <value>
            	The relative size of arrow heads, as a <see cref="T:System.Single"/>.  Must be
             between <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MinimumRelativeArrowSize"/> and <see cref="F:Microsoft.NetMap.Visualization.EdgeDrawer.MaximumRelativeArrowSize"/>, inclusive.  The default value is 3.
             </value>
            
             <remarks>
             The value is relative to <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>.  If the width or selected width is increased,
             the arrow size on unselected or selected edges is increased
             proportionally.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge">
            <summary>
            Specifies the edges of a rectangle.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge.Left">
            <summary>
            Left edge.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge.Right">
            <summary>
            Right edge.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge.Top">
            <summary>
            Top edge.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.EdgeDrawer.RectangleEdge.Bottom">
            <summary>
            Bottom edge.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer">
             <summary>
            	Draws a vertex as a circle, disk, or sphere, in conjunction with <see cref="T:Microsoft.NetMap.Visualization.SugiyamaLayout"/> and <see cref="T:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer"/>.
             </summary>
            
             <remarks>
             This class draws vertices that have been laid out by <see cref="T:Microsoft.NetMap.Visualization.SugiyamaLayout"/> as circles, disks, or spheres centered on each
            	vertex's <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>.  It is meant for use with <see cref="T:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer"/>.
            
             <para>
             This class works in conjunction with <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> to draw vertices as either selected or
             unselected.  If a vertex has been marked as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/>, it is drawn
             using <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/>.  Otherwise, <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> is used.  Set the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> property to false to force all vertices
             to be drawn as unselected.
             </para>
            
             <para>
             If this class is used by a graph drawer other than <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/>, all vertices are drawn as unselected.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerVertexDrawer">
             <summary>
            	Draws a vertex as a shape.  Allows per-vertex customizations.
             </summary>
            
             <remarks>
             By default, this class delegates vertex drawing to its base class.  If you
             add appropriate metadata to a vertex, however, this class uses the metadata
             to customize the appearance of that vertex.
            
             <para>
             A selected vertex is always drawn using <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/>.  If an unselected vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerColor"/> key, the vertex is drawn
             using the <see cref="T:System.Drawing.Color"/> specified by the key's value.  If an
             unselected vertex does not have this key, it is drawn using <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/>.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexShape"/> key,
             the vertex's shape is set to the <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape"/>
             specified by the key's value.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexRadius"/>
             key, the vertex's radius is set to the <see cref="T:System.Single"/> specified by
             the key's value.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.VertexDrawer">
             <summary>
            	Draws a vertex as a shape.
             </summary>
            
             <remarks>
            	This class draws a vertex as a circle, disk, or sphere centered on the
            	vertex's <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>.  It is typically used with <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/>, which takes the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> into account
             when edges are drawn, although other edge drawers can be used as well.
            
             <para>
             This class works in conjunction with <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> to draw vertices as either selected or
             unselected.  If a vertex has been marked as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/>, it is drawn
             using <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/>.  Otherwise, <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> is
             used.  Set the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> property to false to force all
             vertices to be drawn as unselected.
             </para>
            
             <para>
             If this class is used by a graph drawer other than <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/>, all vertices are drawn as unselected.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.VertexDrawerBase">
             <summary>
            	Base class for vertex drawers.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/> implementations.  Its implementations of the <see cref="T:Microsoft.NetMap.Visualization.IVertexDrawer"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.Hide"/> key, the
             vertex isn't drawn.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.IVertexDrawer">
             <summary>
             Supports vertex drawing.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for drawing the
            	vertices of a graph.
            
             <para>
             An implementation is typically meant to be used with a corresponding
             implementation of the <see cref="T:Microsoft.NetMap.Visualization.IEdgeDrawer"/> interface, although this
             isn't a requirement.  A vertex drawer can determine the type of the edge
             drawer in use by looking at the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.GraphDrawer"/>
             property on the <see cref="T:Microsoft.NetMap.Visualization.DrawContext"/> object passed to <see cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>.  If the edge drawer is not of the expected
             corresponding type, the vertex drawer should revert to some sensible, if
             not ideal, default behavior.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IVertexDrawer.PreDrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IVertexDrawer.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.IVertexDrawer.PreDrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)">
             <summary>
             Determines whether a vertex contains a point.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="point">
            	The point to check.
             </param>
            
             <returns>
            	true if <paramref name="vertex"/> contains <paramref name="point"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	contains a point.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IVertexDrawer.VertexIntersectsWithRectangle(Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle)">
             <summary>
             Determines whether a vertex intersects a specified rectangle.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="rectangle">
             The rectangle to check.
             </param>
            
             <returns>
             true if <paramref name="vertex"/> intersects <paramref name="rectangle"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	intersects a rectangle.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IVertexDrawer.RedrawRequired">
             <summary>
            	Occurs when a change occurs that requires a graph redraw.
             </summary>
            
             <remarks>
            	The implementation must fire this event when a change is made to the
             object that might affect the appearance of the graph.
            
             <para>
             The object owner should handle the event by redrawing the graph.  The
             graph does not need to be laid out again.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IVertexDrawer.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when a change is made to the
             object that might affect the layout of the graph.
            
             <para>
            	The object owner should lay out the graph and redraw it in response to
             the event.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.VertexDrawerBase"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.PreDrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.PreDrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.VertexContainsPoint(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)">
             <summary>
             Determines whether a vertex contains a point.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="point">
            	The point to check.
             </param>
            
             <returns>
            	true if <paramref name="vertex"/> contains <paramref name="point"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	contains a point.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.VertexIntersectsWithRectangle(Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle)">
             <summary>
             Determines whether a vertex intersects a specified rectangle.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="rectangle">
             The rectangle to check.
             </param>
            
             <returns>
             true if <paramref name="vertex"/> intersects <paramref name="rectangle"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	intersects a rectangle.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The vertex's bounding rectangle.
             </returns>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.PreDrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.VertexContainsPointCore(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)">
             <summary>
             Determines whether a vertex contains a point.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="point">
            	The point to check.
             </param>
            
             <returns>
            	true if <paramref name="vertex"/> contains <paramref name="point"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	contains a point.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.VertexIntersectsWithRectangleCore(Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle)">
             <summary>
             Determines whether a vertex intersects a specified rectangle.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="rectangle">
             The rectangle to check.
             </param>
            
             <returns>
             true if <paramref name="vertex"/> intersects <paramref name="rectangle"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	intersects a rectangle.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.CheckDrawOrPreDrawVertexArguments(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.String)">
             <summary>
             Checks the arguments to <see cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/> or <see cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.PreDrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>.
             </summary>
            
             <param name="oVertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <remarks>
             An exception is thrown if one of the arguments is invalid.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawerBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.OutlinePenWidth">
            Width of the pen used to draw an unselected outline.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.SelectedOutlinePenWidth">
            Width of the pen used to draw a selected outline.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.GetActualShape(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Gets the actual shape to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual shape for.
             </param>
            
             <returns>
             The actual shape to use.
             </returns>
            
             <remarks>
             This base class uses <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Shape"/> as the actual vertex shape.
             A derived class can use an actual shape that differs from this by
             overriding this virtual method.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.GetActualRadius(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Gets the actual radius to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual radius for.
             </param>
            
             <returns>
             The actual radius to use.
             </returns>
            
             <remarks>
             This base class uses <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> as the actual vertex radius.
             A derived class can use an actual radius that differs from <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> by overriding this virtual method.
            
             <para>
             A virtual <see cref="M:Microsoft.NetMap.Visualization.VertexDrawer.GetActualRadius(Microsoft.NetMap.Core.IVertex)"/> method is used instead of just
             making the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> property virtual because the actual
             radius may require an <see cref="T:Microsoft.NetMap.Core.IVertex"/> for its implementation,
             and the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> property does not have access to an <see cref="T:Microsoft.NetMap.Core.IVertex"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.GetActualColor(Microsoft.NetMap.Core.IVertex,System.Boolean)">
             <summary>
             Gets the actual color to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual color for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="vertex"/> should be shown as selected.
             </param>
            
             <returns>
             The actual color to use.
             </returns>
            
             <remarks>
             This base class uses either <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> or <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/> as the actual vertex color.  A derived class
             can use an actual color that differs from this by overriding this
             virtual method.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.DrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The vertex's bounding rectangle.
             </returns>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.VertexContainsPointCore(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)">
             <summary>
             Determines whether a vertex contains a point.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="point">
            	The point to check.
             </param>
            
             <returns>
            	true if <paramref name="vertex"/> contains <paramref name="point"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	contains a point.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.VertexIntersectsWithRectangleCore(Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle)">
             <summary>
             Determines whether a vertex intersects a specified rectangle.
             </summary>
            
             <param name="vertex">
             The vertex to check.
             </param>
            
             <param name="rectangle">
             The rectangle to check.
             </param>
            
             <returns>
             true if <paramref name="vertex"/> intersects <paramref name="rectangle"/>.
             </returns>
            
             <remarks>
             Because the vertex drawer knows the shape and size of a vertex, it's
            	the vertex drawer's responsibility to determine whether a vertex
            	intersects a rectangle.
            
             <para>
             The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property of <paramref name="vertex"/> must be set before this method is called.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.DrawVertexOutline(Microsoft.NetMap.Visualization.DrawContext,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Draws an outline around a rectangular vertex given the vertex's
             outline rectangle.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="oOutlineRectangle">
             The outline rectangle to draw.
             </param>
            
             <param name="bDrawSelected">
             true if the vertex should be drawn as selected.
             </param>
            
             <remarks>
             This method can be used by derived classes that draw vertices as
             rectangles.  It draws an outline around the specified rectangle.  The
             outline is drawn with <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/> and <see cref="F:Microsoft.NetMap.Visualization.VertexDrawer.SelectedOutlinePenWidth"/> if the vertex should be drawn as
             selected, or <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> and <see cref="F:Microsoft.NetMap.Visualization.VertexDrawer.OutlinePenWidth"/> if
             not.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.AdjustVertexLocation(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.Drawing.Rectangle)">
             <summary>
             If necessary, adjusts the vertex location so the vertex doesn't get
             clipped by the graph rectangle.
             </summary>
            
             <param name="oVertex">
             The vertex to adjust.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="oVertexBounds">
             Rectangle that contains the vertex.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.SetHitTestArea(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.HitTestArea)">
             <summary>
             Adds a hit-test area to the vertex's metadata.
             </summary>
            
             <param name="oVertex">
             The vertex to add a hit-test area to.
             </param>
            
             <param name="oHitTestArea">
             Hit-test area.
             </param>
            
             <remarks>
             This method adds a hit-test area to the vertex's metadata.  The area
             can be retrieved by <see cref="M:Microsoft.NetMap.Visualization.VertexDrawer.TryGetHitTestArea(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.HitTestArea@)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.SetRectangularHitTestArea(Microsoft.NetMap.Core.IVertex,System.Drawing.Rectangle)">
             <summary>
             Adds a rectangular hit-test area to the vertex's metadata.
             </summary>
            
             <param name="oVertex">
             The vertex to add a hit-test area to.
             </param>
            
             <param name="oHitTestRectangle">
             Hit-test rectangle.
             </param>
            
             <remarks>
             This method can be used by derived classes that draw vertices as
             rectangles.  It adds a rectangular hit-test area to the vertex's
             metadata.  The area is retrieved by <see cref="M:Microsoft.NetMap.Visualization.VertexDrawer.VertexContainsPointCore(Microsoft.NetMap.Core.IVertex,System.Drawing.Point)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.TryGetHitTestArea(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.HitTestArea@)">
             <summary>
             Attempts to get the hit-test area for a vertex.
             </summary>
            
             <param name="oVertex">
             Vertex to get a hit-test area for.
             </param>
            
             <param name="oHitTestArea">
             Where the hit-test area gets stored if true is returned.
             </param>
            
             <returns>
             true if <paramref name="oHitTestArea"/> was obtained.
             </returns>
            
             <remarks>
             This method attempts to retrieve the <see cref="T:Microsoft.NetMap.Visualization.HitTestArea"/> object
             that may have been stored in a vertex's metadata by <see cref="M:Microsoft.NetMap.Visualization.VertexDrawer.SetHitTestArea(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.HitTestArea)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.VertexShouldBeDrawnSelected(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Determines whether a vertex should be drawn as selected.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <returns>
             true if <paramref name="oVertex"/> should be drawn as selected.
             </returns>
            
             <remarks>
             The selected state of <paramref name="oVertex"/> as well as the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> property are used to determine whether <paramref name="oVertex"/> should be drawn as selected.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.GetSharedSolidBrush(System.Drawing.Color)">
             <summary>
             Gets a solid brush shared by many drawing operations.
             </summary>
            
             <param name="oColor">
             Color to set the brush to.
             </param>
            
             <returns>
             A shared solid brush.  The brush must not be disposed.
             </returns>
            
             <remarks>
             The returned brush is shared by many drawing operations and must not be
             disposed.  It is an alternative to repeatedly creating and then
             disposing a solid brush for each drawing operation.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.CreateDrawingObjects">
            <summary>
            Creates the objects used to draw vertices.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.DisposeManagedObjects">
            <summary>
            Disposes of managed objects used for drawing.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.VertexDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.MinimumRadius">
            <summary>
            Minimum value of the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> property.  The value is 0.1.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.MaximumRadius">
            <summary>
            Maximum value of the <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> property.  The value is
            50.0.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_bUseSelection">
            true if vertices marked as selected should be drawn as selected, false
            to draw all vertices as unselected.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_eShape">
            Shape of the vertex.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_fRadius">
            Radius of an unselected vertex.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_oColor">
            Color of an unselected vertex.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_oSelectedColor">
            Color of a selected vertex.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_oOutlinePen">
            Pen used to draw outlines.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.m_oSharedSolidBrush">
            Brush used for various drawing operations.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection">
             <summary>
             Gets or sets a flag indicating whether the selected state of a vertex
             should be used.
             </summary>
            
             <value>
             If true, a vertex is drawn using either <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> or <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/>, depending on whether the vertex has been
             marked as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectVertex(Microsoft.NetMap.Core.IVertex)"/>.  If false,
             <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/> is used regardless of whether the vertex has been
             marked as selected.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VertexDrawer.Shape">
             <summary>
             Gets or sets the shape of the vertices.
             </summary>
            
             <value>
            	The shape of the vertices, as a <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape"/>.  The
             default value is <see cref="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Disk"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VertexDrawer.Color">
             <summary>
             Gets or sets the color of a vertex that is not selected.
             </summary>
            
             <value>
            	The color of an unselected vertex, as a <see cref="T:System.Drawing.Color"/>.  The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> for details on selected vs. unselected
             vertices.
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VertexDrawer.SelectedColor">
             <summary>
             Gets or sets the color of a vertex that is selected.
             </summary>
            
             <value>
            	The color of a selected vertex, as a <see cref="T:System.Drawing.Color"/>.  The default value is <see cref="P:System.Drawing.Color.Red"/>.
             </value>
            
             <remarks>
             See <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.UseSelection"/> for details on selected vs. unselected
             vertices.
             </remarks>
            
             <seealso cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Color"/>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius">
             <summary>
             Gets or sets the radius of the vertices.
             </summary>
            
             <value>
            	The radius of the vertices, as a <see cref="T:System.Single"/>.  Must be
             between <see cref="F:Microsoft.NetMap.Visualization.VertexDrawer.MinimumRadius"/> and <see cref="F:Microsoft.NetMap.Visualization.VertexDrawer.MaximumRadius"/>,
             inclusive.  The default value is 3.0.
             </value>
            
             <remarks>
             This base class uses <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> as the actual vertex radius.
             A derived class can use an actual radius that differs from <see cref="P:Microsoft.NetMap.Visualization.VertexDrawer.Radius"/> by overriding the virtual <see cref="M:Microsoft.NetMap.Visualization.VertexDrawer.GetActualRadius(Microsoft.NetMap.Core.IVertex)"/> method.
            
             <para>
             The units are determined by the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Graphics"/>
             object passed to the <see cref="M:Microsoft.NetMap.Visualization.VertexDrawerBase.DrawVertex(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/> method.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape">
            <summary>
            Specifies the shape of the vertices.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Circle">
            <summary>
            The vertices are drawn as circles.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Disk">
            <summary>
            The vertices are drawn as disks.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Sphere">
            <summary>
            The vertices are drawn as spheres.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Square">
            <summary>
            The vertices are drawn as squares.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.SolidSquare">
            <summary>
            The vertices are drawn as solid squares.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Diamond">
            <summary>
            The vertices are drawn as diamonds.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.SolidDiamond">
            <summary>
            The vertices are drawn as solid diamonds.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.Triangle">
            <summary>
            The vertices are drawn as equilateral triangles.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawer.VertexShape.SolidTriangle">
            <summary>
            The vertices are drawn as solid equilateral triangles.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerVertexDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.GetActualShape(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Gets the actual shape to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual shape for.
             </param>
            
             <returns>
             The actual shape to use.
             </returns>
            
             <remarks>
             See the class comments for details on how the actual shape is
             determined.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.GetActualRadius(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Gets the actual radius to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual radius for.
             </param>
            
             <returns>
             The actual radius to use.
             </returns>
            
             <remarks>
             See the class comments for details on how the actual radius is
             determined.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.GetActualColor(Microsoft.NetMap.Core.IVertex,System.Boolean)">
             <summary>
             Gets the actual color to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual color for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="vertex" /> should be shown as selected.
             </param>
            
             <returns>
             The actual color to use.
             </returns>
            
             <remarks>
             See the class comments for details on how the actual color is
             determined.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.PreDrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.TryGetPerVertexAlpha(Microsoft.NetMap.Core.IVertex,System.Int32@)">
             <summary>
             Attempts to get the alpha value to use for a vertex.
             </summary>
            
             <param name="oVertex">
             The vertex to get the alpha value for.
             </param>
            
             <param name="iPerVertexAlpha">
             Where the alpha value gets stored if true is returned.  Alpha values
             range from 0 (transparent) to 255 (opaque).
             </param>
            
             <returns>
             true if an alpha value was obtained.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer.MinimumSugiyamaRadius">
            Minimum radius to use.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer.GetActualRadius(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Gets the actual radius to use for a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to get the actual radius for.
             </param>
            
             <returns>
             The actual radius to use.
             </returns>
            
             <remarks>
             If the parent graph of <paramref name="vertex"/> contains a metadata
             value for the radius computed by <see cref="T:Microsoft.NetMap.Visualization.SugiyamaLayout"/>, the
             computed radius is returned.  Otherwise, the base-class method is
             called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.ILayout">
             <summary>
             Supports laying out a graph within a rectangle.
             </summary>
            
             <remarks>
             A class that implements this interface is responsible for laying out a
             graph within a specified rectangle by setting the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's vertices, and
             optionally adding geometry metadata to the graph, vertices, or edges.
             Laying out a graph is the first step in drawing it.
            
             <para>
             If the layout is slow, you should consider implementing the <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/> interface instead.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.ILayout.TransformLayout(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>, this
             method can be used to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  The implementation should transform
             all the graph's vertex locations from the original rectangle to the new
             one.  If <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> added geometry metadata to the
             graph, the implementation should also transform that metadata.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.ILayout.OnVertexMove(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Microsoft.NetMap.Visualization.ILayout.OnVertexMove(Microsoft.NetMap.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.ILayout.Margin">
             <summary>
            	Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The units are determined by the <see cref="T:System.Drawing.Graphics"/>
             object used to draw the graph.  The default value is 0.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Microsoft.NetMap.Visualization.ILayout.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.ILayout.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a property
             change that affects the layout algorithm.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.CircularHitTestArea">
             <summary>
             Provides hit-testing for a circular area.
             </summary>
            
             <remarks>
             This is one of a set of classes that are used for hit-testing.  The classes
             provide a lightweight alternative to using System.Drawing.Region objects
             for hit-testing.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.HitTestArea">
             <summary>
             Base class for classes that support hit-testing.
             </summary>
            
             <remarks>
             This is the base class for a set of classes that are used for hit-testing.
             The classes provide a lightweight alternative to using
             System.Drawing.Region objects for hit-testing.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.HitTestArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.HitTestArea"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.HitTestArea.Contains(System.Drawing.PointF)">
             <summary>
             Determines whether the hit-test area contains a specified point.
             </summary>
            
             <param name="point">
             Point to test.
             </param>
            
             <returns>
             true if this hit-test area contains <paramref name="point" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.HitTestArea.IntersectsWith(System.Drawing.Rectangle)">
             <summary>
             Determines whether the hit-test area intersects a specified rectangle.
             </summary>
            
             <param name="rectangle">
             Rectangle to test.
             </param>
            
             <returns>
             true if this hit-test area intersects <paramref name="rectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.HitTestArea.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircularHitTestArea.#ctor(System.Drawing.PointF,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.CircularHitTestArea"/> class.
             </summary>
            
             <param name="center">
             The circle's center.
             </param>
            
             <param name="radius">
             The circle's radius.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircularHitTestArea.Contains(System.Drawing.PointF)">
             <summary>
             Determines whether the hit-test area contains a specified point.
             </summary>
            
             <param name="point">
             Point to test.
             </param>
            
             <returns>
             true if this hit-test area contains <paramref name="point" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircularHitTestArea.IntersectsWith(System.Drawing.Rectangle)">
             <summary>
             Determines whether the hit-test area intersects a specified rectangle.
             </summary>
            
             <param name="rectangle">
             Rectangle to test.
             </param>
            
             <returns>
             true if this hit-test area intersects <paramref name="rectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircularHitTestArea.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.CircularHitTestArea.m_oCenter">
            The circle's center.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.CircularHitTestArea.m_fRadiusSquared">
            The circle's radius, squared.
        </member>
        <member name="T:Microsoft.NetMap.Visualization.VertexDrawerPrecedence">
            <summary>
            Specifies which vertex drawer should be used for a vertex.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawerPrecedence.Shape">
            <summary>
            Draw the vertex as a shape.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawerPrecedence.Image">
            <summary>
            Draw the vertex as an image.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.VertexDrawerPrecedence.PrimaryLabel">
            <summary>
            Draw the vertex as a primary label.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SortableLayoutBase">
             <summary>
             Base class for layouts that support vertex sorting and selective layout.
             </summary>
            
             <remarks>
             This is the base class for several layouts that support vertex sorting and
             the layout of a subset of the graph's vertices.  The derived class must
             implement the <see cref="M:Microsoft.NetMap.Visualization.SortableLayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)"/> abstract method.
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.
             </para>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.AsyncLayoutBase">
             <summary>
            	Base class for asynchronous layouts.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/> implementations.  Its implementations of the <see cref="T:Microsoft.NetMap.Visualization.IAsyncLayout"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.LayoutBase">
             <summary>
            	Base class for layouts.
             </summary>
            
             <remarks>
             This abstract class can serve as a base class for <see cref="T:Microsoft.NetMap.Visualization.ILayout"/> implementations.  Its implementations of the <see cref="T:Microsoft.NetMap.Visualization.ILayout"/> public methods provide error checking but defer the
             actual work to protected abstract methods.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.#ctor">
            <summary>
            Initializes a new instance of the LayoutBase class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.TransformLayout(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>, this
             method can be used to transform the graph's layout from the original
             graph rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  This
             method transforms all the graph's vertex locations from the original
             rectangle to the new one.  If <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> added geometry
             metadata to the graph, this method also transforms that metadata.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.OnVertexMove(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             added geometry metadata to the graph, vertices, or edges, <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.OnVertexMove(Microsoft.NetMap.Core.IVertex)"/> should modify the metadata if necessary.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.TransformLayoutCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,Microsoft.NetMap.Visualization.LayoutContext,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <param name="transformationMatrix">
             Matrix that can be used to transform points from the original graph
             rectangle to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>, this
             method may get called to transform the graph's layout from one rectangle
             to another.  <paramref name="originalLayoutContext"/> contains the
             original graph rectangle, and <paramref name="newLayoutContext"/>
             contains the new graph rectangle.  This base-class implementation
             transforms all the graph's vertex locations from the original rectangle
             to the new one.  If the derived <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             implementation added geometry metadata to the graph, the derived class
             should override this method, transform the geometry metadata, and call
             this base-class implementation to transform the graph's vertex
             locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.OnVertexMoveCore(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.OnVertexMoveCore(Microsoft.NetMap.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             This base-class implementation does nothing.
             </para>
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.SubtractMarginFromRectangle(Microsoft.NetMap.Visualization.LayoutContext,Microsoft.NetMap.Visualization.LayoutContext@)">
             <summary>
             Subtracts a margin from each edge of the graph rectangle before laying
             out the graph.
             </summary>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <param name="oLayoutContext2">
             If true is returned, this gets set to a copy of <paramref name="oLayoutContext"/> with a modified <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/>.
             </param>
            
             <returns>
             true if the modified rectangle has positive width and height, false if
             the modified rectangle can't be used.
             </returns>
            
             <remarks>
             This method subtracts <see cref="P:Microsoft.NetMap.Visualization.LayoutBase.Margin"/> from each edge
             of the <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> stored in <paramref name="oLayoutContext"/>.  If the resulting rectangle has a positive
             width and height, a new <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> is stored at
             <paramref name="oLayoutContext2"/> and true is returned.  false is
             returned otherwise.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.GetRectangleCenterAndHalfSize(System.Drawing.Rectangle,System.Double@,System.Double@,System.Double@)">
             <summary>
             Gets the center of a rectangle and the minimum of half its width and
             half its height.
             </summary>
            
             <param name="rectangle">
             The rectangle to use.
             </param>
            
             <param name="centerX">
             The x-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="centerY">
             The y-coordinate of the center of <paramref name="rectangle" />.
             </param>
            
             <param name="halfSize">
             If the width of <paramref name="rectangle" /> is less than its height,
             half the width gets stored here.  Otherwise, half the height gets
             stored here.
             </param>
            
             <remarks>
             This method can be used by layouts that are centered and symetrical.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.GetVerticesToLayOut(Microsoft.NetMap.Core.IGraph)">
             <summary>
             Gets the vertices to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <returns>
             The vertices to lay out.
             </returns>
            
             <remarks>
             If the derived class wants to honor the optional <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/> key on the
             graph, it should use this method to get the collection of vertices to
             lay out.  All vertices that are not included in the returned
             collection should be completely ignored.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.GetEdgesToLayOut(Microsoft.NetMap.Core.IGraph)">
             <summary>
             Gets the edges to lay out.
             </summary>
            
             <param name="graph">
             Graph that is being laid out.
             </param>
            
             <returns>
             The edges to lay out.
             </returns>
            
             <remarks>
             If the derived class wants to honor the optional <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/> key on the
             graph and it needs a list of the edges that connect only the specified
             vertices, it should use this method to get the collection of edges to
             use.  All edges that are not included in the returned collection should
             be completely ignored.
            
             <para>
             All derived classes that want to honor the optional key should use <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.GetVerticesToLayOut(Microsoft.NetMap.Core.IGraph)"/>.  Only those derived classes that need an
             edge list to do layout calculations (such as Fruchterman-Reingold) need
             to use <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.GetEdgesToLayOut(Microsoft.NetMap.Core.IGraph)"/> as well.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.MarkGraphAsLaidOut(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Marks a graph as having been laid out.
             </summary>
            
             <param name="graph">
             Graph that was laid out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects used to lay out the graph.
             </param>
            
             <remarks>
             This should be called after <paramref name="graph" /> has been
             successfully laid out.  It adds a metadata key to the graph.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.RandomizeVertexLocations(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <overloads>
             Randomly distributes the vertex locations in a graph.
             </overloads>
            
             <summary>
             Randomly distributes the vertex locations in a graph using a
             time-dependent default seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.RandomizeVertexLocations(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Int32)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             seed value.
             </summary>
            
             <param name="graph">
             Graph whose vertices need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="seed">
             A number used to calculate a starting value for the pseudo-random
             number sequence. If a negative number is specified, the absolute value
             of the number is used. 
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.RandomizeVertexLocations(System.Collections.ICollection,Microsoft.NetMap.Visualization.LayoutContext,System.Random,System.Boolean)">
             <summary>
             Randomly distributes the vertex locations in a graph using a specified
             random number generator.
             </summary>
            
             <param name="vertices">
             Vertices that need to be randomized.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> must have non-zero width and
             height.
             </param>
            
             <param name="random">
             Random number generator.
             </param>
            
             <param name="specifiedVerticesOnly">
             If true, only those vertices with a location of <see cref="F:Microsoft.NetMap.Visualization.LayoutBase.RandomizeThisLocation"/> are randomly distributed.
             </param>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with the value true,
             its location is left unmodified.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.VertexIsLocked(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Returns a flag indicating whether the vertex is locked.
             </summary>
            
             <param name="oVertex">
             The vertex to check.
             </param>
            
             <returns>
             true if the vertex is locked.
             </returns>
            
             <remarks>
             A locked vertex's location should not be modified by the layout,
             although the vertex may be included in layout calculations.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.FireLayoutRequired">
            <summary>
            Fires the <see cref="E:Microsoft.NetMap.Visualization.LayoutBase.LayoutRequired"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayoutBase.RandomizeThisLocation">
            RandomizeVertexLocations() can be instructed to randomly distribute
            only those vertices with an IVertex.Location set to this special value.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayoutBase.m_iMargin">
            Margin to subtract from the graph rectangle before laying out the
            graph.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.LayoutBase.Margin">
             <summary>
            	Gets or sets the margin to subtract from each edge of the graph
             rectangle before laying out the graph.
             </summary>
            
             <value>
             The margin to subtract from each edge.  Must be greater than or equal
             to zero.  The units are determined by the <see cref="T:System.Drawing.Graphics"/>
             object used to draw the graph.  The default value is 6.
             </value>
            
             <remarks>
             If the graph rectangle passed to <see cref="M:Microsoft.NetMap.Visualization.LayoutBase.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> is {L=0,
             T=0, R=50, B=30} and the <see cref="P:Microsoft.NetMap.Visualization.LayoutBase.Margin"/> is 5, for example, then
             the graph is laid out within the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.LayoutBase.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The event is fired when any change is made to the object that might
             affect the layout of the graph, such as a property change that affects
             the layout algorithm.  The owner should lay out the graph and redraw it
             in response to the event.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.IAsyncLayout">
             <summary>
             Supports laying out a graph within a rectangle using an event-based
             asynchronous pattern.
             </summary>
            
             <remarks>
             This interface adds asynchronous semantics to the <see cref="T:Microsoft.NetMap.Visualization.ILayout"/>
             base interface.  A class that implements this interface is responsible for
             laying out a graph within a specified rectangle by setting the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's vertices in
             either a synchronous or asynchronous manner, depending on whether <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> or <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> is called.
             It may also add geometry metadata to the graph, vertices, or edges.
            
             <para>
             The asynchronous semantics follow the guidelines outlined in the article
             "Multithreaded Programming with the Event-based Asynchronous Pattern" in
             the .NET Framework Developer's Guide.  <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             starts the layout on a worker thread and returns immediately.  The <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphIterationCompleted"/> event may fire repeatedly while the
             layout is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphCompleted"/> event fires
             when the layout is complete, an error occurs, or the layout is cancelled.
             <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph synchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
            	vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
            	This method asynchronously lays out the graph <paramref name="graph"/>.  It returns immediately.  A worker thread sets the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adds geometry metadata to the graph, vertices,
             or edges.
            
             <para>
             The <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphIterationCompleted"/> event may fire
             repeatedly while the layout is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphCompleted"/> event fires when the layout is complete,
             an error occurs, or the layout is cancelled.  <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.IAsyncLayout.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphIterationCompleted">
             <summary>
            	Occurs when a layout started by <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             completes one iteration.
             </summary>
            
             <remarks>
             If the implementation uses an iterative layout algorithm, it should
             fire this event after each iteration.  The event handler may draw the
             intermediate graph using the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property
             on all of the graph's vertices.
            
             <para>
             The event fires on the thread on which <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             was called.  Although the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property is
             not required to be thread-safe, it is safe to read the property during
             the event because the implementation's worker thread blocks until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphCompleted">
             <summary>
            	Occurs when a layout started by <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.IAsyncLayout.LayoutRequired">
             <summary>
            	Occurs when a change occurs that requires the graph to be laid out
             again.
             </summary>
            
             <remarks>
            	The implementation must fire this event when any change is made to the
             object that might affect the layout of the graph, such as a property
             change that affects the layout algorithm.
            
             <para>
             The owner should lay out the graph and redraw it in response to the
             event.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.AsyncLayoutBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <remarks>
            	This method asynchronously lays out the graph <paramref name="graph"/>
             by setting the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the
             graph's vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.  It starts a worker thread and then returns
             immediately.
            
             <para>
             The <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event may fire
             repeatedly while the layout is occurring.  The <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCompleted"/> event fires when the layout is complete,
             an error occurs, or the layout is cancelled.  <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsyncCancel"/> cancels the layout.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsyncCancel">
             <summary>
             Cancels the layout started by <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </summary>
            
             <remarks>
             The layout may or may not cancel, but the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCompleted"/> event is guaranteed to fire.  The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object passed to the event handler
             contains a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property
             that indicates whether the cancellation occurred.
            
             <para>
             If a layout is not in progress, this method does nothing.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Lays out a graph.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> by setting the
             <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of the graph's
             vertices, and optionally adding geometry metadata to the graph,
             vertices, or edges.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             <para>
             This is the concrete implementation of an abstract virtual method
             defined in <see cref="T:Microsoft.NetMap.Visualization.LayoutBase"/>.  It delegates the work to a new,
             overloaded abstract virtual method defined in this class.  The new
             overload takes an additional BackgroundWorker argument.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted">
             <overloads>
            	Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </overloads>
            
             <summary>
            	Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </summary>
            
             <remarks>
             This method should be called from <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)"/> after each layout iteration.  It
             synchronously fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted"/>
             event on the thread from which <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> was
             called.
            
             <para>
             Note that the <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/>
             method can't be used to report completion of an iteration.  That's
             because <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> fires a
             <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event asynchronously,
             meaning that the worker thread gets back to work immediately without
             waiting for the event handler to return.  Because the worker thread is
             modifying the Location properties of all the graph's vertices, which is
             exactly what the event handler wants to read, the vertex locations
             would not be in a stable state for reading.  Using
             SynchronizationContext to synchronously Send an event solves this
             problem, because the worker thread can't get back to work until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted(System.Object)">
             <summary>
            	Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted"/> event if
             appropriate.
             </summary>
            
             <param name="oState">
             Required by the SendOrPostCallback method signature, but not used.
             </param>
            
             <remarks>
             This method can be called only from the thread on which <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> was called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
            	Fires the <see cref="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCompleted"/> event if appropriate.
             </summary>
            
             <param name="oAsyncCompletedEventArgs">
             An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains the event data.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Handles the DoWork event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.BackgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Handles the RunWorkerCompleted event on the BackgroundWorker object.
             </summary>
            
             <param name="sender">
             Standard event argument.
             </param>
            
             <param name="e">
             Standard event argument.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncLayoutBase.m_oBackgroundWorker">
            BackgroundWorker used by LayOutGraphAsync().
        </member>
        <member name="F:Microsoft.NetMap.Visualization.AsyncLayoutBase.m_oSynchronizationContext">
            SynchronizationContext of the thread that called LayOutGraphAsync(), or
            null if LayOutGraphAsync() hasn't been called.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.AsyncLayoutBase.IsBusy">
             <summary>
             Gets a value indicating whether an asynchronous operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous operation is in progress.
             </value>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphIterationCompleted">
             <summary>
            	Occurs when a layout started by <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             completes one iteration.
             </summary>
            
             <remarks>
             If the implementation uses an iterative layout algorithm, it should
             fire this event after each iteration.  The event handler may draw the
             intermediate graph using the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property
             on all of the graph's vertices.
            
             <para>
             The event fires on the thread on which <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             was called.  Although the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property is
             not required to be thread-safe, it is safe to read the property during
             the event because the implementation's worker thread blocks until the
             event handler returns.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphCompleted">
             <summary>
            	Occurs when a layout started by <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             completes, is cancelled, or ends with an error.
             </summary>
            
             <remarks>
             The event fires on the thread on which <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>
             was called.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SortableLayoutBase.#ctor">
            <summary>
            Initializes a new instance of the SortableLayoutBase class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SortableLayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SortableLayoutBase.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SortableLayoutBase.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SortableLayoutBase.m_oVertexSorter">
            The vertex sorter to use to sort the vertices before they are laid out,
            or null if the vertices should not be sorted.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter">
             <summary>
             Gets or sets the vertex sorter to use.
             </summary>
            
             <value>
             The vertex sorter to use to sort the vertices before they are laid out,
             as an <see cref="T:Microsoft.NetMap.Core.IVertexSorter"/>, or null if the vertices should not
             be sorted.
             </value>
            
             <remarks>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will sort them.  The
             ByMetadataVertexSorter and ByDelegateVertexSorter classes can be used
             for this.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.EadesSpringEmbedderLayout">
             <summary>
            	Lays out a graph using the Eades spring embedder layout.
             </summary>
            
             <remarks>
            	For details on the layout algorithm, see P. Eades, "A heuristic for graph
            	drawing", Congressus Numerantium, 42:149{ 160, 1984.
            
             <para>
             Important Note: As of August 2008, this class is not implemented.  <see cref="M:Microsoft.NetMap.Visualization.EadesSpringEmbedderLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)"/> throws a NotImplementedException.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EadesSpringEmbedderLayout.#ctor">
            <summary>
            Initializes a new instance of the EadesSpringEmbedderLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EadesSpringEmbedderLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             <para>
             Important Note: As of August 2008, this method is not implemented.  It
             throws a NotImplementedException.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.EadesSpringEmbedderLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.LayoutContext">
            <summary>
            Provides access to objects needed for laying out a graph.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutContext.#ctor(System.Drawing.Rectangle,Microsoft.NetMap.Visualization.IGraphDrawer)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> class.
             </summary>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </param>
            
             <param name="graphDrawer">
             The <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that will be used to draw the graph
             after it is laid out.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayoutContext.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayoutContext.m_oGraphRectangle">
            The Rectangle the graph is being laid out within.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayoutContext.m_oGraphDrawer">
            The IGraphDrawer that will be used to draw the graph after it is laid
            out.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle">
             <summary>
             Gets the <see cref="T:System.Drawing.Rectangle"/> the graph is being
             laid out within.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being laid out
             within.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.LayoutContext.GraphDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that will be used to draw the
             graph after it is laid out.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that will be used to draw the graph
             after it is laid out.
             </value>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.DrawContext">
            <summary>
            Provides access to objects needed for drawing operations.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawContext.#ctor(Microsoft.NetMap.Visualization.IGraphDrawer,System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32)">
             <summary>
             Initializes a new instance of the DrawContext class.
             </summary>
            
             <param name="graphDrawer">
             The <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that is drawing the graph.
             </param>
            
             <param name="graphics">
             The <see cref="T:System.Drawing.Graphics"/> object to draw with.  The
             <see cref="P:System.Drawing.Graphics.Clip"/> property must already be
             set to <paramref name="graphRectangle"/> to prevent drawing operations
             from exceeding the graph's bounds.
             </param>
            
             <param name="graphRectangle">
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being drawn
             within.
             </param>
            
             <param name="margin">
             The margin that was used to lay out the graph.  If <paramref name="graphRectangle"/> is {L=0, T=0, R=50, B=30} and <paramref name="margin"/> is 5, for example, then the graph was laid out within
             the rectangle {L=5, T=5, R=45, B=25}.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DrawContext.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DrawContext.m_oGraphDrawer">
            The IGraphDrawer that is drawing the graph.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DrawContext.m_oGraphics">
            Graphics object to draw with.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DrawContext.m_oGraphRectangle">
            Rectangle to draw within.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DrawContext.m_iMargin">
            Margin the graph was laid out within.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.DrawContext.GraphDrawer">
             <summary>
             Gets the <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that is drawing the graph.
             </summary>
            
             <value>
             The <see cref="T:Microsoft.NetMap.Visualization.IGraphDrawer"/> that is drawing the graph.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.DrawContext.Graphics">
             <summary>
             Gets the <see cref="T:System.Drawing.Graphics"/> object to draw with.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Graphics"/> object to draw with.
             </value>
            
             <remarks>
             The <see cref="P:System.Drawing.Graphics.Clip"/> property is already
             set to <see cref="P:Microsoft.NetMap.Visualization.DrawContext.GraphRectangle"/> to prevent drawing operations
             from exceeding the graph's bounds.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.DrawContext.GraphRectangle">
             <summary>
             Gets the <see cref="T:System.Drawing.Rectangle"/> the graph is being
             drawn within.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being drawn
             within.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.DrawContext.GraphRectangleMinusMargin">
             <summary>
             Gets the <see cref="T:System.Drawing.Rectangle"/> the graph is being
             drawn within, reduced on all sides by the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Margin"/>.
             </summary>
            
             <value>
             The <see cref="T:System.Drawing.Rectangle"/> the graph is being drawn
             within, reduced by <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Margin"/>.
             </value>
            
             <remarks>
             If the graph rectangle is narrower or shorter than twice the <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Margin"/>, Rectangle.Empty is returned.
             </remarks>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.DrawContext.Margin">
             <summary>
            	Gets the margin the graph was laid out within.
             </summary>
            
             <value>
             The margin that was used to lay out the graph.  Always greater than or
             equal to zero.
             </value>
            
             <remarks>
             If <see cref="P:Microsoft.NetMap.Visualization.DrawContext.GraphRectangle"/> is {L=0, T=0, R=50, B=30} and <see cref="P:Microsoft.NetMap.Visualization.DrawContext.Margin"/> is 5, for example, then the graph was laid out within
             the rectangle {L=5, T=5, R=45, B=25}.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.CircleLayout">
             <summary>
            	Lays out a graph by placing the vertices on a circle.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a circle whose diameter is the
             smaller of the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.CircleLayout.AnimationIterations">
            Number of iterations used to animate the graph the first time it is
            drawn.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.CircleLayout.AnimationSleepMs">
            Number of milliseconds to sleep between animation iterations.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircleLayout.#ctor">
            <summary>
            Initializes a new instance of the CircleLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircleLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.CircleLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.DiamondHitTestArea">
             <summary>
             Provides hit-testing for a diamond area.
             </summary>
            
             <remarks>
             This is one of a set of classes that are used for hit-testing.  The classes
             generally provide a lightweight alternative to using System.Drawing.Region
             objects for hit-testing, except in this case a Region is used anyway.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DiamondHitTestArea.#ctor(System.Drawing.PointF,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.DiamondHitTestArea"/>
             class.
             </summary>
            
             <param name="center">
             The diamond's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the diamond.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DiamondHitTestArea.Contains(System.Drawing.PointF)">
             <summary>
             Determines whether the hit-test area contains a specified point.
             </summary>
            
             <param name="point">
             Point to test.
             </param>
            
             <returns>
             true if this hit-test area contains <paramref name="point" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DiamondHitTestArea.IntersectsWith(System.Drawing.Rectangle)">
             <summary>
             Determines whether the hit-test area intersects a specified rectangle.
             </summary>
            
             <param name="rectangle">
             Rectangle to test.
             </param>
            
             <returns>
             true if this hit-test area intersects <paramref name="rectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DiamondHitTestArea.GetRegion">
             <summary>
             Gets a Region that defines the triangle.
             </summary>
            
             <returns>
             A Region that defines the triangle.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.DiamondHitTestArea.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DiamondHitTestArea.m_oCenter">
            The diamond's center.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.DiamondHitTestArea.m_fHalfWidth">
            One half the width of the diamond.
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SpiralLayout">
             <summary>
            	Lays out a graph by placing the vertices on a spiral.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a spiral scaled to the smaller of
             the rectangle's dimensions.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SpiralLayout.MaximumSpiralAngle">
            Maximum angle of the spiral, in radians.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SpiralLayout.AnimationIterations">
            Number of iterations used to animate the graph the first time it is
            drawn.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SpiralLayout.AnimationSleepMs">
            Number of milliseconds to sleep between animation iterations.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SpiralLayout.#ctor">
            <summary>
            Initializes a new instance of the SpiralLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SpiralLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SpiralLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments">
             <summary>
             Stores the arguments passed to <see cref="M:Microsoft.NetMap.Visualization.IAsyncLayout.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </summary>
            
             <remarks>
             <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.LayOutGraphAsync(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> uses an instance of this
             class to pass its arguments to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.#ctor(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments"/> class.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.m_oGraph">
            Graph to lay out.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.m_oLayoutContext">
            Provides access to objects needed to lay out the graph.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.Graph">
             <summary>
             Gets the graph to lay out.
             </summary>
            
             <value>
             The graph to lay out, as an <see cref="T:Microsoft.NetMap.Core.IGraph"/>.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.LayoutContext">
             <summary>
             Gets the object that provides access to objects needed to lay out the
             graph.
             </summary>
            
             <value>
             Object that provides access to objects needed to lay out the graph, as
             a <see cref="P:Microsoft.NetMap.Visualization.LayOutGraphAsyncArguments.LayoutContext"/>.
             </value>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.KamadaKawaiiLayout">
             <summary>
            	Lays out a graph using the Kamada-Kawaii layout.
             </summary>
            
             <remarks>
            	For details on the layout algorithm, see Kamada, T., and Kawai, S., "A
            	General Framework for Visualizing Abstract Objects and Relations", ACM
            	Transactions on Graphics (TOG) 10, 1 (1991), 1--39.
            
             <para>
             Important Note: As of August 2008, this class is not implemented.  <see cref="M:Microsoft.NetMap.Visualization.KamadaKawaiiLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)"/> throws a NotImplementedException.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.KamadaKawaiiLayout.#ctor">
            <summary>
            Initializes a new instance of the KamadaKawaiiLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.KamadaKawaiiLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             <para>
             Important Note: As of August 2008, this method is not implemented.  It
             throws a NotImplementedException.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.KamadaKawaiiLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo">
             <summary>
             Stores information calculated by <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout"/>
             for one vertex.
             </summary>
            
             <remarks>
             <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout"/> calculates several pieces of
             information about each vertex in the graph being laid out.  Instead of
             storing each piece of information in a separate vertex metadata key, which
             would require multiple key lookups and inefficient boxing and unboxing of
             value types, it stores all the information for the vertex in one instance
             of type <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo"/> and stores the
             instance in a single key.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.#ctor(System.Drawing.PointF)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo"/> class.
             </summary>
            
             <param name="initialLocation">
             The vertex's initial location within the bounded graph rectangle.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.m_fUnboundedLocationX">
            The vertex's location within an unbounded rectangle.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.m_fUnboundedLocationY">
            
        </member>
        <member name="F:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.m_fDisplacementX">
            The vertex's displacement with respect to its current unbounded
            location.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.m_fDisplacementY">
            
        </member>
        <member name="P:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.UnboundedLocationX">
             <summary>
             Gets or sets the x-coordinate of the vertex's location within an
             unbounded rectangle.
             </summary>
            
             <value>
             The x-coordinate of the vertex's location within an unbounded
             rectangle.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.UnboundedLocationY">
             <summary>
             Gets or sets the y-coordinate of the vertex's location within an
             unbounded rectangle.
             </summary>
            
             <value>
             The y-coordinate of the vertex's location within an unbounded
             rectangle.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.DisplacementX">
             <summary>
             Gets or sets the vertex's horizontal displacement with respect to its
             current unbounded location.
             </summary>
            
             <value>
             The vertex's horizontal displacement with respect to its current
             unbounded location.  The default value is zero.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.FruchtermanReingoldVertexInfo.DisplacementY">
             <summary>
             Gets or sets the vertex's vertical displacement with respect to its
             current unbounded location.
             </summary>
            
             <value>
             The vertex's vertical displacement with respect to its current
             unbounded location.  The default value is zero.
             </value>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer">
             <summary>
            	Draws a vertex as an image.
             </summary>
            
             <remarks>
             By default, this class delegates vertex drawing to its base class.  If you
             add appropriate metadata to a vertex, however, this class uses the metadata
             to draw the vertex as an image instead of a shape.
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexImage"/> key,
             the vertex is drawn using the <see cref="T:System.Drawing.Image"/> specified by the key's
             value.
             </para>
            
             <para>
             To force this class to ignore the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexImage"/> key and delegate drawing to
             the base class, add a <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexDrawerPrecedence"/> key and set its
             value to anything except <see cref="F:Microsoft.NetMap.Visualization.VertexDrawerPrecedence.Image"/>.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.PerVertexDrawer"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.TryGetImage(Microsoft.NetMap.Core.IVertex,System.Drawing.Image@)">
             <summary>
             Attempts to get an image for a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to get an image for.
             </param>
            
             <param name="image">
             Where the vertex's image gets stored if true is returned.
             </param>
            
             <returns>
             true if <paramref name="vertex" /> should be drawn as an image.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.GetImageRectangle(Microsoft.NetMap.Core.IVertex,System.Drawing.Image)">
             <summary>
             Gets the rectangle a vertex's image is drawn within.
             </summary>
            
             <param name="vertex">
             The vertex to get a rectangle for.
             </param>
            
             <param name="image">
             The vertex's image.
             </param>
            
             <returns>
             The <see cref="T:System.Drawing.Rectangle"/> the image should be drawn within.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.PreDrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.DrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The vertex's bounding rectangle.
             </returns>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerEdgeDrawer">
             <summary>
            	Draws an edge as a simple line.  Allows per-edge customizations.
             </summary>
            
             <remarks>
             By default, this class delegates edge drawing to its base class.  If you
             add appropriate metadata to an edge, however, this class uses the metadata
             to customize the appearance of that edge.
            
             <para>
             A selected edge is always drawn using <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/>.  If an unselected edge has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerColor"/> key, the edge is drawn using
             the <see cref="T:System.Drawing.Color"/> specified by the key's value.  If an unselected
             edge does not have this key, it is drawn using <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/>.
             </para>
            
             <para>
             If an edge has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerAlpha"/> key, the
             edge's opacity is set to the <see cref="T:System.Int32"/> opacity specified by the
             key's value.  The opacity varies from 0 (transparent) to 255 (opaque).
             </para>
            
             <para>
             A selected edge is always drawn using <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>.  If an unselected edge has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerEdgeWidth"/> key, the edge is drawn using
             the <see cref="T:System.Int32"/> width specified by the key's value.  If an
             unselected edge does not have this key, it is drawn using <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/>.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerEdgeDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeDrawer.GetActualColor(Microsoft.NetMap.Core.IEdge,System.Boolean)">
             <summary>
             Gets the actual color to use for an edge.
             </summary>
            
             <param name="edge">
             The edge to get the actual color for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="edge" /> should be shown as selected.
             </param>
            
             <returns>
             The actual color to use.
             </returns>
            
             <remarks>
             See the class comments for details on how the actual color is
             determined.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeDrawer.GetActualWidth(Microsoft.NetMap.Core.IEdge,System.Boolean)">
             <summary>
             Gets the actual width to use for an edge.
             </summary>
            
             <param name="edge">
             The edge to get the actual width for.
             </param>
            
             <param name="showAsSelected">
             true if <paramref name="edge" /> should be shown as selected.
             </param>
            
             <returns>
             The actual width to use.
             </returns>
            
             <remarks>
             See the class comments for details on how the actual color is
             determined.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.TriangularHitTestArea">
             <summary>
             Provides hit-testing for a triangular area.
             </summary>
            
             <remarks>
             This is one of a set of classes that are used for hit-testing.  The classes
             generally provide a lightweight alternative to using System.Drawing.Region
             objects for hit-testing, except in this case a Region is used anyway.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.TriangularHitTestArea.#ctor(System.Drawing.PointF,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.TriangularHitTestArea"/>
             class.
             </summary>
            
             <param name="center">
             The triangle's center.
             </param>
            
             <param name="halfWidth">
             One half the width of the triangle.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.TriangularHitTestArea.Contains(System.Drawing.PointF)">
             <summary>
             Determines whether the hit-test area contains a specified point.
             </summary>
            
             <param name="point">
             Point to test.
             </param>
            
             <returns>
             true if this hit-test area contains <paramref name="point" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.TriangularHitTestArea.IntersectsWith(System.Drawing.Rectangle)">
             <summary>
             Determines whether the hit-test area intersects a specified rectangle.
             </summary>
            
             <param name="rectangle">
             Rectangle to test.
             </param>
            
             <returns>
             true if this hit-test area intersects <paramref name="rectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.TriangularHitTestArea.GetRegion">
             <summary>
             Gets a Region that defines the triangle.
             </summary>
            
             <returns>
             A Region that defines the triangle.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.TriangularHitTestArea.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.TriangularHitTestArea.m_oCenter">
            The triangle's center.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.TriangularHitTestArea.m_fHalfWidth">
            One half the width of the triangle.
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int64)">
             <summary>
             Throws an exception if an Int64 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="lArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo">
            <summary>
            The <see cref="T:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer"/> class uses an instance of this
            class to store drawing information for a vertex's primary label in the
            vertex's metadata.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.#ctor(System.String,System.Drawing.RectangleF,System.Drawing.Rectangle)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo"/>
             class.
             </summary>
            
             <param name="primaryLabel">
             The vertex's primary label.  Can be null or empty.
             </param>
            
             <param name="textRectangle">
             The rectangle in which the primary label text should be drawn.
             </param>
            
             <param name="outlineRectangle">
             The vertex rectangle to draw an outline around.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.m_sPrimaryLabel">
            The vertex's primary label.  Can be null or empty.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.m_oTextRectangle">
            The rectangle in which the primary label text should be drawn.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.m_oOutlineRectangle">
            The vertex rectangle to draw an outline around.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.PrimaryLabel">
             <summary>
             Gets the vertex's primary label.
             </summary>
            
             <value>
             The vertex's primary label.  Can be null or empty.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.TextRectangle">
             <summary>
             Gets the rectangle in which the primary label text should be drawn.
             </summary>
            
             <value>
             The rectangle in which the primary label text should be drawn.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo.OutlineRectangle">
             <summary>
             Gets the vertex rectangle to draw an outline around.
             </summary>
            
             <value>
             The vertex rectangle to draw an outline around.
             </value>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer">
             <summary>
            	Draws a vertex as one or two labels.
             </summary>
            
             <remarks>
             By default, this class delegates vertex drawing to its base class.  If you
             add appropriate metadata to a vertex, however, this class uses the metadata
             to draw a text label instead of whatever the base class would draw, or a
             text label in addition to whatever the base class draws, or both.
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> key, the vertex is
             drawn as a rectangle containing the text specified by the key's value.  If
             a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexSecondaryLabel"/> key, the vertex is
             drawn by the base class and then annotated with the text specified by the
             key's value.  If a vertex has both keys, both labels are drawn.
             </para>
            
             <para>
             If a vertex has the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> and <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexPrimaryLabelFillColor"/> keys, the
             specified fill color is used to fill the primary label rectangle.  The
             default fill color is <see cref="P:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.PrimaryLabelFillColor"/>.
             </para>
            
             <para>
             To force this class to ignore the <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexPrimaryLabel"/> key and delegate
             drawing to the base class, add a <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.PerVertexDrawerPrecedence"/> key and set its
             value to anything except <see cref="F:Microsoft.NetMap.Visualization.VertexDrawerPrecedence.PrimaryLabel"/>.
             </para>
            
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.PerVertexDrawer"/>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.MaximumLabelWidth">
            Maximum with of a label, not including the label padding.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.LabelPadding">
            Padding between the label text and label outline.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.TryGetPrimaryLabelDrawInfo(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo@)">
             <summary>
             Attempts to get the primary label drawing information for a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to get drawing information for.
             </param>
            
             <param name="primaryLabelDrawInfo">
             Where the primary label drawing information gets stored if true is
             returned.
             </param>
            
             <returns>
             true if <paramref name="primaryLabelDrawInfo"/> was obtained.
             </returns>
            
             <remarks>
             This method attempts to retrieve a <see cref="T:Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo"/>
             object that may have been stored in a vertex's metadata by <see cref="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.PreDrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.PreDrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Prepares to draw a vertex.
             </summary>
            
             <param name="vertex">
             The vertex that will eventually be drawn.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             After a graph is laid out but before its edges or vertices are drawn,
             this method gets called repeatedly, once for each of the graph's
             vertices.  The implementation can use this method to perform any
             pre-drawing calculations it needs.  It can also change the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> of <paramref name="vertex"/> if the layout
             has located the vertex in a place where it would get clipped by the
             graph rectangle if it weren't moved.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.DrawVertexCore(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws a vertex.
             </summary>
            
             <param name="vertex">
             The vertex to draw.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <returns>
             The vertex's bounding rectangle.
             </returns>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's vertices.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.DrawPrimaryLabel(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,Microsoft.NetMap.Visualization.PrimaryLabelDrawInfo,System.Drawing.Color,System.Boolean)">
             <summary>
             Draws a vertex as a rectangle containing the primary label text.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="oPrimaryLabelDrawInfo">
             Information needed to draw the primary label.
             </param>
            
             <param name="oTextColor">
             Text color to use.
             </param>
            
             <param name="bDrawSelected">
             true if the vertex should be drawn selected.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.DrawSecondaryLabel(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.String,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean)">
             <summary>
             Adds a secondary vertex label to whatever has already been drawn.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="sSecondaryLabel">
             Secondary label text.  Can be null or empty.
             </param>
            
             <param name="oVertexBounds">
             Bounding rectangle of the vertex.
             </param>
            
             <param name="oUnselectedTextColor">
             Color of the vertex when it is not selected.  This is used as the
             secondary label text color when the vertex is not selected.  (When the
             vertex is selected, this.SelectedColor is used.)
             </param>
            
             <param name="bDrawSelected">
             true if the vertex should be drawn selected.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.GetPrimaryLabelRectangles(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.String,System.Boolean,System.Drawing.RectangleF@,System.Drawing.Rectangle@)">
             <summary>
             Gets the rectangles in which to draw a vertex's primary label.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="sPrimaryLabel">
             Primary label text.
             </param>
            
             <param name="bDrawSelected">
             true if the vertex should be drawn selected.
             </param>
            
             <param name="oTextRectangleF">
             Where the rectangle in which the label text should be drawn gets
             stored.
             </param>
            
             <param name="oOutlineRectangle">
             Where the rectangle to draw an outline around gets stored.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.AdjustPrimaryLabelRectangles(Microsoft.NetMap.Visualization.DrawContext,System.Drawing.RectangleF@,System.Drawing.Rectangle@)">
             <summary>
             Adjusts the rectangles in which to draw a vertex's primary label so
             they don't get clipped by the graph rectangle.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="oTextRectangleF">
             The rectangle in which the label text should be drawn.  This gets
             updated with an adjusted rectangle.
             </param>
            
             <param name="oOutlineRectangle">
             The rectangle to draw an outline around gets stored.  This gets updated
             with an adjusted rectangle.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.GetSecondaryLabelRectangle(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.String,System.Drawing.Rectangle)">
             <summary>
             Gets the rectangle in which to draw a vertex's secondary label.
             </summary>
            
             <param name="oVertex">
             The vertex to draw.
             </param>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="sSecondaryLabel">
             Secondary label text.
             </param>
            
             <param name="oVertexBounds">
             Bounding rectangle of the vertex.
             </param>
            
             <returns>
             The rectangle in which the secondary label text should be drawn.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.AdjustSecondaryLabelRectangle(Microsoft.NetMap.Visualization.DrawContext,System.Drawing.RectangleF@)">
             <summary>
             Adjusts the rectangle in which to draw a vertex's secondary label so
             they it doesn't get clipped by the graph rectangle.
             </summary>
            
             <param name="oDrawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="oSecondaryLabelRectangleF">
             The rectangle in which the secondary label text should be drawn.  This
             gets updated with an adjusted rectangle.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.m_oFont">
            The font to use for drawing labels.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.m_oPrimaryLabelFillColor">
            The fill color to use for primary labels.
        </member>
        <member name="P:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.Font">
             <summary>
            	Gets or sets the font to use for drawing labels.
             </summary>
            
             <value>
            	The font to use for drawing labels.  The default is the system default
             font.
             </value>
        </member>
        <member name="P:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer.PrimaryLabelFillColor">
             <summary>
            	Gets or sets the fill color to use for primary labels.
             </summary>
            
             <value>
            	The fill color to use for primary labels.  The default is
             SystemColors.Window.
             </value>
            
             <remarks>
             <see cref="T:System.Drawing.Color"/> is used for the primary label text.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SugiyamaLayout">
             <summary>
            	Lays out a graph using the Sugiyama layered layout scheme.
             </summary>
            
             <remarks>
             This layout uses an algorithm based on Sugiyama's layered layout scheme.
             It is implemented with the Microsoft Research GLEE (Graph Layout Execution
             Engine) library.  GLEE was developed by Lev Nachmanson of Microsoft
             Research and was available on the Microsoft Research download site as of
             January 2007.
            
             <para>
             The Microsoft.GLEE.dll assembly must be included in the build that uses
             this class.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer"/>
             should be used to draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SugiyamaLayout.DefaultNetMapVertexRadius">
            Radius to use for the vertices if the vertex drawer in use isn't the
            expected SugiyamaVertexDrawer.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.#ctor">
            <summary>
            Initializes a new instance of the SugiyamaLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.TransformLayoutCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,Microsoft.NetMap.Visualization.LayoutContext,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Transforms a graph's current layout.
             </summary>
            
             <param name="graph">
             Graph whose layout needs to be transformed.
             </param>
            
             <param name="originalLayoutContext">
             <see cref="T:Microsoft.NetMap.Visualization.LayoutContext"/> object that was passed to the most recent
             call to <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>.
             </param>
            
             <param name="newLayoutContext">
             Provides access to objects needed to transform the graph's layout.
             </param>
            
             <param name="transformationMatrix">
             Matrix that can be used to transform points from the original graph
             rectangle to the new graph rectangle.
             </param>
            
             <remarks>
             After a graph has been laid out by <see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/>,
             this method may get called to transform the graph's layout from one
             rectangle to another.  <paramref name="originalLayoutContext"/>
             contains the original graph rectangle, and <paramref name="newLayoutContext"/> contains the new graph rectangle.  The
             base-class implementation transforms all the graph's vertex locations
             from the original rectangle to the new one.  If the derived <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)"/> implementation added geometry metadata to the
             graph, the derived class should override this method, transform the
             geometry metadata, and call the base-class implementation to transform
             the graph's vertex locations.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.OnVertexMoveCore(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Processes a vertex that was moved after the graph was laid out.
             </summary>
            
             <param name="vertex">
             The vertex that was moved.
             </param>
            
             <remarks>
             An application may allow the user to move a vertex after the graph has
             been laid out by <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)"/>.  This method is called
             after the application has changed the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
             property on <paramref name="vertex"/>.  If <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)"/> added geometry metadata to the graph,
             vertices, or edges, <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.OnVertexMoveCore(Microsoft.NetMap.Core.IVertex)"/> should modify the
             metadata if necessary.
            
             <para>
             The argument has already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GetNetMapVertexRadius(Microsoft.NetMap.Visualization.LayoutContext)">
             <summary>
             Gets the vertex radius specified by the <see cref="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer"/> in use.
             </summary>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <returns> 
             The vertex radius.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.NetMapVertexToGleeNode(Microsoft.NetMap.Core.IVertex)">
             <summary>
             Retrieves a GLEE node that has been stored as metadata in a NetMap
             vertex. 
             </summary>
            
             <param name="oVertex">
             NetMap vertex.
             </param>
            
             <returns>
             The GLEE node corresponding to <paramref name="oVertex" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE node has been stored in the vertex's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeNode.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.NetMapEdgeToGleeEdge(Microsoft.NetMap.Core.IEdge)">
             <summary>
             Retrieves a GLEE edge that has been stored as metadata in a NetMap
             edge. 
             </summary>
            
             <param name="oEdge">
             NetMap edge.
             </param>
            
             <returns>
             The GLEE edge corresponding to <paramref name="oEdge" />.
             </returns>
            
             <remarks>
             This method assumes that the GLEE edge has been stored in the edge's
             metadata using the key ReservedMetadataKeys.SugiyamaGleeEdge.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)">
             <summary>
             Returns a <see cref="T:System.Drawing.Drawing2D.Matrix"/> that will transform coordinates in the
             graph rectangle computed by the GLEE layout code to coordinates in the
             NetMap graph rectangle.
             </summary>
            
             <param name="oGleeGraph">
             GLEE graph that has been laid out.
             </param>
            
             <param name="oNetMapGraphRectangle">
             Rectangle in which the NetMap graph is being laid out.
             </param>
            
             <returns>
             A <see cref="T:System.Drawing.Drawing2D.Matrix"/> to transform coordinates.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GleePointToTransformedPointF(Microsoft.Glee.Splines.Point,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point in GLEE coordinates to a PointF
             in NetMap coordinates.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             <paramref name="oGleePoint"/> in GLEE coordinates converted to a
             PointF in NetMap coordinates.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GleePointToPointF(Microsoft.Glee.Splines.Point)">
             <summary>
             Converts a Microsoft.Glee.Splines.Point to a PointF.
             </summary>
            
             <param name="oGleePoint">
             Microsoft.Glee.Splines.Point to convert.
             </param>
            
             <returns>
             <paramref name="oGleePoint" /> converted to a PointF.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GleeCurveToTransformedPointFArray(Microsoft.Glee.Splines.Curve,System.Drawing.Drawing2D.Matrix)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects
             in NetMap coordinates.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <param name="oTransformationMatrix">
             Matrix created by <see cref="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GetTransformationMatrix(Microsoft.Glee.GleeGraph,System.Drawing.Rectangle)"/>.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.GleeCurveToPointFArray(Microsoft.Glee.Splines.Curve)">
             <summary>
             Converts a Microsoft.Glee.Splines.Curve to an array of PointF objects.
             </summary>
            
             <param name="oCurve">
             Microsoft.Glee.Splines.Curve to convert.
             </param>
            
             <returns>
             An array of PointF objects suitable for drawing with the following
             code, where aoCurvePoints is the returned array:
            
             <code>
             oTransformationMatrix.TransformPoints(aoCurvePoints);
            
             GraphicsPath oGraphicsPath = new GraphicsPath();
             
             oGraphicsPath.AddBeziers(aoCurvePoints);
             
             oGraphics.DrawPath(oPen, oGraphicsPath);
             </code>
            
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout">
             <summary>
            	Lays out a graph using the Fruchterman-Reingold layout.
             </summary>
            
             <remarks>
            	For details on the layout algorithm, see
             http://www.cs.ubc.ca/rr/proceedings/spe91-95/spe/vol21/issue11/spe060tf.pdf.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             By default, the layout is initialized by setting the vertices to random
             locations.  If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.FruchtermanReingoldLayoutSelectivelyRandomize"/>, however, only those vertices whose <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> is
             set to  <see cref="F:Microsoft.NetMap.Visualization.LayoutBase.RandomizeThisLocation"/> are randomized.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.Iterations">
            Number of iterations to run the algorithm.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.#ctor">
            <summary>
            Initializes a new instance of the FruchtermanReingoldLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.InitializeMetadata(System.Collections.ICollection)">
             <summary>
             Stores required metadata on the graph's vertices before the layout
             begins.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.RemoveMetadata(System.Collections.ICollection)">
             <summary>
             Removes metadata from the graph's vertices after the layout is
             complete.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.CalculateRepulsiveForces(System.Collections.ICollection,System.Single)">
             <summary>
             Calculates the repulsive forces between the vertices.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are stored in the FruchtermanReingoldVertexInfo object
             stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.CalculateAttractiveForces(System.Collections.ICollection,System.Single)">
             <summary>
             Calculates the attractive forces between the vertices.
             </summary>
            
             <param name="edgesToLayOut">
             Edges to lay out.
             </param>
            
             <param name="k">
             The "k" constant in the Fruchterman-Reingold algorithm.
             </param>
            
             <remarks>
             The results are added to the existing FruchtermanReingoldVertexInfo
             object stored in each vertex's Tag.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.SetVertexLocations(System.Collections.ICollection,Microsoft.NetMap.Visualization.LayoutContext,System.Single)">
             <summary>
             Sets the location of each vertex.
             </summary>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="fTemperature">
             Current temperature.  Must be greater than zero.
             </param>
            
             <remarks>
             This method is called at the end of each layout iteration.  For each
             vertex, it modifies the vertex's location within an unbounded rectangle
             based on the repulsive and attractive forces that have been calculated
             for the vertex, transforms that unbounded location to a point within
             the bounded graph rectangle, and sets the vertex's <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property to that bounded point.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.FruchtermanReingoldLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.RectangularHitTestArea">
             <summary>
             Provides hit-testing for a rectangular area.
             </summary>
            
             <remarks>
             This is one of a set of classes that are used for hit-testing.  The classes
             provide a lightweight alternative to using System.Drawing.Region objects
             for hit-testing.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RectangularHitTestArea.#ctor(System.Drawing.Rectangle)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.RectangularHitTestArea"/> class.
             </summary>
            
             <param name="rectangle">
             Rectangle that defines the hit-test area.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RectangularHitTestArea.Contains(System.Drawing.PointF)">
             <summary>
             Determines whether the hit-test area contains a specified point.
             </summary>
            
             <param name="point">
             Point to test.
             </param>
            
             <returns>
             true if this hit-test area contains <paramref name="point" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RectangularHitTestArea.IntersectsWith(System.Drawing.Rectangle)">
             <summary>
             Determines whether the hit-test area intersects a specified rectangle.
             </summary>
            
             <param name="rectangle">
             Rectangle to test.
             </param>
            
             <returns>
             true if this hit-test area intersects <paramref name="rectangle" />.
             </returns>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RectangularHitTestArea.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.RectangularHitTestArea.m_oRectangle">
            Rectangle that defines the hit-test area.
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil">
             <summary>
            	Set of static methods that perform graphics operations not available
            	directly through GDI+.
             </summary>
            
             <remarks>
            	Do not try to instantiate an object of this type.  All methods are static.
            	</remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.#ctor">
             <summary>
             Do not use this contructor.
             </summary>
            
             <remarks>
             All methods on this class are static, so there is no need to create a
             GraphicsUtil object.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PixelsToPoints(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPx">
            	Width in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPx">
            	Height in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPt">
            	Where the width in points gets stored.
             </param>
            
             <param name="fHeightPt">
            	Where the height in points gets stored.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
            	Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
            	Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPx">
            	Where the width in pixels gets stored.
             </param>
            
             <param name="fHeightPx">
            	Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             floating-point pixels.  The other converts to integer pixels.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Int32@,System.Int32@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
            	Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
            	Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="iWidthPx">
            	Where the width in pixels gets stored.
             </param>
            
             <param name="iHeightPx">
            	Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             integer pixels.  The other converts to floating-point pixels.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oPen">
            	Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius
             using 3-D shading.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
            	Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.  Must be greater than zero.
             </param>
            
             <remarks>
            	The circle is shaded to make it look as if it's a 3-D sphere.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawSquare(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a square defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oPen">
            	Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillSquare(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square defined by a center point and
             half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillSquare3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square using 3-D shading.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
            	Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <remarks>
            	The square is shaded to make it look as if it's 3-D.
            
             <para>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawDiamond(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a diamond defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oPen">
            	Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <remarks>
             The diamond is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillDiamond(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills a diamond defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <remarks>
             The diamond is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawTriangle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws an equilateral triangle defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oPen">
            	Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <remarks>
             The triangle is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillTriangle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills an equilateral triangle defined by a center point and half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <remarks>
             The triangle is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.Clear(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Clears the entire drawing surface and fills it with the specified
             background color.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
             <see cref="T:System.Drawing.Color"/> structure that represents the background color of
             the drawing surface. 
             </param>
            
             <remarks>
             This adds a GDI bug workaround to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.CreateRoundedRectangleGraphicsPath(System.Drawing.Rectangle,System.Int32)">
             <summary>
             Creates a GraphicsPath that describes a rectangle with rounded corners.
             </summary>
            
             <param name="oRectangle">
            	Rectangle to add rounded corners to.
             </param>
            
             <param name="iCornerRadius">
             Radius of the rectangle's corners.
             </param>
            
             <returns>
             A new GraphicsPath.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillTextRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Fills the interior of a rectangle that will contain text.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.  If empty, this method does nothing.
             </param>
            
             <param name="bTextIsSelected">
            	true if the text is selected.
             </param>
            
             <remarks>
             This method fills the interior of a rectangle with either the system
             window or system highlight color, depending on whether the text is
             selected.  Call this method before you draw the text.  When you draw
             the text, use SystemBrushes.HighlightText or SystemBrushes.WindowText
             as the text color.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.RadiusToArea(System.Double)">
             <summary>
            	Returns the area of a circle given its radius.
             </summary>
            
             <param name="dRadius">
            	The circle's radius.
             </param>
            
             <returns>
            	The circle's area.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.AreaToRadius(System.Double)">
             <summary>
            	Returns the radius of a circle given its area.
             </summary>
            
             <param name="dArea">
            	The circle's area.
             </param>
            
             <returns>
            	The circle's radius.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SquareFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns a square given a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square.
             </param>
            
             <returns>
             The specified square.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DiamondFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points that define a diamond given a center point
             and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <returns>
             The specified diamond.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.GetDiamondEdgeMidpoints(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points on the midpoints of a diamond's edges given
             a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the diamond's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the diamond's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the diamond.
             </param>
            
             <returns>
             The midpoints of the specified diamond.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.TriangleFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points that define an equilateral triangle given a
             center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             The specified triangle.  The order of the points is top, lower-right,
             lower-left.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.GetTriangleEdgeMidpoints(System.Single,System.Single,System.Single)">
             <summary>
             Returns an array of points on the midpoints of an equilateral
             triangle's edges given a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the triangle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the triangle's center.
             </param>
            
             <param name="fHalfWidth">
             One half the width of the square that bounds the triangle.
             </param>
            
             <returns>
             The midpoints of the specified triangle.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.RectangleFToRectangle(System.Drawing.RectangleF,System.Int32)">
             <summary>
             Converts a RectangleF to a Rectangle.
             </summary>
            
             <param name="oRectangle">
             Rectangle to convert.
             </param>
             
             <param name="iPenWidthPx">
             Width of the pen that will be used to draw the rectangle.
             </param>
            
             <returns>
             Converted rectangle.
             </returns>
            
             <remarks>
            	This method converts a floating-point RectangleF to an integer
            	Rectangle, compensating for some GDI oddities in the process.
            
             <para>
            	If precise rectangle drawing is required, the caller should convert
            	all RectangleF objects to Rectangles using this method, then use the
            	Graphics.DrawRectangle(Pen, Rectangle) method to draw them.  The
            	floating-point version of Graphics.DrawRectangle() should not be used.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SaveHighQualityImage(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
             <summary>
             Saves an Image object to a specified file in a specified format using
             high quality settings.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="eImageFormat">
             File format.
             </param>
            
             <remarks>
             Use this instead of Image.Save(filename, format) if you want a high-
             quality image.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SaveJpegImage(System.Drawing.Image,System.String,System.Int32)">
             <summary>
             Saves an image to a JPEG file with a specified quality level.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="iQuality">
             Quality level to use.  I THINK this can be from 1 to 100; the
             documentation is not clear.
             </param>
            
             <remarks>
             Image.Save(..., ImageFormat.Jpeg) uses a low quality by default.  This
             method allows the quality to be specified.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawErrorStringOnGraphics(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
             <summary>
            	Draws an error string on a Graphics object.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.
             </param>
            
             <param name="sString">
             String to draw.
             </param>
            
             <remarks>
             This can be used to draw error strings on bitmaps in a uniform manner.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.GetImageCodecInfoForMimeType(System.String)">
             <summary>
             Gets the ImageCodecInfo object for a specified MIME type.
             </summary>
            
             <param name="sMimeType">
             MIME type.
             </param>
            
             <remarks>
             An exception is thrown if the requested object isn't found.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.ConvertPixelsAndPoints(System.Boolean,System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points, or vice versa.
             </summary>
            
             <param name="bPixelsToPoints">
            	true to convert pixels to points, false to convert points to pixels.
             </param>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthIn">
             Input width.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightIn">
             Input height.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthOut">
            	Where the converted width gets stored.
             </param>
            
             <param name="fHeightOut">
            	Where the converted height gets stored.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposePen(System.Drawing.Pen@)">
             <summary>
             Disposes of a pen.
             </summary>
            
             <param name="oPen">
            	Pen to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oPen" /> isn't null, this method calls the Dispose
             method on <paramref name="oPen" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeSolidBrush(System.Drawing.SolidBrush@)">
             <summary>
             Disposes of a solid brush.
             </summary>
            
             <param name="oSolidBrush">
            	SolidBrush to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oSolidBrush" /> isn't null, this method calls the
             Dispose method on <paramref name="oSolidBrush" />, then sets it to
             null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeBrush(System.Drawing.Brush@)">
             <summary>
             Disposes of a brush.
             </summary>
            
             <param name="oBrush">
            	Brush to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBrush" /> isn't null, this method calls the Dispose
             method on <paramref name="oBrush" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeGraphics(System.Drawing.Graphics@)">
             <summary>
             Disposes of a Graphics object.
             </summary>
            
             <param name="oGraphics">
            	Graphics object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphics" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphics" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeGraphicsPath(System.Drawing.Drawing2D.GraphicsPath@)">
             <summary>
             Disposes of a GraphicsPath object.
             </summary>
            
             <param name="oGraphicsPath">
            	GraphicsPath object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphicsPath" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphicsPath" />, then sets it to
             null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeBitmap(System.Drawing.Bitmap@)">
             <summary>
             Disposes of a Bitmap object.
             </summary>
            
             <param name="oBitmap">
            	Bitmap object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBitmap" /> isn't null, this method calls the
             Dispose method on <paramref name="oBitmap" />, then sets it to null.
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.RandomLayout">
             <summary>
            	Lays out a graph by placing the vertices in random locations.
             </summary>
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <remarks>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.RandomLayout.AnimationIterations">
            Number of iterations used to animate the graph.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.RandomLayout.AnimationSleepMs">
            Number of milliseconds to sleep between animation iterations.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RandomLayout.#ctor">
            <summary>
            Initializes a new instance of the RandomLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RandomLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously.
             </summary>
            
             <param name="graph">
             Graph to lay out.  The graph is guaranteed to have at least one vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.RandomLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer">
             <summary>
            	Draws an edge as a simple line.  Allows per-edge customizations, and
             accommodates vertices drawn as images.
             </summary>
            
             <remarks>
             By default, this class delegates edge drawing to its base class.  However,
             if an edge's second vertex is drawn as an image by <see cref="T:Microsoft.NetMap.Visualization.PerVertexWithImageDrawer"/>, the edge's second endpoint is adjusted
             to touch the edge of the image.  Self-loop edges are adjusted as well.
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.PerEdgeDrawer"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer.GetEdgeEndpoints(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.Drawing.PointF@,System.Drawing.PointF@)">
             <summary>
             Gets the endpoints of the edge.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="edgeEndpoint1">
             Where the edge's first endpoint gets stored.
             </param>
            
             <param name="edgeEndpoint2">
             Where the edge's second endpoint gets stored.
             </param>
            
             <remarks>
             The edge's first endpoint is the endpoint on the <paramref
             name="vertex1" /> side of the edge.  The edge's second endpoint is the
             endpoint on the <paramref name="vertex2" /> side of the edge.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer.DrawSelfLoop(System.Drawing.Pen,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge that is a self-loop.
             </summary>
            
             <param name="pen">
             Pen to use.
             </param>
            
             <param name="vertex">
             Vertex that the edge connects to itself.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithImageDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer">
             <summary>
            	Draws an edge in conjunction with <see cref="T:Microsoft.NetMap.Visualization.SugiyamaLayout"/> and <see cref="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer"/>.
             </summary>
            
             <remarks>
             This class draws edges that have been laid out by <see cref="T:Microsoft.NetMap.Visualization.SugiyamaLayout"/> as curved lines.  It is meant for use with <see cref="T:Microsoft.NetMap.Visualization.SugiyamaVertexDrawer"/>.
            
             <para>
             This class works in conjunction with <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/> to draw edges as either selected or
             unselected.  If an edge has been marked as selected by <see cref="M:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer.SelectEdge(Microsoft.NetMap.Core.IEdge)"/>, it is drawn using
             <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedColor"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.SelectedWidth"/>.  Otherwise, <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Color"/> and <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.Width"/> are used.
             Set the <see cref="P:Microsoft.NetMap.Visualization.EdgeDrawer.UseSelection"/> property to false to force
             all edges to be drawn as unselected.
             </para>
            
             <para>
             If this class is used by a graph drawer other than <see cref="T:Microsoft.NetMap.Visualization.MultiSelectionGraphDrawer"/>, all edges are drawn as unselected.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer"/>
            class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer.DrawEdgeCore(Microsoft.NetMap.Core.IEdge,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge.
             </summary>
            
             <param name="edge">
             The edge to draw.
             </param>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <remarks>
             This method gets called repeatedly while a graph is being drawn, once
             for each of the graph's edges.  The <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/>
            	property on all of the graph's vertices is set by ILayout.<see cref="M:Microsoft.NetMap.Visualization.ILayout.LayOutGraph(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext)"/> before this method is called.
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SugiyamaEdgeDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer">
             <summary>
            	Draws an edge as a simple line.  Allows per-edge customizations, and
             accommodates vertices drawn as labels.
             </summary>
            
             <remarks>
             By default, this class delegates edge drawing to its base class.  However,
             if an edge's second vertex is drawn as a label by <see cref="T:Microsoft.NetMap.Visualization.PerVertexWithLabelDrawer"/>, the edge's second endpoint is adjusted
             to touch the edge of the label rectangle.  Self-loop edges are adjusted as
             well.
             </remarks>
            
             <seealso cref="T:Microsoft.NetMap.Visualization.PerEdgeDrawer"/>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer.GetEdgeEndpoints(Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext,System.Drawing.PointF@,System.Drawing.PointF@)">
             <summary>
             Gets the endpoints of the edge.
             </summary>
            
             <param name="vertex1">
             The edge's first vertex.
             </param>
            
             <param name="vertex2">
             The edge's second vertex.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
            
             <param name="edgeEndpoint1">
             Where the edge's first endpoint gets stored.
             </param>
            
             <param name="edgeEndpoint2">
             Where the edge's second endpoint gets stored.
             </param>
            
             <remarks>
             The edge's first endpoint is the endpoint on the <paramref
             name="vertex1" /> side of the edge.  The edge's second endpoint is the
             endpoint on the <paramref name="vertex2" /> side of the edge.
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer.DrawSelfLoop(System.Drawing.Pen,Microsoft.NetMap.Core.IVertex,Microsoft.NetMap.Visualization.DrawContext)">
             <summary>
             Draws an edge that is a self-loop.
             </summary>
            
             <param name="pen">
             Pen to use.
             </param>
            
             <param name="vertex">
             Vertex that the edge connects to itself.
             </param>
            
             <param name="drawContext">
             Provides access to objects needed for drawing operations.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.PerEdgeWithLabelDrawer.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.GridLayout">
             <summary>
            	Lays out a graph by placing the vertices on a grid.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on a simple grid.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GridLayout.AnimationIterations">
            Number of iterations used to animate the graph the first time it is
            drawn.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.GridLayout.AnimationSleepMs">
            Number of milliseconds to sleep between animation iterations.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class.
            </summary>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GridLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GridLayout.GetRowsAndColumns(System.Collections.ICollection,Microsoft.NetMap.Visualization.LayoutContext,System.Int32@,System.Int32@)">
             <summary>
             Gets the number of rows and columns to use in the grid.
             </summary>
            
             <param name="oVerticesToLayOut">
             Vertices to lay out.
             </param>
            
             <param name="oLayoutContext">
             Provides access to objects needed to lay out the graph.
             </param>
            
             <param name="iRows">
             Where the number of grid rows gets stored.  Because the first row of
             vertices is drawn on the first horizontal grid line and not on the top
             edge of the rectangle, the number of vertices to draw per column is
             <paramref name="iRows" /> minus one.
             </param>
            
             <param name="iColumns">
             Where the number of grid columns gets stored.  Because the first column
             of vertices is drawn on the first vertical grid line and not on the
             left edge of the rectangle, the number of vertices to draw per row is
             <paramref name="iColumns" /> minus one.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GridLayout.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
             <summary>
             Solves a quadratic equation.
             </summary>
            
             <param name="a">
             See remarks.  Can't be zero.
             </param>
            
             <param name="b">
             See remarks.
             </param>
            
             <param name="c">
             See remarks.
             </param>
            
             <param name="x1">
             Where the first solution gets stored.
             </param>
            
             <param name="x2">
             Where the second solution gets stored.
             </param>
            
             <remarks>
             This method solves this quadratic formula:
            
             <para>
               2
             ax  + bx + c = 0
             </para>
            
             <para>
             It stores the two values of x at <paramref name="x1" /> and <paramref
             name="x2" />.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.GridLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SinusoidHorizontalLayout">
             <summary>
            	Lays out a graph by placing the vertices on a horizontal sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle horizontally from left to right.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/> with a value of true, it
             is included in layout calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SinusoidLayout">
             <summary>
            	Lays out a graph by placing the vertices on a horizontal or vertical sine
             wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle either horizontally or vertically.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SinusoidLayout.AnimationIterations">
            Number of iterations used to animate the graph the first time it is
            drawn.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SinusoidLayout.AnimationSleepMs">
            Number of milliseconds to sleep between animation iterations.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SinusoidLayout.#ctor(System.Boolean,System.Double)">
             <summary>
             Initializes a new instance of the SinusoidLayout class.
             </summary>
            
             <param name="isHorizontal">
             true for a sine wave that runs from left to right, false for top to
             bottom.
             </param>
            
             <param name="cycleLength">
             Length of the sine wave cycle, in radians.
             </param>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SinusoidLayout.LayOutGraphCore(Microsoft.NetMap.Core.IGraph,Microsoft.NetMap.Visualization.LayoutContext,System.Collections.ICollection,System.ComponentModel.BackgroundWorker)">
             <summary>
             Lays out a graph synchronously or asynchronously using specified
             vertices that may be sorted.
             </summary>
            
             <param name="graph">
             Graph to lay out.
             </param>
            
             <param name="verticesToLayOut">
             Vertices to lay out.  The collection is guaranteed to have at least one
             vertex.
             </param>
            
             <param name="layoutContext">
             Provides access to objects needed to lay out the graph.  The <see cref="P:Microsoft.NetMap.Visualization.LayoutContext.GraphRectangle"/> is guaranteed to have non-zero
             width and height.
             </param>
            
             <param name="backgroundWorker">
             <see cref="T:System.ComponentModel.BackgroundWorker"/> whose worker thread called this method
             if the graph is being laid out asynchronously, or null if the graph is
             being laid out synchronously.
             </param>
            
             <returns>
             true if the layout was successfully completed, false if the layout was
             cancelled.  The layout can be cancelled only if the graph is being laid
             out asynchronously.
             </returns>
            
             <remarks>
            	This method lays out the graph <paramref name="graph"/> either
             synchronously (if <paramref name="backgroundWorker"/> is null) or
             asynchronously (if (<paramref name="backgroundWorker"/> is not null)
             by setting the the <see cref="P:Microsoft.NetMap.Core.IVertex.Location"/> property on all of
             the graph's vertices and optionally adding geometry metadata to the
             graph, vertices, or edges.
            
             <para>
             In the asynchronous case, the <see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending"/> property on the
             <paramref name="backgroundWorker"/> object should be checked before
             each layout iteration.  If it's true, the method should immediately
             return false.  Also, <see cref="M:Microsoft.NetMap.Visualization.AsyncLayoutBase.FireLayOutGraphIterationCompleted"/> should be
             called after each iteration.
             </para>
            
             <para>
             The arguments have already been checked for validity.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SinusoidLayout.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SinusoidLayout.m_bIsHorizontal">
            true for a sine wave that runs from left to right, false for top to
            bottom.
        </member>
        <member name="F:Microsoft.NetMap.Visualization.SinusoidLayout.m_dCycleLength">
            Length of the sine wave cycle, in radians.
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SinusoidHorizontalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidHorizontalLayout class.
            </summary>
        </member>
        <member name="T:Microsoft.NetMap.Visualization.SinusoidVerticalLayout">
             <summary>
            	Lays out a graph by placing the vertices on a vertical sine wave.
             </summary>
            
             <remarks>
             This layout places a graph's vertices on one cycle of a sine wave that
             spans the rectangle vertically from top to bottom.
            
             <para>
             If the graph has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LayOutTheseVerticesOnly"/>, only the vertices
             specified in the value's IVertex array are laid out and all other vertices
             are completely ignored.
             </para>
            
             <para>
             If a vertex has a metadata key of <see cref="F:Microsoft.NetMap.Core.ReservedMetadataKeys.LockVertexLocation"/>, it is included in layout
             calculations but its own location is left unmodified.
             </para>
            
             <para>
             If you want the vertices to be placed in a certain order, set the <see cref="P:Microsoft.NetMap.Visualization.SortableLayoutBase.VertexSorter"/> property to an object that will
             sort them.
             </para>
            
             <para>
             <see cref="T:Microsoft.NetMap.Visualization.VertexDrawer"/> and <see cref="T:Microsoft.NetMap.Visualization.EdgeDrawer"/> can be used to
             draw the graph after it is laid out.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.NetMap.Visualization.SinusoidVerticalLayout.#ctor">
            <summary>
            Initializes a new instance of the SinusoidVerticalLayout class.
            </summary>
        </member>
    </members>
</doc>
